<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2014-12-07T16:00:00-08:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember.js 1.9.0 and 1.10 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/12/08/ember-1-9-0-released.html"/>
    <id>http://emberjs.com/blog/2014/12/08/ember-1-9-0-released.html</id>
    <published>2014-12-07T16:00:00-08:00</published>
    <updated>2014-12-07T16:00:00-08:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.9.0 and the
first beta in the 1.10 series. This comes as the ninth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.9 release represents the effort of at least 52...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.9.0 and the
first beta in the 1.10 series. This comes as the ninth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.9 release represents the effort of at least 52 contributors across over 436 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-road-to-ember-2-0'&gt;The Road to Ember 2.0&lt;/h2&gt;
&lt;p&gt;In early November Tom, Yehuda, and the Ember.js Core Team shared &lt;a href="https://github.com/emberjs/rfcs/pull/15"&gt;The Road to Ember 2.0&lt;/a&gt;.
This RFC document acts as a map for the next several releases of Ember.js.&lt;/p&gt;

&lt;p&gt;Ember.js 1.9 introduces several important deprecations that signal upcoming changes. Additionally, many view-layer internals are
refactored to take advantage of the &amp;quot;streams&amp;quot; observation pattern.&lt;/p&gt;

&lt;p&gt;Ember.js 1.10 (beta) begins a series of releases that will
introduce new APIs while deprecating ones to be removed in 2.0.&lt;/p&gt;

&lt;p&gt;To that end, and with much excitement, &lt;strong&gt;we are extremely pleased to announce the introduction
of the HTMLBars templating engine into Ember.js 1.10&lt;/strong&gt;. This new rendering pipeline
marks a significant milestone for the framework, and by maintaining
complete API compatibility it demonstrates our commitment to stability without stagnation.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-and-deprecations-in-ember-js-1-9'&gt;New Features and Deprecations in Ember.js 1.9&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_handlebars-2-0'&gt;Handlebars 2.0&lt;/h4&gt;
&lt;p&gt;As &lt;a href="http://emberjs.com/blog/2014/10/16/handlebars-update.html"&gt;announced in October&lt;/a&gt;, Ember.js 1.9
adds support for Handlebars 2.0 templates and removes support for Handlebars 1.x templates. This
change does not affect the template syntax or public API of Ember applications.&lt;/p&gt;

&lt;p&gt;Projects using an Ember-CLI version less than 0.1.5 will require a bump
of the Handlebars dependency version:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bower install --save handlebars#2.0.0
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Additionally the template pre-compiler (installed via npm)
will require an update:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm uninstall --save-dev broccoli-ember-hbs-template-compiler
npm install --save-dev ember-cli-htmlbars
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Non-CLI applications will likewise require a bump of their Handlebars dependency version.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_streams'&gt;Streams&lt;/h4&gt;
&lt;p&gt;Data-binding in Ember.js has traditionally been based on the concept of a key-value
observer. In Ember 1.x, KVO observers fire immediately upon the change of a value,
giving them performance characteristics that cannot be changed until Ember 2.0. In
comparison, streams distinguish change notification from value calculation. The value of
a stream can be described as &amp;quot;lazy&amp;quot;, as it is not computed until needed.&lt;/p&gt;

&lt;p&gt;The addition of streams to Ember and their use throughout the view layer
improves the performance of rendering, simplifies many helpers, and prepares
Ember&amp;#39;s codebase for HTMLBars.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;, &lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;, and &lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt; who wrote an Ember.js stream
implementation then updated every Handlebars helper to the new API.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_activate-and-deactivate-events'&gt;Activate and Deactivate Events&lt;/h4&gt;
&lt;p&gt;Ember.js routes have long supported an &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; hook.
For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/routes/index.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Route.extend({
  &lt;span class="function"&gt;activate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    collectAnalytics();
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ember.js 1.9 introduces corresponding events for these hooks.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/routes/index.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Route.extend({
  &lt;span class="function"&gt;collectAnalytics&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    collectAnalytics();
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;activate&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/pangratz"&gt;@pangratz&lt;/a&gt; for the addition of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_pausetest'&gt;pauseTest&lt;/h4&gt;
&lt;p&gt;When debugging an Ember acceptance test, it can be helpful to
pause and inspect the DOM or application state.
Ember.js 1.9 adds a new test helper for indefinitely pausing
test execution.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;clicking login authenticates&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;return&lt;/span&gt; pauseTest();
  &lt;span class="comment"&gt;// The test will never proceed to execute this click&lt;/span&gt;
  click(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(Login)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/katiegengler"&gt;@katiegengler&lt;/a&gt; for the addition of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_key-up-and-key-down-actions'&gt;key-up and key-down actions&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{input}}&lt;/code&gt; and &lt;code&gt;{{textarea}}&lt;/code&gt; helpers in Ember emit several
actions, including &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;insert-newline&lt;/code&gt;, &lt;code&gt;escape-press&lt;/code&gt;, &lt;code&gt;focus-in&lt;/code&gt;,
&lt;code&gt;focus-out&lt;/code&gt;, and &lt;code&gt;key-press&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This release introduces &lt;code&gt;key-up&lt;/code&gt; and &lt;code&gt;key-down&lt;/code&gt; actions. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! call the `validateName` action on the current controller
    or component scope: }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="attribute-value"&gt;name&lt;/span&gt; &lt;span class="attribute-name"&gt;key-up&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;validateName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.9 comes with several performance improvements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The implementation of &lt;code&gt;_super&lt;/code&gt; in Ember is fairly complex, and can
perform badly. Ember 1.9 uses a check against the string version of a
function to determine if all parts of the implementation are needed, or
if some work can be skipped.&lt;/li&gt;
&lt;li&gt;Additional improvements to the performance of &lt;code&gt;Ember.Map&lt;/code&gt; have been made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt; for his continued
efforts on performance tuning.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;As Ember.js moves forward, various APIs are deprecated to allow for their
removal in a later major release (such as 2.0). The
&lt;a href="http://emberjs.com/guides/deprecations/"&gt;deprecations guide&lt;/a&gt; summarizes
deprecations and demonstrates how to update to a new API.&lt;/p&gt;

&lt;p&gt;Ember 1.9 deprecates context switching in templates. Templates with context
switching are difficult to read, and the concept is challenging for new
developers. The removal of context switching from templates in 
Ember 2.0 aims to make scoping consistent and predictable. This deprecation
is a step toward that goal.&lt;/p&gt;

&lt;p&gt;Two Ember helpers support context switching. The first is &lt;code&gt;{{each}}&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/people.hbs }}&lt;/span&gt;

&lt;span class="comment"&gt;{{! this context is the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;model&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! this context is each person }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The non-context switching version of this helper is now preferred:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/people.hbs }}&lt;/span&gt;

&lt;span class="comment"&gt;{{! this context is the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;in&lt;/span&gt; &lt;span class="attribute-name"&gt;model&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! this context is still the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The second helper is &lt;code&gt;{{with}}&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/person.hbs }}&lt;/span&gt;

&lt;span class="comment"&gt;{{! this context is the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;model&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! this context is the person }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The non-context switching version of this helper is now preferred:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/person.hbs }}&lt;/span&gt;

&lt;span class="comment"&gt;{{! this context is the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;model&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="attribute-name"&gt;person&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! this context is still the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_new-features-and-deprecations-in-ember-js-1-10'&gt;New Features and Deprecations in Ember.js 1.10&lt;/h2&gt;
&lt;p&gt;Ember.js 1.10 marks the migration of Ember&amp;#39;s rendering pipeline from a
string-based process to a DOM-based one. &lt;strong&gt;Existing application templates require
no modification to run HTMLBars&lt;/strong&gt;. New syntaxes enabled by Ember&amp;#39;s DOM-based
rendering pipeline and HTMLBars will land over the next several releases.&lt;/p&gt;

&lt;p&gt;Before branching into 1.10 beta, HTMLBars was available for nearly two weeks
behind a canary feature flag. We thank the community members who took time from
work or weekends to test the change and provide feedback.&lt;/p&gt;

&lt;p&gt;Teasing apart the HTMLBars project to ship it incrementally has ensured
that existing codebases can make the jump without modification. This release
lays the infrastructural groundwork for features and even greater performance
improvements to come.&lt;/p&gt;

&lt;p&gt;Input and feedback on the 1.10 beta from real-world use will help us ensure a
smooth transition to release.&lt;/p&gt;

&lt;p&gt;To test your Ember-CLI codebase on Ember.js 1.10 and HTMLBars, follow these steps
to upgrade Ember:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rm -rf bower_components
bower install --save ember#beta
bower install
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then update your template compiler to HTMLBars:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm uninstall --save-dev broccoli-ember-hbs-template-compiler
npm install --save-dev ember-cli-htmlbars
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Over the beta cycle, we expect to see 3rd party libraries and
build pipelines update to support HTMLBars. If you manage a project
and have any difficulty, reach out to the community and core team
on the &lt;a href="http://discuss.emberjs.com/"&gt;forum&lt;/a&gt; or &lt;code&gt;#ember-dev&lt;/code&gt; IRC chatroom.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_block-params'&gt;Block Params&lt;/h4&gt;
&lt;p&gt;Block parameters are a new feature introduced with 1.10. They address
two problems in Ember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The non-context switching version of &lt;code&gt;{{#each}}&lt;/code&gt; and &lt;code&gt;{{#with}}&lt;/code&gt; are inconsistent.
&lt;code&gt;{{#each car in cars}}&lt;/code&gt; and &lt;code&gt;{{#with model as car}}&lt;/code&gt; have similar meaning but
different syntaxes.&lt;/li&gt;
&lt;li&gt;Ember&amp;#39;s components are strictly encapsulated. Values are explicitly passed
in, and only actions are emitted from components. The inability to pass values
makes composition of components difficult.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Block params add a template syntax that allows values to be yielded from
one helper or component to a child scope. The new syntax makes
the named value version of &lt;code&gt;{{#each}}&lt;/code&gt; and &lt;code&gt;{{#with}}&lt;/code&gt; consistent. For
example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! available on the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;cars&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;car&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;car.manufacturer&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;make&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;make.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! still the controller scope }}&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Preserving template scope context results in easier to read templates.&lt;/p&gt;

&lt;p&gt;Any component in Ember 1.10 can use this feature. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/components/my-unordered-list.hbs }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;items&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;item&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;yield&lt;/span&gt; &lt;span class="attribute-name"&gt;item&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/index.hbs }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;my-unordered-list&lt;/span&gt; &lt;span class="attribute-name"&gt;items&lt;/span&gt;=&lt;span class="attribute-value"&gt;cars&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;car&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  Auto: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;car.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;my-unordered-list&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;my-unordered-list&lt;/code&gt; component is called, passing &lt;code&gt;cars&lt;/code&gt; as &lt;code&gt;items&lt;/code&gt;. The
component template iterates through
each &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;items&lt;/code&gt;, yielding to the calling template with a block
param. The calling template accepts the block param as &lt;code&gt;car&lt;/code&gt; and displays the
car&amp;#39;s name.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for the implementation of this important new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_renaming-release-files'&gt;Renaming Release Files&lt;/h4&gt;
&lt;p&gt;A release of Ember.js consists of three files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ember.prod.js&lt;/code&gt; - an un-minified production build (no asserts)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember.min.js&lt;/code&gt; - a minified production build&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember.js&lt;/code&gt; - a development build (with asserts)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The non-production build of Ember will not perform as well as the
production build. To ensure there is no confusion about using the
&lt;code&gt;ember.js&lt;/code&gt; build in production, Ember.js 1.10 and later will use a
new filename:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ember.prod.js&lt;/code&gt; - an un-minified production build (no asserts)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember.min.js&lt;/code&gt; - a minified production build&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember.debug.js&lt;/code&gt; - a development build (with asserts)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An &lt;code&gt;ember.js&lt;/code&gt; file will continue to be provided with a deprecation warning.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-10'&gt;Notable Deprecations in 1.10&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.10:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting the &lt;code&gt;childViews&lt;/code&gt; property on a view definition will be deprecated in
1.10. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="key"&gt;childViews&lt;/span&gt;: [ &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;childA&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, ChildB ],
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This use of &lt;code&gt;childViews&lt;/code&gt; is inconsistent with other uses throughout Ember, and
as a result is difficult to implement with good performance. Explicitly creating
views upon initialization is preferred:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(&lt;span class="local-variable"&gt;this&lt;/span&gt;.childA));
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(ChildB));
  },
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;beforeObserver&lt;/code&gt; feature is deprecated in Ember 1.10. Before observers
are rarely used, but introduce significant overhead to the observer system
in general. For observer use that requires the previous value of a property
be known, implementing a cache is simple and more efficient. Read more about
how to do this in &lt;a href="http://emberjs.com/guides/deprecations/#toc_deprecate-beforeobservers"&gt;the deprecation guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Quote-less outlet names are deprecated in 1.10. An example of this is
&lt;code&gt;{{outlet modal}}&lt;/code&gt;, which would be re-written as &lt;code&gt;{{outlet &amp;quot;modal&amp;quot;}}&lt;/code&gt;.
This ensures the outlet helper is consistent with others, where unquoted
words are values and not string literals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the features included in Ember 1.11 are developed, additional deprecations
may be added to the 1.10 release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.9.0/CHANGELOG.md"&gt;Ember.js 1.9.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.10.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.10.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.12 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/11/24/ember-data-1-0-beta-12-released.html"/>
    <id>http://emberjs.com/blog/2014/11/24/ember-data-1-0-beta-12-released.html</id>
    <published>2014-11-23T16:00:00-08:00</published>
    <updated>2014-11-23T16:00:00-08:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;h2 class="anchorable-toc" id="toc_new-core-contributors"&gt;New Core Contributors&lt;/h2&gt;
&lt;p&gt;Long-time contributors &lt;a href="https://github.com/bmac"&gt;Brendan McLoughlin&lt;/a&gt; and &lt;a href="https://github.com/sly7-7"&gt;Sylvain Mina&lt;/a&gt;
have been given collaborator status and will help us triage issues, merge pull
requests, and contribute bugfixes and documentation.&lt;/p&gt;
&lt;h2 class="anchorable-toc" id="toc_new-features"&gt;New Features&lt;/h2&gt;&lt;h3 class="anchorable-toc" id="toc_store-fetch"&gt;store.fetch&lt;/h3&gt;
&lt;p&gt;When using...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 class='anchorable-toc' id='toc_new-core-contributors'&gt;New Core Contributors&lt;/h2&gt;
&lt;p&gt;Long-time contributors &lt;a href="https://github.com/bmac"&gt;Brendan McLoughlin&lt;/a&gt; and &lt;a href="https://github.com/sly7-7"&gt;Sylvain Mina&lt;/a&gt;
have been given collaborator status and will help us triage issues, merge pull
requests, and contribute bugfixes and documentation.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features'&gt;New Features&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_store-fetch'&gt;store.fetch&lt;/h3&gt;
&lt;p&gt;When using Ember Data, the most common pattern in the &lt;code&gt;model&lt;/code&gt; hook is to call
&lt;code&gt;store.find&lt;/code&gt; for your model:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="keyword"&gt;var&lt;/span&gt; PostRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(params) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, params.post_id);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;store.find&lt;/code&gt; will return the instance of the &lt;code&gt;Post&lt;/code&gt; record if it has already
been fetched in the store. Sometimes, this is not desirable. For example, you
may not know if you have already loaded the post in another request via
sideloading, or you want the most up to date information. You could either
check if the record existed using
&lt;a href="http://emberjs.com/api/data/classes/DS.Store.html#method_hasRecordForId"&gt;store.hasRecordForId&lt;/a&gt;, or just always call
&lt;a href="http://emberjs.com/api/data/classes/DS.Model.html#method_reload"&gt;reload&lt;/a&gt; on your model in the route&amp;#39;s &lt;code&gt;afterModel&lt;/code&gt;hook.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;store.fetch&lt;/code&gt; wraps this common pattern by reloading a record if it exists in
the store, or reloads the record if it doesn&amp;#39;t exist:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(params){
  &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.fetch(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, params.post_id);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please give a warm thanks to &lt;a href="https://github.com/thaume"&gt;Tom Coquereau&lt;/a&gt; for his &lt;a href="https://github.com/emberjs/data/pull/2478"&gt;pull
request&lt;/a&gt; implementing this feature!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_bugfixes'&gt;Bugfixes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_relationship-createrecord-returns-the-record-instead-of-a-promise'&gt;relationship.createRecord() returns the record instead of a promise&lt;/h3&gt;
&lt;p&gt;Prior to Ember Data v1.0.0-beta.11, the following code would give you direct
access to a record:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; post    = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; comment = post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In beta.11, it returned a Promise, meaning you couldn&amp;#39;t call things like
&lt;code&gt;set/get&lt;/code&gt; on the resulting record. This regression has been fixed in beta.12
thanks to &lt;a href="https://github.com/ZenCocoon"&gt;Sébastien Grosjean&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_internet-explorer-8-requires-ember-1-8'&gt;Internet Explorer 8 Requires Ember 1.8&lt;/h3&gt;
&lt;p&gt;A bug in Ember 1.7&amp;#39;s &lt;code&gt;Ember.create&lt;/code&gt; method (which is a polyfill for
&lt;code&gt;Object.create&lt;/code&gt;) combined with a bug in es5-shim&amp;#39;s &lt;code&gt;Object.create&lt;/code&gt; prevent us
from giving Ember Data users a good alternative to use. Internally, Ember Data
uses &lt;code&gt;Object.create&lt;/code&gt; for efficient caches. Ember 1.8 ships a working
&lt;code&gt;Object.create&lt;/code&gt; polyfill on &lt;code&gt;Ember.create&lt;/code&gt; so if you are using Internet
Explorer 8 and Ember Data in production, you should upgrade to Ember 1.8 as
soon as you can.&lt;/p&gt;

&lt;p&gt;If you are using browsers that provide &lt;code&gt;Object.create&lt;/code&gt;, you do not need to do
any additional work here. This includes mobile browsers, evergreen browsers
(Chrome, Opera, Firefox), Safari, and IE9+.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-1-7-support-will-be-completely-dropped-in-beta-13'&gt;Ember 1.7 Support Will Be Completely Dropped in Beta.13&lt;/h3&gt;
&lt;p&gt;Ember Data relies heavily on JavaScript language-level shims (such as the
&lt;code&gt;Object.create&lt;/code&gt; issue mentioned above) and other useful internals that Ember
provides. Rather than creating our own detection algorithms and more polyfills
for broken code in Ember 1.7, we are deciding to drop 1.7 support in the next
release of Ember Data. We do so in order to not increase the final size of
Ember Data&amp;#39;s build. You should upgrade to Ember 1.8 as soon as you can.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_observing-code-data-code-for-changes-has-been-removed'&gt;Observing &lt;code&gt;data&lt;/code&gt; For Changes Has Been Removed&lt;/h3&gt;
&lt;p&gt;Although &lt;code&gt;model.get(&amp;#39;data&amp;#39;)&lt;/code&gt; has been private in Ember Data for a long time, we
have noticed users may subscribe to changes on &lt;code&gt;data&lt;/code&gt; for any change to the
model&amp;#39;s attributes. This means that the following code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Post = DS.Model.extend({
  &lt;span class="function"&gt;doSomethingWhenDataChanges&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="comment"&gt;// do the work&lt;/span&gt;
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;no longer works&lt;/strong&gt;. Instead, you should just watch each attribute like you
would with any &lt;code&gt;Ember.Object&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Post = DS.Model.extend({
  &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(),
  &lt;span class="key"&gt;date&lt;/span&gt;: DS.attr(),
  &lt;span class="function"&gt;doSomethingWhenDataChanges&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="comment"&gt;// do the work&lt;/span&gt;
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;date&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This change fixed some bugs around observers. Thanks to &lt;a href="https://github.com/wecc"&gt;Christoffer
Persson&lt;/a&gt; for helping to clean this up and fix some observer bugs around
this!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_special-thanks'&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/wecc"&gt;Christoffer Persson&lt;/a&gt; for helping us implement bugfixes and API
changes, as well as triaging issues.&lt;/p&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Igor Terzic Joins the Core Team</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/11/16/igor-terzic-joins-the-core-team.html"/>
    <id>http://emberjs.com/blog/2014/11/16/igor-terzic-joins-the-core-team.html</id>
    <published>2014-11-15T16:00:00-08:00</published>
    <updated>2014-11-15T16:00:00-08:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today I'm happy to announce that Igor Terzic is joining the Ember.js
core team.&lt;/p&gt;

&lt;p&gt;Igor has been instrumental in the development of Ember Data. He has both
fixed bugs relentlessly and landed major new features, such as the
recent work on modelling relationships...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today I&amp;#39;m happy to announce that Igor Terzic is joining the Ember.js
core team.&lt;/p&gt;

&lt;p&gt;Igor has been instrumental in the development of Ember Data. He has both
fixed bugs relentlessly and landed major new features, such as the
recent work on modelling relationships as entities with a single source
of truth.&lt;/p&gt;

&lt;p&gt;Thanks to his hard work, Ember Data is rapidly approaching a stable
release, and it&amp;#39;s no exaggeration to say that we couldn&amp;#39;t have done it
without him.&lt;/p&gt;

&lt;p&gt;Igor has been maintaining Ember Data diligently for some time now, and
we are overdue in recognizing his efforts via membership to the core
team. As Ember Data is more than ever a core part of the Ember
experience, we&amp;#39;re looking forward to even tighter coordination between
the two projects.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://twitter.com/terzicigor"&gt;follow Igor on Twitter&lt;/a&gt; if
you&amp;#39;d like to keep tabs as he travels the world. Thank you, Igor, for
all of your hard work, and welcome to the core team!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.8.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/11/04/ember-1-8-1-released.html"/>
    <id>http://emberjs.com/blog/2014/11/04/ember-1-8-1-released.html</id>
    <published>2014-11-03T16:00:00-08:00</published>
    <updated>2014-11-03T16:00:00-08:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today we are releasing Ember.js 1.8.1, a patch-level release of Ember that
fixes several minor regressions introduced in the 1.8 release.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_throw-exception-when-code-attributebindings-code-includes-code-class-code"&gt;Throw exception when &lt;code&gt;attributeBindings&lt;/code&gt; includes &lt;code&gt;class&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Prior to 1.8, it was possible to make &lt;code&gt;class&lt;/code&gt; part of &lt;code&gt;attributeBindings&lt;/code&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today we are releasing Ember.js 1.8.1, a patch-level release of Ember that
fixes several minor regressions introduced in the 1.8 release.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_throw-exception-when-code-attributebindings-code-includes-code-class-code'&gt;Throw exception when &lt;code&gt;attributeBindings&lt;/code&gt; includes &lt;code&gt;class&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Prior to 1.8, it was possible to make &lt;code&gt;class&lt;/code&gt; part of &lt;code&gt;attributeBindings&lt;/code&gt; and have
those values merged with &lt;code&gt;classNameBindings&lt;/code&gt;. For example, with the following template
and code &amp;quot;from-template&amp;quot; and &amp;quot;from-class&amp;quot; would be merged into the DOM node&amp;#39;s class
list.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;foo-bar&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;from-template&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.FooBarComponent = Ember.Component.extend({
  &lt;span class="key"&gt;classNameBindings&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;:from-class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="key"&gt;attributeBindings&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The intent of this code is unclear and the pre-1.8 behavior was unintentional. In Ember
1.8.1 an exception is thrown for including &lt;code&gt;class&lt;/code&gt; in &lt;code&gt;attributeBindings&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_view-instances'&gt;View instances&lt;/h3&gt;
&lt;p&gt;Passing view instances to the &lt;code&gt;{{view}}&lt;/code&gt; helper was broken in Ember.js 1.8. This behavior
has been restored.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_work-around-provided-for-more-ios8-armv7-jit-bugs'&gt;Work-around provided for more iOS8 ARMv7 JIT Bugs&lt;/h3&gt;
&lt;p&gt;iOS8 has introduced a severe bug in optimized ARMv7 code. In 1.8.0 we worked around the issue
in a number of modules, and we have expanded our work around for more modules in 1.8.1&lt;/p&gt;

&lt;p&gt;Further Reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://bugs.webkit.org/show_bug.cgi?id=138038&lt;/li&gt;
&lt;li&gt;https://github.com/emberjs/ember.js/issues/5606&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_support-rendering-of-null-prototype-objects'&gt;Support rendering of null-prototype objects&lt;/h3&gt;
&lt;p&gt;meta-data objects in Ember-Data are null-prototype, a special kind of object created
with &lt;code&gt;Object.create(null)&lt;/code&gt;. In 1.8 these objects could not be rendered. 1.8.1 repairs
this.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_support-non-string-unescaped-content'&gt;Support non-string unescaped content&lt;/h3&gt;
&lt;p&gt;In Ember 1.8 rendering an unescaped value that was not a string &lt;code&gt;{{{someNumberLiteral}}}&lt;/code&gt;
would raise an exception. This has been fixed.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_support-multiple-option-rendering-template-blocks'&gt;Support multiple option-rendering template blocks&lt;/h3&gt;
&lt;p&gt;In Ember 1.8, template strings are parsed into DOM via &lt;code&gt;innerHTML&lt;/code&gt;. Creating a stand-alone
option tag this way results in that tag being considered &amp;quot;selected&amp;quot; even if it is not
explicitly so. Consequently the last option of a select would often be selected upon
render instead of the first.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve restored support for templates like this:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;select&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;First option is selected at render in 1.8.1&lt;span class="tag"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;item&lt;/span&gt; &lt;span class="attribute-name"&gt;in&lt;/span&gt; &lt;span class="attribute-name"&gt;items&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;item.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_known-whitespace-issues-in-chrome'&gt;Known whitespace issues in Chrome&lt;/h3&gt;
&lt;p&gt;Some templates may result in missing whitespace in Chrome. For example,
if the following template renders initially with no names, then updates
via data-binding later, the space between names may not be visible.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;firstName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;lastName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Ember.js 1.9 we expect to land a refactor to the morph library that
updates dynamic DOM content, and this should alleviate this issue. Merging
the refactor into a point release is
too risky, so we have labelled this issues a wont-fix.&lt;/p&gt;

&lt;p&gt;The Chrome team has been notified of this bug and you can track
progress &lt;a href="https://code.google.com/p/chromium/issues/detail?id=428313"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/compare/v1.8.0...stable"&gt;Ember.js 1.8.0 to 1.8.1 commit log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.8.1/CHANGELOG.md"&gt;Ember.js 1.8.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.8.0 and 1.9 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/10/26/ember-1-8-0-released.html"/>
    <id>http://emberjs.com/blog/2014/10/26/ember-1-8-0-released.html</id>
    <published>2014-10-25T17:00:00-07:00</published>
    <updated>2014-10-25T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.8.0 and the first beta in the
1.9 series have been released. This comes as the eighth cycle of our release
process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;This release represents the effort of at least...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.8.0 and the first beta in the
1.9 series have been released. This comes as the eighth cycle of our release
process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;This release represents the effort of at least 40 contributors across over 600 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_major-rendering-layer-refactor-metal-views'&gt;Major rendering-layer refactor (&amp;quot;metal-views&amp;quot;)&lt;/h2&gt;
&lt;p&gt;In previous versions of Ember.js, the HTML of a page was created (via
Handlebars) and assembled (via the render tree) using string concatenation. In
Ember.js 1.8, fragments of a page are still created (via Handlebars) as
strings, but are then parsed into DOM and assembled as a DOM tree.&lt;/p&gt;

&lt;p&gt;Metal-views is the first part of the HTMLBars effort to land in Ember. It is
an important step towards the complete removal of strings from the Ember.js
rendering pipeline.&lt;/p&gt;

&lt;p&gt;Introducing HTMLBars into Ember incrementally demonstrates the community&amp;#39;s
commitment to semantic versioning, and to improving the framework without
abandoning existing codebases.&lt;/p&gt;

&lt;p&gt;Some of the immediate benefits of this refactor are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The removal of recursion from the rendering layer. This decreases garbage
collection pressure during rendering and allows the re-use of objects during
render (for example, the render buffer).&lt;/li&gt;
&lt;li&gt;Improved HTML namespace and contextual element tracking. This introduces
support for components, data-binding, and logic within inline SVG documents.
&lt;a href="http://jsbin.com/woxes/8/"&gt;Example JSBin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prior versions of Ember.js relied upon script tags to mark
regions of data bound content. For example a simple template of &lt;code&gt;{{name}}&lt;/code&gt;
might be rendered into the page as:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
Bob
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These script tags could interfere with &lt;code&gt;:first-child&lt;/code&gt; and other CSS selectors,
and were a general nuisance. In Ember.js 1.8 the library powering these
bindings (&lt;a href="https://github.com/tomhuda/metamorph.js/"&gt;metamorph.js&lt;/a&gt;) has been
replaced with a completely re-written engine that uses blank text nodes
(&lt;a href="https://github.com/tildeio/htmlbars/blob/master/packages/morph/lib/morph.js"&gt;morph.js&lt;/a&gt;). One of the major touted benefits of HTMLBars, the Ember team is
happy to make this a reality in 1.8.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;,
&lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;, &lt;a href="https://twitter.com/_mmun"&gt;@mmun&lt;/a&gt;,
&lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, and all developers who took time to
test their applications on 1.8 beta. Delivering this update without breaking
1.x API compatibility took a significant community effort.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h2&gt;
&lt;p&gt;Ember.js 1.8 comes with several performance improvements in other parts of the
codebase.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.js APIs often require the use of a string to lookup a class or route.
Often these strings must be passed through a normalization step before they are
used, such as pluralizing, singularizing, or changing snake_case to camelCase.
1.8 introduces several caches for these operations, resulting in common
operations being performed far fewer times.&lt;/li&gt;
&lt;li&gt;The refactoring of commonly de-optimized functions in v8 and other browsers.&lt;/li&gt;
&lt;li&gt;The conversion of &lt;code&gt;MANDATORY_SETTER&lt;/code&gt; from a runtime flag into a build-time
feature flag. This allows relevant code paths in &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; to be slimmer
in production builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/stefanpenner/"&gt;@stefanpenner&lt;/a&gt; and
&lt;a href="https://twitter.com/twokul"&gt;@twokul&lt;/a&gt; for their continued efforts on
performance tuning.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h2&gt;
&lt;p&gt;As Ember.js moves forward, various APIs are deprecated to allow for their
removal in a later major release (such as 2.0). With this release a
&lt;a href="http://emberjs.com/guides/deprecations/"&gt;deprecations guide&lt;/a&gt; has been added to
the Ember.js website. This guide will help developers refactor their code away
from old APIs.&lt;/p&gt;

&lt;p&gt;Four notable deprecations are added with the release of 1.8.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ember.Set&lt;/code&gt; is a class for managing an unordered collection of objects (&lt;a href="http://emberjs.com/api/classes/Ember.Set.html"&gt;api
docs&lt;/a&gt;). It is a private API and
thus subject to change, however several libraries have chosen to use it despite
this. Since the addition of this API to Ember, the ES6 draft has matured in its
description of a native JavaScript Set class. &lt;code&gt;Ember.Set&lt;/code&gt; is not compatible
with the upcoming API, and is now deprecated.&lt;/li&gt;
&lt;li&gt;In an effort to more closely align &lt;code&gt;Ember.Map&lt;/code&gt; with ES6, the &lt;code&gt;remove&lt;/code&gt; method
has been deprecated in favor of &lt;code&gt;delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;currentWhen&lt;/code&gt; property on links is deprecated in favor of &lt;code&gt;current-when&lt;/code&gt;.
This property name more closely tracks how component properties will be used in the
future.&lt;/li&gt;
&lt;li&gt;Old versions of Ember.js, the guides, and the API documentation suggested
looking up views as globals. For example &lt;code&gt;{{view App.SomeView}}&lt;/code&gt;. In
Ember.js 1.8 this style of view lookup is deprecated in favor of using a
string, similar to how other class lookups behave in Ember. &lt;a href="http://emberjs.com/guides/deprecations/#toc_global-lookup-of-views"&gt;See
this guide&lt;/a&gt;
for details about transitioning away from global view lookups.&lt;/li&gt;
&lt;li&gt;URLs containing a hash and no &lt;code&gt;/&lt;/code&gt;, such as &lt;code&gt;/foo#bar&lt;/code&gt; are handled by the
router&amp;#39;s &lt;code&gt;hash&lt;/code&gt; location handler. When using the &lt;code&gt;auto&lt;/code&gt; location handler, the
presence of &lt;code&gt;#&lt;/code&gt; will cause the &lt;code&gt;hash&lt;/code&gt; handler to be chosen over the &lt;code&gt;history&lt;/code&gt;
handlers, despite the lack of a leading &lt;code&gt;/&lt;/code&gt; in the path (for example &lt;code&gt;/foo#/bar&lt;/code&gt;.
This makes using anchors with the &lt;code&gt;history&lt;/code&gt; handler impossible. Ember.js
1.9 will correct this bug, and in 1.8 a deprecation is raised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;Ember.js strives to maintain strict API compatibility across minor releases.
In cases of API inconsistency or where behavior is unspecified, breaking changes
may be introduced to resolve the issue. Additionally, deprecated APIs may
be removed if they were from a previous major release (such as pre-1.0
deprecations).&lt;/p&gt;

&lt;p&gt;In this release there are several small breaking changes that may impact your
application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;didInsertElement&lt;/code&gt; is now always called on a child view before it is called
on a rendering parent view. In previous releases of Ember.js &lt;code&gt;didInsertElement&lt;/code&gt;
would often be called first on a parent view, however this behavior was
inconsistent. In general, developers are encouraged
to consider scheduling work into the &lt;code&gt;afterRender&lt;/code&gt; queue if it includes
accessing DOM not immediately under that view&amp;#39;s control.&lt;/li&gt;
&lt;li&gt;Actions defined directly on the controller object
and not in the &lt;code&gt;actions:&lt;/code&gt; hash have been deprecated since Ember.js 1.0. In
Ember.js 1.8 support for those actions has been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.Map&lt;/code&gt; has been tweaked to more closely match the ES6 spec for &lt;code&gt;Map&lt;/code&gt;. The
&lt;code&gt;forEach&lt;/code&gt; callback now takes &lt;code&gt;value,key,map&lt;/code&gt; as arguments. Previously it was passed
&lt;code&gt;key,value&lt;/code&gt;. This API is private, but several libraries have chosen to use it
despite this. Ember-Data now includes &lt;a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/map.js"&gt;a polyfill&lt;/a&gt;. &lt;code&gt;Ember.OrderedSet&lt;/code&gt;, a super class of &lt;code&gt;Ember.Map&lt;/code&gt;, has
also had minor ES6 cleanups applied.
to allow consistent usage across the pre-1.8 and 1.8 API.&lt;/li&gt;
&lt;li&gt;Ember.js has long had an run-time flag called &lt;code&gt;MANDATORY_SETTER&lt;/code&gt;. With this
flag enabled, attempts to set an observed object property without the use of
&lt;code&gt;Ember.set()&lt;/code&gt; would throw an error (a desirable behavior for development
builds). This runtime flag has been changed to a
standard build-time feature flag named &lt;code&gt;mandatory-setter&lt;/code&gt;, allowing it to
be removed from production builds entirely.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js-1-9-beta'&gt;Ember.js 1.9 beta&lt;/h2&gt;
&lt;p&gt;As with any minor release of Ember.js, the current canary branch is forked
to become the next beta. This ensures a constant graduation of features and
improvements from master to release. Builds of beta are made available every
week for six weeks, then promoted to release.&lt;/p&gt;

&lt;p&gt;In Ember.js 1.9 several new features and changes will be introduced.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;Streams&amp;quot; are a new Ember.js internal that replace bindings at the lowest
level of the Ember rendering pipeline. They greatly simplify the implementation
of template helpers and are yet another important step toward the landing of
HTMLBars.&lt;/li&gt;
&lt;li&gt;Handlebars 2.0 will be required for Ember.js 1.9. See &lt;a href="http://emberjs.com/blog/2014/10/16/handlebars-update.html"&gt;this summary
of the transition&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;li&gt;Further performance improvements and bugfixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.8.0/CHANGELOG.md"&gt;Ember.js 1.8.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.9.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.9.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Handlebars Version Compatibility</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/10/16/handlebars-update.html"/>
    <id>http://emberjs.com/blog/2014/10/16/handlebars-update.html</id>
    <published>2014-10-15T17:00:00-07:00</published>
    <updated>2014-10-15T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Handlebars 2.0 was released just a few weeks ago, and since its release we have received many
requests to update Ember to allow the use of the latest version.  Handlebars 2.0 contains
a number of changes the list below represents just a few that are...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Handlebars 2.0 was released just a few weeks ago, and since its release we have received many
requests to update Ember to allow the use of the latest version.  Handlebars 2.0 contains
a number of changes the list below represents just a few that are likely to affect your
Ember application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Precompiler output has changed, which breaks compatibility with prior versions of the
runtime and precompiled output.&lt;/li&gt;
&lt;li&gt;A JSON polyfill is required to run the compiler in IE8 and below. It&amp;#39;s recommended
that the precompiler be used in lieu of running the compiler on these legacy environments.&lt;/li&gt;
&lt;li&gt;Lines containing only block statements and whitespace are now removed. This matches the
Mustache spec but may cause issues with code that expects whitespace to exist but would
not otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about the changes please review the &lt;a href="https://github.com/wycats/handlebars.js/blob/master/release-notes.md"&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since the release of Ember 1.0.0, Ember has required Handlebars 1.x. As each new version of
Handlebars has been released we have needed to update our version requirement to allow the 
latest and greatest. Thankfully, throughout this process we have been able to maintain backwards
compatibility with all versions of Handlebars since 1.0.0.&lt;/p&gt;

&lt;p&gt;Unfortunately, Ember will not be able to maintain backwards compatibility to 1.x versions of Handlebars while
supporting 2.0. In Ember 1.9.0 (which will be released to beta on October 24th and stable on December 5th)
support for Handlebars 1.x will be removed, and support for Handlebars 2.0 introduced.&lt;/p&gt;

&lt;p&gt;In order to facilitate users of our canary builds we have published alpha versions of the
following template precompiler packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ember-template-compiler (published to NPM as 1.9.0-alpha)&lt;/li&gt;
&lt;li&gt;ember-source (published to Rubygems as 1.9.0.alpha)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading'&gt;Upgrading&lt;/h3&gt;
&lt;p&gt;To upgrade please use the following rough steps as a guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update Handlebars version to 2.X.&lt;/li&gt;
&lt;li&gt;Update template precompiler version to 1.9.0-alpha or later.&lt;/li&gt;
&lt;li&gt;Report any issues you have on our &lt;a href="https://github.com/emberjs/ember.js/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-cli-steps'&gt;Ember CLI Steps&lt;/h4&gt;
&lt;p&gt;If you happen to be using Ember CLI the following steps should work properly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm uninstall --save-dev broccoli-ember-hbs-template-compiler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install --save-dev ember-cli-htmlbars&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm -rf bower_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower install --save handlebars#2.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower install --save ember#canary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
