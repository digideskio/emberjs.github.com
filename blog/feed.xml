<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2014-04-29T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Core Team Meeting Minutes - 2014/04/25</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/04/29/core-team-meeting-minutes-2014-04-25.html"/>
    <id>http://emberjs.com/blog/2014/04/29/core-team-meeting-minutes-2014-04-25.html</id>
    <published>2014-04-29T00:00:00Z</published>
    <updated>2014-04-29T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;!--   [@ebryn](https://twitter.com/ebryn),
  [@krisselden](https://twitter.com/krisselden),
  [@machty](https://twitter.com/machty),
  [@rwjblue](https://twitter.com/rwjblue),
  [@trek](https://twitter.com/trek),
  [@stefanpenner](https://twitter.com/stefanpenner),
  [@wagenet](https://twitter.com/wagenet),
  [@tomdale](https://twitter.com/tomdale),
  [@wifelette](https://twitter.com/wifelette),
  [@wycats](https://twitter.com/wycats) --&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;,
&lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;,
&lt;a href="https://twitter.com/machty"&gt;@machty&lt;/a&gt;,
&lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;,
&lt;a href="https://twitter.com/trek"&gt;@trek&lt;/a&gt;,
&lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt;,
&lt;a href="https://twitter.com/wagenet"&gt;@wagenet&lt;/a&gt;,
&lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h3 class='anchorable-toc' id='toc_build-tools-redux-progresss'&gt;Build Tools Redux Progresss&lt;/h3&gt;
&lt;p&gt;When Ember.js took its first tentative steps into the world there existed no
ecosystem of build tools for ambitious applications in the browser. Instead,
we needed to &lt;a href="https://github.com/livingsocial/rake-pipeline"&gt;build these tools&lt;/a&gt;
from scratch.&lt;/p&gt;

&lt;p&gt;The build tools story is significantly improved from those days! We&amp;#39;re fortunate enough to
have several competing systems, all JavaScript based, that help streamline this workflow.&lt;/p&gt;

&lt;p&gt;Work is &lt;a href="https://github.com/rjackson/ember.js/tree/broccolify"&gt;in progress&lt;/a&gt; to unify our builds
and better declare and manage our external dependencies.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ember-routing-linkto-target-attribute&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4718"&gt;#4718&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resolution: Good to merge into Canary, but not a &amp;quot;Go&amp;quot; yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ember-routing-will-change-hooks&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4760"&gt;#4760&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resolution: Good to merge into Canary, but not a &amp;quot;Go&amp;quot; yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4770"&gt;Fix view keyword in component block&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixes &lt;a href="https://github.com/emberjs/ember.js/pull/3520"&gt;#3520&lt;/a&gt; by setting the concreteView
of the virtual view created to yield inside a component block.&lt;/p&gt;

&lt;p&gt;Resolution: Don&amp;#39;t merge. Not the real fix.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/issues/4764"&gt;Cannot use the property name &lt;code&gt;states&lt;/code&gt; in views&lt;/a&gt;
_states&lt;/p&gt;

&lt;p&gt;Resolution: Fix by making &lt;code&gt;states&lt;/code&gt; into &lt;code&gt;_states&lt;/code&gt;. States is considered private API,
so this should not be a breaking change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Async Testing Helpers&lt;/p&gt;

&lt;p&gt;1.4 contained bug fixes in the async test helpers that broke plugins relying on the broken
behavior (e.g. &lt;a href="https://github.com/trek/ember-testing-httpRespond"&gt;the third party httpRespond helper&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Currently, async is not granular enough, so it&amp;#39;s not possible to have test helpers that
assert while async is working (which httpRespond would need).&lt;/p&gt;

&lt;p&gt;Testing Async helpers need some love. In the past when parts of the ecosystem have needed
help we&amp;#39;ve suggested teams of motivated and capable individuals to investigate and improve
our process. Past successful examples of this include the Ember Inspector and the build tools
team. We probably need someone to take point on really making the test experience in Ember
as great as the rest of the framework.&lt;/p&gt;

&lt;p&gt;Resolution: Assemble a Testing Task Force.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/04/04</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/04/05/core-team-meeting-minutes-2014-04-04.html"/>
    <id>http://emberjs.com/blog/2014/04/05/core-team-meeting-minutes-2014-04-04.html</id>
    <published>2014-04-05T00:00:00Z</published>
    <updated>2014-04-05T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;, &lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;, &lt;a href="https://twitter.com/machty"&gt;@machty&lt;/a&gt;,
&lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;, &lt;a href="https://twitter.com/wagenet"&gt;@wagenet&lt;/a&gt;, &lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4645"&gt;BUGFIX beta Allow setting of &lt;code&gt;undefined&lt;/code&gt; value to a &lt;code&gt;content&lt;/code&gt; property&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixes setting of &lt;code&gt;undefined&lt;/code&gt; value to a content property. &lt;/p&gt;

&lt;p&gt;Still, checking &lt;code&gt;obj[keyName] === value&lt;/code&gt; in these &lt;a href="https://github.com/selvagsz/ember.js/blob/master/packages_es6/ember-metal/lib/property_set.js#L52-54"&gt;lines&lt;/a&gt; is bypassed in two cases&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the setter value is &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the setter property lies inside the proxied content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using &lt;code&gt;get(obj, keyName)&lt;/code&gt; might resolve. But was quite nervous to do that as it may involve some additional function calls&lt;/p&gt;

&lt;p&gt;+1 by @stefanpenner, but he requests @krisselden to review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Seems good, but @krisselden will review in further detail. Will attempt to have this update in 1.6.0-beta.2.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4636"&gt;BUGFIX beta Ensure context is unchanged when using keywords with itemController.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prior to this change the following code would bind &lt;code&gt;this&lt;/code&gt; in the template block to the itemController&amp;#39;s content (even
though the keyword form of &lt;code&gt;{{each}}&lt;/code&gt; is used).&lt;/p&gt;

&lt;p&gt;This change sets the child view&amp;#39;s &lt;code&gt;_context&lt;/code&gt; property to the current context when using the keyword form of &lt;code&gt;{{each}}&lt;/code&gt;,
and a couple of confirming tests to demonstrate using &lt;code&gt;itemController&lt;/code&gt; specified in either the &lt;code&gt;ArrayController&lt;/code&gt; or the
template directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.jsbin.com/zokali/1/edit"&gt;Failing JSBin&lt;/a&gt; | &lt;a href="http://emberjs.jsbin.com/kecen/1/edit"&gt;Passing JSBin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixes #4634.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The intent of the &lt;code&gt;each foo in bar&lt;/code&gt; syntax is specifically to preserve the current context. However, using &lt;code&gt;each foo in bar&lt;/code&gt; syntax along
with an &lt;code&gt;itemController&lt;/code&gt; has always changed the inner templates context. This change seems good, but all context related changes
require a bit of additional review. @krisselden to review further and +1/-1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4598"&gt;BUGFIX beta {{view}} helper no longer uses Ember.View global, instead uses container view:default&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the ES6-ify process @rjackson left a comment mentioning that the {{view}} helper needs to not look up
Ember.View globally. This PR fixes this by looking up view:default from the container (which Ember.View is
registered at, by default).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking up &lt;code&gt;view:default&lt;/code&gt; in the container is definitely more appropriate than hard-coding to &lt;code&gt;Ember.View&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Merged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4655"&gt;BUGFIX beta Add better debugging for DefaultResolver.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adds nice log entries if your application was created with &lt;code&gt;LOG_RESOLVER&lt;/code&gt; set.&lt;/p&gt;

&lt;p&gt;Example log entries:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[ ] route:application ..........................................  App.ApplicationRoute
[✓] route:index ................................................  App.IndexRoute
[ ] controller:application .....................................  App.ApplicationController
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Fixes #4654.&lt;/p&gt;

&lt;p&gt;Example &lt;a href="http://emberjs.jsbin.com/maxum/1"&gt;JSBin&lt;/a&gt; (look at console)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This adds good insight into exactly what the resolver is doing and what you need to implement to add
custom behavior. In the future, a better API needs to be created to enable these logging options (hanging
a bunch of properties off of the application instance is sub-optimal).&lt;/p&gt;

&lt;p&gt;Merged (will be in 1.6.0-beta.2).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4352"&gt;FEATURE ember-handlebars-radio-buttons Implement radio buttons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This updates &lt;a href="https://github.com/emberjs/ember.js/pull/1235"&gt;#1235&lt;/a&gt; to extend component, adds handlebar helpers,
updates tests and documentation. I think a lot of people would be pleased to see radio buttons in the core and I 
see a lot of developers at my company have a hard time with radio buttons when they first get started with Ember,
so I think this would be a great addition to the core.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would prefer for this to live as an addon for a while to allow the community to test (and influence) the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/issues/4613"&gt;Transitioning to a globbing route does not work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s a corner case, so I don&amp;#39;t know if this should work, or if you would fix that.
Anyway, in my application, I&amp;#39;m defining a notFound route, hit when the user plays with the url and gives something wrong.
I also want redirect to this route when the user try to access an unexisting record (ie the backend answer a 404). So I basically tried to define an error handler in the ApplicationRoute, and transitionTo(&amp;#39;notFound&amp;#39;). Unfortunately it does not work. Though if I remove the globbing path, then it works for the redirection, but obviously not when entering unknown url.&lt;/p&gt;

&lt;p&gt;I made a jsbin reproducing it: &lt;a href="http://emberjs.jsbin.com/ucanam/4401/edit"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to transition to a globbing route, but like any target route with a dynamic segment, you need to
provide a object / param, which in this case can just be a string of the path you want to use for that globbed segment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.transitionTo(&amp;#39;yargle&amp;#39;, &amp;quot;MY/COOL/URL&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.jsbin.com/ucanam/4522/edit"&gt;JSBin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.5.0 and 1.6 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html"/>
    <id>http://emberjs.com/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-30T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_new-features-in-1-5"&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class="anchorable-toc" id="toc_handlebars-logging-of-primitive-values"&gt;Handlebars Logging...&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-features-in-1-5'&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_handlebars-logging-of-primitive-values'&gt;Handlebars Logging of Primitive Values&lt;/h4&gt;
&lt;p&gt;This feature allows you to log primitive values (strings, numbers, etc) from within your
templates. Previously, the &lt;code&gt;{{log}}&lt;/code&gt; helper only allowed usage of bound property lookup.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{log &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;**LOOKEY HERE**&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_new-testing-helpers'&gt;New Testing Helpers&lt;/h4&gt;&lt;h5 class='anchorable-toc' id='toc_routing-helpers'&gt;Routing Helpers&lt;/h5&gt;
&lt;p&gt;A few new testing helpers have been added to make it easier to make assertions on the state
of routing in your application (for example to confirm clicking a given link results in a
redirect to a specific route).&lt;/p&gt;

&lt;p&gt;New routing test helpers: &lt;code&gt;currentRouteName&lt;/code&gt;, &lt;code&gt;currentPath&lt;/code&gt;, and &lt;code&gt;currentURL&lt;/code&gt;.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_trigger-event-helper'&gt;Trigger Event Helper&lt;/h5&gt;
&lt;p&gt;A new &lt;code&gt;triggerEvent&lt;/code&gt; helper has been created to allow triggering of arbitrary events on an element.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;triggerEvent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#some-element-id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;dblclick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-computed-readonly'&gt;Ember.computed.readOnly&lt;/h4&gt;
&lt;p&gt;Generally, when you use &lt;code&gt;Ember.computed.oneWay&lt;/code&gt; you would also need to call &lt;code&gt;readOnly&lt;/code&gt; to ensure no data
propagates back up.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// prior to Ember.computed.readOnly you would have to do the following:&lt;/span&gt;
Ember.computed.oneWay(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).readOnly()

&lt;span class="comment"&gt;// in 1.5 you can use the following for the same result:&lt;/span&gt;
Ember.computed.readOnly(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-isblank'&gt;Ember.isBlank&lt;/h4&gt;
&lt;p&gt;A new shortcut for checking if a particular object is empty or an empty string:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.isBlank();                &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;undefined&lt;/span&gt;);       &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank([]);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);          &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;  &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank({});              &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="content"&gt; Hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);    &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello world&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);   &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;]);         &lt;span class="comment"&gt;// false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_eager-updating-url'&gt;Eager Updating URL&lt;/h4&gt;
&lt;p&gt;Previously, the URL in the address bar would only update at the very end of
the transition. This change causes the URL update to happen immediately unless
the transition was aborted/redirected within the same run loop, which provides
for a better UX 99% of the time.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_auto-location'&gt;Auto Location&lt;/h4&gt;
&lt;p&gt;Adds &lt;code&gt;auto&lt;/code&gt; as a &lt;code&gt;location&lt;/code&gt; option for the app&amp;#39;s &lt;code&gt;Router&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.reopen({
  &lt;span class="key"&gt;location&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;auto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When used, Ember will select the best location option based off browser
support with the priority order: history, hash, none.&lt;/p&gt;

&lt;p&gt;Clean pushState paths accessed by hashchange-only browsers will be redirected
to the hash-equivalent and vice versa so future transitions look consistent.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-action-lookup'&gt;Bound Action Lookup&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{action}}&lt;/code&gt; helper will now use a non-quoted parameter and perform a bound property
lookup against the action&amp;#39;s target at the time the event is triggered. This allows usage
of a dynamic action name (determined by looking up the property).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_routes-inherit-model'&gt;Routes Inherit Model&lt;/h4&gt;
&lt;p&gt;Ember routes and leaf resources (without nested routes) will inherit the parent route&amp;#39;s model.&lt;/p&gt;

&lt;p&gt;Take the following example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;edit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});

App.PostRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; {&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ZOMG&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AWESOME&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
  }
});

App.PostEditRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.modelFor(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in 1.5, you do not have to define the &lt;code&gt;model&lt;/code&gt; hook for &lt;code&gt;PostEditRoute&lt;/code&gt; as the default implementation
is to use the parent routes model.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_ever-present-_super-breaking-bugfix'&gt;Ever-present _super (Breaking Bugfix)&lt;/h4&gt;
&lt;p&gt;Prior versions of Ember.js used a super mechanism that was un-safe for mixins. If more than
one &lt;code&gt;_super&lt;/code&gt; was called for a given function name and there was no terminating function, an
infinite loop would occur. See &lt;a href="https://github.com/emberjs/ember.js/issues/3523"&gt;#3523&lt;/a&gt; for
further discussion.&lt;/p&gt;

&lt;p&gt;The solution released in 1.5 fixes this behavior (see &lt;a href="https://github.com/emberjs/ember.js/pull/3683"&gt;#3683&lt;/a&gt;),
but also breaks the edge-case of using &lt;code&gt;_super&lt;/code&gt; out of line. For instance:&lt;/p&gt;
&lt;div class="highlight JavaScript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="function"&gt;doIt&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    Ember.run.once(&lt;span class="local-variable"&gt;this&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;._super);
  }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is no longer a supported use of &lt;code&gt;_super&lt;/code&gt;. See &lt;a href="http://emberjs.jsbin.com/xuroy/1/edit?html,js,output"&gt;this jsbin&lt;/a&gt;
for a live example. If this change impacts you, please comment on &lt;a href="https://github.com/emberjs/ember.js/pull/4301"&gt;#4632&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_handlebars-each-helper-checks-markup'&gt;Handlebars {{each}} Helper Checks Markup&lt;/h4&gt;
&lt;p&gt;In some cases, the browser may add or fix tags, which change the parentage of metamorph tags. This problem happens frequently when the
developer doesn&amp;#39;t include the TBODY tag inside a table for example.  This prevents the framework from updating or cleaning the underlying DOM
elements.&lt;/p&gt;

&lt;p&gt;An assertion has been added in non-production builds that indicates that the metamorph start and end tags have different parents.
This is most commonly caused by using an &lt;code&gt;{{each}}&lt;/code&gt; inside of a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag without specifying a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example demonstrating the assertion (&lt;a href="http://emberjs.jsbin.com/fotin/3/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the resolution is to include a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; (&lt;a href="http://emberjs.jsbin.com/fotin/2/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h3&gt;
&lt;p&gt;As usual, there are a ton of bug fixes and small improvements in this
release. You can see a list of all the changes in the CHANGELOG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.5.0/CHANGELOG.md"&gt;Ember.js 1.5.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.6.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.6.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/07</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-07.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-07.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @tomdale, @trek, @wycats&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_features-pending-go-decision-a-href-https-github-com-emberjs-ember-js-issues-4052-tracking-issue-a'&gt;Features pending &amp;#39;Go&amp;#39; decision. &lt;a href="https://github.com/emberjs/ember.js/issues/4052"&gt;Tracking Issue&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;ember-routing-add-model-option&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4293"&gt;#4293&lt;/a&gt;
Resolution: Go&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Query Params New - Sticky Params?&lt;/p&gt;

&lt;p&gt;Should query paramters remain on route change? When do we want it? All the time?
How do we disable it? Proposals thus far:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;/r?sort=asc ← keep
/r/ios?sort=hot ← keep? “model specific state”
/r/gonewild ← keep? “model specific state”
/r/foo?name=’something related to foo’
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or
&lt;code&gt;
/blog/somepost?comments=true
then navigate to
/blog/someOtherPost?comments=true ← keep?
/blog/someOtherPostthen ← don’t keep?
// then navigate to
/blog/somepost?comments=true ← kept from before? kept from last route? gone from last route?
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Possible opt-out via helper?
&lt;code&gt;
{{link-to ‘Home’ ‘home’ (query-params sort=null)}}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preserve stickiness as the default, but add a (query-params-reset) subexpression helper
(in addition to query-params) that can take 0 or more args and will reset any query params
not explicitly specified in the helper invocation. The puts the stickiness in the control
of the caller (the link-to helper).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a sticky option to the route query params config hash, which defaults to true. If set to
false, any links into that route will reset (unless QP values are explicitly provided in the
link-to helper), but any links to that route from within that route hierarchy will be sticky,
which effectively makes it so that if you leave a route and come back into it via a link-to,
the QPs specified as sticky:false will be reset. Keep in mind though that leaving a route and
pressing the back button will be &amp;quot;sticky&amp;quot; since the previous values on the controller will be
restored based on the previous URL.&lt;/p&gt;

&lt;p&gt;Example JSBin: http://emberjs.jsbin.com/ucanam/4102&lt;/p&gt;

&lt;p&gt;Resolution: Sticky by default, with appropriate escape valves to opt out per route change&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4374"&gt;ES6 ember-metal, ember-runtime, ember-debug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Work is currently being done (by @thomasaboyt amongst others) on the es6-module-transpiler
to remove the need for intermediate variables. This will both reduce filesize (less total
output), and enable cycles support (since it is evaluated lazily).&lt;/p&gt;

&lt;p&gt;We believe there is more file size savings to be had in the way the view layer, and would like
to be able to progress in the ES6 effort. Currently rebasing upon any change to ember-metal,
ember-runtime, and ember-debug (rare) is difficult. I believe that we cannot maintain the long
running pull-request branch for much longer and would like time to process/deal-with any issues
that crop up from the swap (missing global exports for example) before branching the next beta
series (2 weeks).&lt;/p&gt;

&lt;p&gt;RESOLUTION: Merge (pending specific issues that have already been noted), but before shipping another globals build we should deal with the file size issue. We have ~7 weeks until the 1.6 release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4404"&gt;The &lt;code&gt;each&lt;/code&gt; helper checks that the metamorph tags have the same parent.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was generally approved in the 2014-02-28 meeting once some verbiage tweaks were made. @trek&amp;#39;s suggested
changes have been made, this is ready to go.&lt;/p&gt;

&lt;p&gt;Resolution: merge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4291"&gt;FEATURE Ember.computed.instance&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A computed property that creates a new instance of source. &lt;code&gt;source&lt;/code&gt; can be any
Class constructor, object, array, or a path to a local property.  Optionally you can
specify the initial value(s), if only &lt;code&gt;initialValue&lt;/code&gt; is given and if it is a string, it
is treated as a local path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution: make it an add on that’s not core. CPM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4124"&gt;Deprecate edge-case get and normalizeTuple behavior before fixes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/emberjs/ember.js/pull/3852"&gt;#3852&lt;/a&gt; changes some edge case behavior for get and normalizeTuple. Ahead of those changes, this commit introduces deprecation notices.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deprecate get for local paths on global contexts, only if they
return data.&lt;/li&gt;
&lt;li&gt;Deprecate normalizeTuple calls that return a non-global contenxt
and a simple global path.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4459"&gt;Deprecate global access from templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PR by @mixonic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replaces #4358. These deprecations are narrow in scope, and only impact {{Global}} and
{{#each Global}}. They do not deprecate any other global access in templates. Deprecating
all global access from templates would a) need to be done helper-by-helper or b) would impact
the get and binding code at a lower level.&lt;/p&gt;

&lt;p&gt;@xtian I&amp;#39;m rewritten your first commit but preserved it here.&lt;/p&gt;

&lt;p&gt;@ebryn yo.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4328"&gt;Container throws if injection registered for already instantiated type&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Prior to this commit, the container would happily allow you to register an injection for a
type that had already been instantiated. This led to confusing-to-debug situations where an
injection is registered but a container-created instance doesn&amp;#39;t have the injection applied.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comment from @stefanpenner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you know I&amp;#39;m all for this change, but it may cause people some inconvenience. I personally
consider it a bugfix, but i would like @tomdale or @wycats&amp;#39;s +1/-1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution: @stefanpenner &amp;amp; @wycats will chat.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4097"&gt;Expose asObject to Ember.Handlebars.precompile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comment from @rwjblue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was mentioned in the core team meeting on 2014-02-28. It was mentioned that this should be
changed upstream (in Handlebars itself), but as I reviewed (to let you know where that change
would be needed) I realized that this PR is simply exposing the functionality that already
exists within Handlebars, but is not exposed to &lt;code&gt;Ember.Handlebars.precompile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As such, I think that we should likely re-evaluate the prior decision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution. Ship it. This just passes from Handlebars to Ember.Handlebars&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/14</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-14.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-14.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @tomdale, @trek, @wycats&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h3 class='anchorable-toc' id='toc_go-no-go-feature-listing'&gt;Go/No-Go Feature Listing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;query-params-new&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4008"&gt;#4008&lt;/a&gt;
 Still a no-go, while @machty and @wycats hash out the specifics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4496"&gt;canSetInnerHTML: IE cannot set innerHTML on several tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IE doesn&amp;#39;t support .innerHTML = on COL, COLGROUP, FRAMESET, HTML, STYLE, TABLE, TBODY, TFOOT, THEAD, TITLE, or TR.&lt;/p&gt;

&lt;p&gt;Resolution: definitely a bug, but this will be fixed with HTMLbars so we&amp;#39;d rather wait for that to
land instead of fixing now&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4360"&gt;Overwrite observers and listeners in Ember.CoreObject.create().&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modifies mixin inclusion code in &lt;code&gt;makeCtor&lt;/code&gt; to remove any observers/listeners setup on the property or key prior
to adding the property.&lt;/p&gt;

&lt;p&gt;My concern is the modification in this particular code path.&lt;/p&gt;

&lt;p&gt;Resolution: this used to be how create worked, but we moved away with this for performance reasons. &lt;code&gt;.extend&lt;/code&gt;
is intended for design-time use, not runtime: use &lt;code&gt;.extend().create() or&lt;/code&gt;.createWithMixins()`&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4520"&gt;Use injected test helpers instead of local functions.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are injecting the application with our helpers (into the App.testHelpers hash), we should be using
that helper and not simply calling the function in local scope.&lt;/p&gt;

&lt;p&gt;As the tests show, this allows a user to override the internal helpers with a tailored version for their scenarios.&lt;/p&gt;

&lt;p&gt;Resolution: make it possible but still private API. Assert on attempting to override built-in helpers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/21</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-21.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-21.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @trek, @wycats, @wifelette&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_prs-issues-to-review'&gt;PRs/Issues To Review&lt;/h4&gt;
&lt;p&gt;We reviewed the following PRs and Issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;query-params-new&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4008"&gt;#4008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing new here. We&amp;#39;re working very hard to get this correct the first time
and have something to demo at EmberConf.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move instanceMetas into object&amp;#39;s meta &lt;a href="https://github.com/emberjs/ember.js/pull/4559"&gt;#4559&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;InstanceMetas for objects&amp;#39; ReduceComputedPropertys are stored on the RCP instance (ie. on the descriptor) as &lt;code&gt;this._instanceMetas[key]&lt;/code&gt; where key = guidOfTheObject + &amp;#39;:&amp;#39; + propertyName (see http://git.io/t9bKxA). The RCP can&amp;#39;t know when the object is garbage collected, hence the _instanceMetas array grows unbounded.&lt;/p&gt;

&lt;p&gt;Resolution: if David Hamilton +1’s, we merge as a bugfix.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow multiple arguments to be passed to EmberStringUtils.fmt() &lt;a href="https://github.com/emberjs/ember.js/pull/4518"&gt;#4518&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to use Ember.String.fmt with the same multi-arg signature as String#fmt:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.String.fmt(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;%@ %@&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;// vs&lt;/span&gt;
Ember.String.fmt([&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;%@ %@&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;])
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Resolution: Seems reasonable. Merge&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deprecate App.Store in favor of App.ApplicationStore &lt;a href="https://github.com/emberjs/data/pull/1808"&gt;#1808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes the application level store lookup much closer to the reset of our conventions (ala &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; and &lt;code&gt;App.ApplicationSerializer&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This change also allows specifying a custom store when using non-global resolver (i.e. EAK/ember-cli). Previously, we were only looking for a property &lt;code&gt;Store&lt;/code&gt; hung off of the application instance. Now you can have a module named (in the case of stock EAK setup):
&lt;code&gt;app/stores/application&lt;/code&gt; or &lt;code&gt;app/application/store.js&lt;/code&gt; (pods structure).&lt;/p&gt;

&lt;p&gt;A deprecation warning was added, and the prior technique still works so this is not a breaking change (although I believe that we should remove before the prior lookup prior to 1.0).&lt;/p&gt;

&lt;p&gt;Resolution: Seems reasonable. Merge&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
