<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2014-08-23T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember 1.7.0 and 1.8 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/08/23/ember-1-7-0-released.html"/>
    <id>http://emberjs.com/blog/2014/08/23/ember-1-7-0-released.html</id>
    <published>2014-08-23T00:00:00Z</published>
    <updated>2014-08-23T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.7.0 and the first beta in the 1.8 series
have been released. This comes as the seventh cycle of our release process that began just
after 1.0 was released.&lt;/p&gt;

&lt;p&gt;This release brings bug fixes, potentially...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.7.0 and the first beta in the 1.8 series
have been released. This comes as the seventh cycle of our release process that began just
after 1.0 was released.&lt;/p&gt;

&lt;p&gt;This release brings bug fixes, potentially breaking changes and new features.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features'&gt;New Features&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_nestable-code-this-route-code'&gt;Nestable &lt;code&gt;this.route&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This change removes the restriction that only &lt;code&gt;this.resource&lt;/code&gt; can have nested
child routes.&lt;/p&gt;

&lt;p&gt;Prior to this change, using &lt;code&gt;this.resource&lt;/code&gt; would reset the namespace and in order
to preserve it you had to do the following:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo.bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo.bar.baz&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="comment"&gt;// All this repetition to get an&lt;/span&gt;
      &lt;span class="comment"&gt;// intuitively-named FooBarBazRoute&lt;/span&gt;
    });
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;this.route&lt;/code&gt; can be nested like &lt;code&gt;this.resource&lt;/code&gt;, but unlike this.resource, the namespace
of child routes is appended rather than reset to a top-level namespace, allowing the above to be
written as:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
       &lt;span class="comment"&gt;// uses FooBarBazRoute&lt;/span&gt;
       &lt;span class="comment"&gt;// generates foo.bar.baz.index&lt;/span&gt;
       &lt;span class="comment"&gt;// generates FooBarBazIndexRoute&lt;/span&gt;
     });
   });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Unnested &lt;code&gt;this.route&lt;/code&gt; works the same way as before.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_query-params'&gt;Query Params&lt;/h3&gt;
&lt;p&gt;Thanks to the tireless work of &lt;a href="https://github.com/machty"&gt;@machty&lt;/a&gt; and team, query params
support has finally landed and is a part of the 1.7.0 release!&lt;/p&gt;

&lt;p&gt;Ember now has first class support for URL query parameters (e.g. &lt;code&gt;/?page=1&amp;amp;sort=last_name&lt;/code&gt;).
With this API, each query param is bound to a property on a controller, such that changes made
to query params in the URL (e.g. user presses the back button) will update the controller property,
and vice versa.&lt;/p&gt;

&lt;p&gt;The API handles many of tricky aspects of maintaining a binding to a URL, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coalescing multiple controller property changes into a single URL update&lt;/li&gt;
&lt;li&gt;correctly casting new URL query param values to the datatype expected by the controller property
(e.g. &lt;code&gt;&amp;quot;true&amp;quot;&lt;/code&gt; for a boolean property casts to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt; for a numeric property casts to &lt;code&gt;123&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;omitting default query param values from the URL so as to not unnecessarily clutter the URL
with default values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please read the &lt;a href="/guides/routing/query-params/"&gt;Query Params Guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes-and-deprecations'&gt;Breaking Changes and Deprecations&lt;/h2&gt;
&lt;p&gt;The following are a few deprecation warnings and breaking changes that have been included in 1.7.
Please review the new &lt;a href="http://emberjs.com/guides/deprecations/"&gt;Deprecation Guide&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_controller-s-code-model-code-property'&gt;Controller&amp;#39;s &lt;code&gt;model&lt;/code&gt; property&lt;/h3&gt;
&lt;p&gt;On Controllers, the content property is now derived from model. This reduces many caveats
with model/content, and also sets a simple ground rule: Never set a controller&amp;#39;s content,
rather always set its model.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_code-bind-attr-code-and-empty-arrays'&gt;&lt;code&gt;bind-attr&lt;/code&gt; and empty arrays&lt;/h3&gt;
&lt;p&gt;An empty array is treated as falsy value in &lt;code&gt;bind-attr&lt;/code&gt; to be in consistent with &lt;code&gt;if&lt;/code&gt; helper.
Breaking for apps that relies on the previous behaviour which treats an empty array as
truthy value in &lt;code&gt;bind-attr&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Ember&lt;/code&gt; is now using &lt;code&gt;RSVP&lt;/code&gt; 3.0.13 and brings fixes for &lt;code&gt;RSVP.hash&lt;/code&gt; in IE8.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-1-8-0-beta-1'&gt;Ember 1.8.0-beta.1&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_support-for-ie-6-and-7'&gt;Support for IE 6 and 7&lt;/h3&gt;
&lt;p&gt;Usage of Ember is deprecated for Internet Explorer 6 and 7, support will be removed
in the next major version.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_refactored-view-layer'&gt;Refactored view layer&lt;/h3&gt;
&lt;p&gt;Internal implementation of the view layer has been refactored. Many of you remember
&lt;code&gt;script&lt;/code&gt; tags in the DOM:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s how &lt;code&gt;Ember&lt;/code&gt; knows how to update the values in the DOM. This refactor removes
the need for &lt;code&gt;script&lt;/code&gt; tags.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_actions-lookup-on-controller'&gt;Actions lookup on controller&lt;/h3&gt;
&lt;p&gt;Some of you might remember that you could define action handlers in the root of the
controller, like so:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.HomeController = Ember.ObjectController.extend({
  &lt;span class="function"&gt;someAction&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// handle the action&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A deprecation warning was added in late 2013 that would print a nice deprecation notice
if you happen to use an action name that was also found in the root of the controller.
Unfortunately, even with the deprecation, we still have the possibility to conflict
with controller level methods and properties.&lt;/p&gt;

&lt;p&gt;To define action handler, you should place it under &lt;code&gt;actions&lt;/code&gt; hash, like so:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.HomeController = Ember.ObjectController.extend({
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;someAction&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="comment"&gt;// handle the action&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This change will remove support for older action lookup in the root of the controller
completely, and finally allow usage of nearly any action name without the need to
check if that name was also used by the controller.&lt;/p&gt;

&lt;p&gt;Also, this release introduces numerous bug fixes and small improvements. You can see a list of all the changes in the CHANGELOG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.7.0/CHANGELOG.md"&gt;Ember.js 1.7.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.8.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.8.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.9 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/08/18/ember-data-1-0-beta-9-released.html"/>
    <id>http://emberjs.com/blog/2014/08/18/ember-data-1-0-beta-9-released.html</id>
    <published>2014-08-18T00:00:00Z</published>
    <updated>2014-08-18T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Since Ember Data v1.0.0-beta.8, a lot has changed. Since we didn't write a blog
post for beta.8, this blog post will contain features in both beta.8 and beta.9.&lt;/p&gt;
&lt;h2 class="anchorable-toc" id="toc_new-release-schedule"&gt;New Release Schedule&lt;/h2&gt;
&lt;p&gt;Since the first beta release for Ember Data 1.0, Ember Data has typically...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Since Ember Data v1.0.0-beta.8, a lot has changed. Since we didn&amp;#39;t write a blog
post for beta.8, this blog post will contain features in both beta.8 and beta.9.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-release-schedule'&gt;New Release Schedule&lt;/h2&gt;
&lt;p&gt;Since the first beta release for Ember Data 1.0, Ember Data has typically been
released when we felt like critical features or bugfixes were merged. Due to the
ever changing nature of Ember Data, we&amp;#39;d like to reward Ember Data users for
keeping up with changes by providing more frequent releases until a release
candidate emerges. Beginning Monday, August 18th 2014, Ember Data will release a
new beta version &lt;strong&gt;every 3 weeks&lt;/strong&gt;. The builds will be available on the &lt;a href="http://emberjs.com/builds/#/beta"&gt;builds
page&lt;/a&gt;, Bower, Rubygems, and soon, NPM.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_object-create-shim-required'&gt;Object.create shim required&lt;/h3&gt;
&lt;p&gt;Ember Data now requires an &lt;code&gt;Object.create&lt;/code&gt; polyfill for environments without
&lt;code&gt;Object.create&lt;/code&gt; or incorrect &lt;code&gt;Object.create&lt;/code&gt; implementations such as &lt;strong&gt;Internet
Explorer 8&lt;/strong&gt;. Ember.js will be shipping with an Object.create polyfill in 1.8.0.
If you are using stable builds of Ember, we recommend using
&lt;a href="https://github.com/es-shims/es5-shim"&gt;ES5Shim&lt;/a&gt;&amp;#39;s  &lt;a href="https://github.com/es-shims/es5-shim/blob/master/es5-sham.js"&gt;es5-sham.js&lt;/a&gt; file available on NPM and Bower.
You can refer to &lt;a href="http://kangax.github.io/compat-table/es5/#Object.create"&gt;Kangax&amp;#39;s Compatibility Tables&lt;/a&gt; to
see if you need the shim.&lt;/p&gt;

&lt;p&gt;Ember Data uses &lt;code&gt;Object.create&lt;/code&gt; under the hood for faster and collision-free
caches.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_dates-serialized-with-iso8601-by-default'&gt;Dates Serialized with ISO8601 by Default&lt;/h3&gt;
&lt;p&gt;Due to the &lt;a href="http://xkcd.com/1179/"&gt;various ways&lt;/a&gt; dates can be serialized across the wire,
Ember Data has decided to use the well-known, well-supported, and accurate
&lt;a href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/a&gt; format. Although the JavaScript programming language has had
support for ISO8601 strings since &lt;a href="http://es5.github.io/#x15.9.5.43"&gt;ECMAScript5&lt;/a&gt;, environment such as
Internet Explorer 8 do not support &lt;code&gt;Date.prototype.toISOstring&lt;/code&gt;. However, Ember
Data does include a shim so you need no further work here except to make sure
your backend is supporting ISO8601.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_restadapter-prototype-findmany-changed-behavior-and-method-signature'&gt;RESTAdapter.prototype.findMany changed behavior and method signature&lt;/h3&gt;
&lt;p&gt;You should see the &lt;a href="http://emberjs.com/api/data/classes/DS.RESTAdapter.html#method_findMany"&gt;findMany&lt;/a&gt; documentation if you have overridden
the &lt;code&gt;findMany&lt;/code&gt; method in your adapter.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_hasmany-coalescing-now-opt-in'&gt;HasMany Coalescing Now Opt-In&lt;/h3&gt;
&lt;p&gt;See the section below on &amp;quot;Coalescing Find Requests&amp;quot; for more information.
Previously, if you did not sideload data for a hasMany relationship, but
did provide IDs, Ember Data would attempt to get all the records in one request.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Given this payload:&lt;/span&gt;
{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lon Ingram&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  }
}

&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.getById(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;posts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// $.ajax GET /posts?ids[]=1&amp;amp;ids[]=2&amp;amp;ids[]=3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Unless you opt in, Ember Data will instead fire 3 requests:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.getById(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;posts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// $.ajax GET /posts/1&lt;/span&gt;
&lt;span class="comment"&gt;// $.ajax GET /posts/2&lt;/span&gt;
&lt;span class="comment"&gt;// $.ajax GET /posts/3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See the section below on &amp;quot;Coalescing Find Requests&amp;quot; for more information.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-and-improvements'&gt;New Features and Improvements&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_embedded-records-mixin'&gt;Embedded Records Mixin&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_deserializing-relationships'&gt;Deserializing Relationships&lt;/h4&gt;
&lt;p&gt;Thanks to Igor Terzic, Brendan Mcloughlin, and Bill Heaton, the
&lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; was extracted out of &lt;code&gt;DS.ActiveModelSerializer&lt;/code&gt; in
Ember Data v1.0.0-beta.8 so that users of &lt;code&gt;JSONSerializer&lt;/code&gt;, &lt;code&gt;RESTSerializer&lt;/code&gt;, and
&lt;code&gt;ActiveModelSerializer&lt;/code&gt; could easily serialize and deserialize relationships. To
use the code in your app, you can include the &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; into your
serializer:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This means that your &lt;code&gt;PostSerializer&lt;/code&gt; will now correctly bring in data for
relationships if they are embedded in the response, rather than sideloaded.&lt;/p&gt;

&lt;p&gt;For example, here is the previous JSON data response Ember Data expected for the
RESTAdapter:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /posts/1&lt;/span&gt;
{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Mother We Share Lyrics&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;authorId&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;authors&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    {
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;CHVRCHES&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
  ]
}

&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(post){
  console.log(post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author.name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; CHVRCHES&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, if you mixin the EmbeddedRecordsMixin, Ember Data will understand the
following payload:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /posts/1&lt;/span&gt;
{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Mother We Share Lyrics&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;CHVRCHES&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}

&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;(post) {
  console.log(post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author.name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; CHVRCHES&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These settings are configurable. See the section below on &amp;quot;Serializing
Relationships.&amp;quot;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_serializing-relationships'&gt;Serializing Relationships&lt;/h4&gt;
&lt;p&gt;The EmbeddedRecordsMixin also has support for sending information about
relationships to the server. To override the defaults, you can configure the
EmbeddedRecordsMixin by defining an &lt;code&gt;attrs&lt;/code&gt; object on your serializer
definition. For example, to serialize the complete record when serializing to
the server:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
  &lt;span class="key"&gt;attrs&lt;/span&gt;: {
    &lt;span class="key"&gt;author&lt;/span&gt;: {
      &lt;span class="key"&gt;serialize&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;records&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
});

&lt;span class="keyword"&gt;var&lt;/span&gt; post = &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.getById(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
post.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Recover Lyrics&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
post.save();

&lt;span class="comment"&gt;// POST /posts/1&lt;/span&gt;
{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Recover Lyrics&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;CHVRCHES&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To see even more ways to customize serializing and deserializing behavior, check
out the &lt;a href="http://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html"&gt;documentation&lt;/a&gt; for the &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_coalescing-find-requests'&gt;Coalescing Find Requests&lt;/h3&gt;
&lt;p&gt;One feature we&amp;#39;re particularly excited about is the ability to coalesce find
requests for the same record type.&lt;/p&gt;

&lt;p&gt;To introduce this feature, I&amp;#39;ll explain the basic concept behind Ember.js&amp;#39;s &amp;quot;Run
Loop&amp;quot;. Typically in JavaScript code that re-renders whenever the data changes,
changing the data multiple times within the same turn of the JavaScript event
loop would cause multiple re-renders. Ember uses a microlibrary called
&lt;a href="https://github.com/ebryn/backburner.js/"&gt;Backburner&lt;/a&gt; to reduce the number of writes by only rendering once
per &amp;quot;run loop&amp;quot;. For more information, you can view the README on the Backburner
on the repository and view the Ember.js &lt;a href="http://emberjs.com/guides/understanding-ember/run-loop/"&gt;Run Loop Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Without &amp;quot;Coalescing Find Requests&amp;quot; turned on, the previous code would result in
multiple network requests:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// $.ajax GET /posts/1&lt;/span&gt;
&lt;span class="comment"&gt;// $.ajax GET /posts/2&lt;/span&gt;
&lt;span class="comment"&gt;// $.ajax GET /posts/3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On the server-side, this is frequently referred to as an &lt;a href="https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/"&gt;N+1
query&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By coalescing (also known as batching) these requests, Ember Data will observe
that you requested several records of the same type and only send one request
instead of 3.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// $.ajax GET /posts?ids[]=1&amp;amp;ids[]=2&amp;amp;ids[]=3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Coalescing find requests is currently turned off by default&lt;/strong&gt;. To turn it on,
you can use the following code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;DS.RESTAdapter.reopen({
  &lt;span class="key"&gt;coalesceFindRequests&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To override how the records are requested, you may override the &lt;code&gt;findMany&lt;/code&gt; and
&lt;code&gt;findHasMany&lt;/code&gt; methods on your adapter.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-inflector-is-now-a-standalone-package'&gt;Ember Inflector is Now a Standalone Package&lt;/h3&gt;
&lt;p&gt;Ember Inflector is Ember&amp;#39;s approach for a Rails-compatible API for inflecting
strings. This provides methods such as &lt;code&gt;Ember.String.pluralize&lt;/code&gt; and
&lt;code&gt;Ember.String.singularize&lt;/code&gt;, and hooks for defining your own inflections.
Previously, the Ember Inflector package was contained in Ember Data&amp;#39;s repository
and released alongside Ember Data. It has been pulled out to a &lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;separate
repository&lt;/a&gt;. Although Ember Inflector is still included in the
Ember Data release, you may now use it in projects that do not use Ember Data.
Ember Inflector is currently released as a 1.0 semver package.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-inflector-string-caching'&gt;Ember Inflector String Caching&lt;/h3&gt;
&lt;p&gt;Ember Inflector now caches lookups of strings by default. This means that you
should only pay the cost of transforming a string (via &lt;code&gt;pluralize&lt;/code&gt; and
&lt;code&gt;singularize&lt;/code&gt;) once as the values are now stored using an in-memory cache. If
you have memory concerns, you may want to monitor lookups and disable the cache
by calling &lt;code&gt;Ember.Inflector.inflector.disableCache()&lt;/code&gt; at the beginning of your
app code.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_improved-uncountable-irregular-definitions-for-singularize'&gt;Improved Uncountable / Irregular Definitions for Singularize&lt;/h3&gt;
&lt;p&gt;We would like to express our deep appreciation to &lt;a href="https://github.com/ofbriggs"&gt;Olivia Briggs&lt;/a&gt;
for adding better support for uncountable/irregular singular words in
Ember-Inflector. You should now not need definitions for &lt;code&gt;dasherized&lt;/code&gt; and
&lt;code&gt;underscore&lt;/code&gt; versions of your inflections.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_handlebars-helpers-for-inflections'&gt;Handlebars Helpers for Inflections&lt;/h3&gt;
&lt;p&gt;You can now use &lt;code&gt;pluralize&lt;/code&gt; and &lt;code&gt;singularize&lt;/code&gt; in your Handlebars templates:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;pluralize&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;octopus&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;singularize&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;oxen&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The Handlebars helpers are bound, so they will stay up to date if you bind to a
property:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;pluralize&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/stefanpenner"&gt;Stefan Penner&lt;/a&gt; from the Ember.js core team, your apps should be
faster when used with Ember Data. We&amp;#39;d also like you to try out Ember 1.8
beta in your apps with Ember Data 1.0.0-beta.9 for additional performance
improvements.&lt;/p&gt;

&lt;p&gt;We have more performance improvements around the corner! Keep an eye out for
Stef landing some commits on improving &lt;code&gt;pushPayload&lt;/code&gt; calls and a &lt;a href="https://github.com/ebryn/backburner.js/pull/97"&gt;commit
to Backburner&lt;/a&gt; improving many hot code paths in Ember Data.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_better-support-for-nested-records'&gt;Better Support for Nested Records.&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;buildURL&lt;/code&gt; now takes a record, on which you can look up the relationship if you
need to build a nested URL. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.CommentAdapter = DS.RestAdapter.extend({
  &lt;span class="function"&gt;buildURL&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(type, id, record) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/posts/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + record.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post.id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/comments/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + id;
  }
})
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_added-support-for-preloading-records'&gt;Added support for preloading records&lt;/h3&gt;
&lt;p&gt;For more information, go to &lt;a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/store.js#L356"&gt;Store documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_special-thanks'&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;We&amp;#39;d like to thank the following members of the Ember.js community for their
continued contributions to Ember Data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Igor Terzic as the project&amp;#39;s main steward (@terzicigor)&lt;/li&gt;
&lt;li&gt;Brendan McLoughlin (@BezoMaxo) for responding to and triaging issues, and
contributing documentation, bug fixes, and improvements.&lt;/li&gt;
&lt;li&gt;Ilya Radchenko (@knownasilya)&lt;/li&gt;
&lt;li&gt;Bradley Priest (@bradleypriest)&lt;/li&gt;
&lt;li&gt;Bill Heaton (@pixelhandler)&lt;/li&gt;
&lt;li&gt;Paul Chavard (@tchak)&lt;/li&gt;
&lt;li&gt;Sylvain Mina (GH @sly7-7)&lt;/li&gt;
&lt;li&gt;Ryunosuke Sato (@tricknotes)&lt;/li&gt;
&lt;li&gt;Alexandre de Oliveira (@kurko) for his awesome work on the
&lt;a href="https://github.com/kurko/ember-localstorage-adapter"&gt;ember-localstorage-adapter&lt;/a&gt; and
&lt;a href="https://github.com/kurko/ember-indexeddb-adapter"&gt;ember-indexeddb-adapter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jonathan Collins (Github @jcollins1991)&lt;/li&gt;
&lt;li&gt;Stefan Penner (@stefanpenner)&lt;/li&gt;
&lt;li&gt;Tom Dale (@tomdale)&lt;/li&gt;
&lt;li&gt;Yehuda Katz (@wycats)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’d also like to thank Instructure and PrecisionNutrition for sponsoring
some of Igor’s development on Ember Data.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_tools'&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://andycrum.github.io/ember-data-model-maker/"&gt;Ember Data Model Maker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Cleaning Up Github Issues</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/07/28/cleaning-up-github-issues.html"/>
    <id>http://emberjs.com/blog/2014/07/28/cleaning-up-github-issues.html</id>
    <published>2014-07-28T00:00:00Z</published>
    <updated>2014-07-28T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;If you've been following along, the Ember issues tracker has grown to over 200 active issues. While this is better than some other large OSS projects, it's still too large for us on the core team to easily keep track of. There are also a number of...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;If you&amp;#39;ve been following along, the Ember issues tracker has grown to over 200 active issues. While this is better than some other large OSS projects, it&amp;#39;s still too large for us on the core team to easily keep track of. There are also a number of issues that are over six months old and even a year or two old.&lt;/p&gt;

&lt;p&gt;Declaring straight-up issue bankruptcy is appealing, but does a disservice to everyone involved. There&amp;#39;s a lot of useful information here for the core team and many of these issues are things we are actively working on solving. So we&amp;#39;re attempting to cut down on the number of issues in a bit more targeted way.&lt;/p&gt;

&lt;p&gt;In many cases these old issues stuck around because the solution was non-trivial and only a limited set of contributors was qualified to fix them. In some instances, a fix involves considerable internal refactoring that no one has yet had time to do and was hard to justify for just one fix.&lt;/p&gt;

&lt;p&gt;To help keep things manageable, we&amp;#39;ll be consolidating these types of issues into single meta issues. Over time we do intend to refactor and clean up different parts of the internals and knowing what bugs we need to fix while we&amp;#39;re at it will be helpful. The original issues will be closed to help reduce overall noise, but we&amp;#39;ll still make sure to consider them when doing our refactoring. Please continue to comment on the original issue so we can keep things organized.&lt;/p&gt;

&lt;p&gt;In some cases, we may close issues without a meta if there is a clean workaround (we don&amp;#39;t want you to have to use hacks) or if the issue is very minor. If you think we miscategorized an issue, please let us know. We&amp;#39;re also still happy to receive PRs for these issues, though it&amp;#39;s probably wise to double check with us first.&lt;/p&gt;

&lt;p&gt;I hope we can make the issue tracker more useful and effective for everyone.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/07/25</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/07/26/core-team-meeting-minutes-2014-07-25.html"/>
    <id>http://emberjs.com/blog/2014/07/26/core-team-meeting-minutes-2014-07-25.html</id>
    <published>2014-07-26T00:00:00Z</published>
    <updated>2014-07-26T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;!--   [@ebryn](https://twitter.com/ebryn),
  [@krisselden](https://twitter.com/krisselden),
  [@machty](https://twitter.com/machty),
  [@mixonic](https://twitter.com/mixonic)
  [@_mmun](https://twitter.com/_mmun),
  [@rwjblue](https://twitter.com/rwjblue),
  [@trek](https://twitter.com/trek),
  [@stefanpenner](https://twitter.com/stefanpenner),
  [@wagenet](https://twitter.com/wagenet),
  [@tomdale](https://twitter.com/tomdale),
  [@wifelette](https://twitter.com/wifelette),
  [@wycats](https://twitter.com/wycats) --&gt;

&lt;p&gt;&lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;,
&lt;a href="https://twitter.com/machty"&gt;@machty&lt;/a&gt;,
&lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;
&lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
&lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;,
&lt;a href="https://twitter.com/trek"&gt;@trek&lt;/a&gt;,
&lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt;,
&lt;a href="https://twitter.com/wagenet"&gt;@wagenet&lt;/a&gt;,
&lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_face-to-face-july-2014'&gt;Face to Face July 2014&lt;/h3&gt;
&lt;p&gt;Last week the core team (and those on path to core) met in New York City for
our periodic face to face meeting. Tom and Yehuda will be posting notes from
that meeting in the coming weeks. Thank you to our friends at &lt;a href="http://pivotallabs.com/"&gt;Pivotal
Labs&lt;/a&gt; for hosting us in their awesome new office.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_built-with-ember'&gt;Built With Ember&lt;/h3&gt;
&lt;p&gt;A few months ago we &lt;a href="https://docs.google.com/document/d/1ZWYq3gwkPTzUiyqr4x_asSj8wIgfvg8XyLmU3Yx_FPE/edit"&gt;began tracking&lt;/a&gt; some of the ambitious apps made
with Ember.js. The folks at &lt;a href="http://www.getblimp.com/"&gt;Blimp&lt;/a&gt; have turned that
document into a curated list of awesome Ember.js applications. &lt;a href="http://builtwithember.io/"&gt;Check it
out&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-cli-website'&gt;ember-cli website&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ember-cli&lt;/code&gt;, our ES6 module-based build tool has a new site. &lt;a href="http://www.ember-cli.com/"&gt;Give it a
browse&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_modularizing-ember-js-s-repository'&gt;Modularizing Ember.js&amp;#39;s Repository&lt;/h3&gt;
&lt;p&gt;We&amp;#39;ve started moving more external dependencies out of the Ember.js repository
and have begun work to turn some infrequently used parts of the framework into
their own libraries. These will still be built into the &lt;code&gt;1.x&lt;/code&gt; series of
releases, but will not come bundled by default when we have the next major
versions release.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/07/11</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/07/26/core-team-meeting-minutes-2014-07-11.html"/>
    <id>http://emberjs.com/blog/2014/07/26/core-team-meeting-minutes-2014-07-11.html</id>
    <published>2014-07-26T00:00:00Z</published>
    <updated>2014-07-26T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;!--   [@ebryn](https://twitter.com/ebryn),
  [@krisselden](https://twitter.com/krisselden),
  [@machty](https://twitter.com/machty),
  [@rwjblue](https://twitter.com/rwjblue),
  [@trek](https://twitter.com/trek),
  [@stefanpenner](https://twitter.com/stefanpenner),
  [@wagenet](https://twitter.com/wagenet),
  [@tomdale](https://twitter.com/tomdale),
  [@wifelette](https://twitter.com/wifelette),
  [@wycats](https://twitter.com/wycats) --&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;,
&lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;,
&lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;,
&lt;a href="https://twitter.com/trek"&gt;@trek&lt;/a&gt;,
&lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt;,
&lt;a href="https://twitter.com/wagenet"&gt;@wagenet&lt;/a&gt;,
&lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;,
&lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_path-to-core'&gt;Path to Core&lt;/h3&gt;
&lt;p&gt;Members of the community who have a sustained and significant contribution to
Ember.js are invited to join the core team and help us guide the framework&amp;#39;s
future direction. Members we&amp;#39;d like to add are put on the &amp;quot;path to core&amp;quot; and
given greater autonomy for a trial period before being officially invited.&lt;/p&gt;

&lt;p&gt;Contributors on path to core are given commit access to the Ember.js
repositories and attend our weekly core team meetings and periodic
face to face meetings.&lt;/p&gt;

&lt;p&gt;Today we&amp;#39;re happy to announce that two Ember.js contributors are on the path
to core: Matthew Beale (who most of you will know as
&lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;) and Martin Mu&amp;ntilde;oz
(&lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;). Matthew and Martin have both been
pushing hard on &lt;a href="https://github.com/tildeio/htmlbars"&gt;htmlbars&lt;/a&gt;, the
underlying library that will power Ember.js&amp;#39;s rewritten view layer.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_features-pending-go-no-go'&gt;Features Pending Go/No-Go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/5136"&gt;ember-metal-is-present&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resolution: this is excellent addon material. Revert.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/5116"&gt;event-dispatcher-can-disable-event-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resolution: event dispatcher is being deprecated, but we&amp;#39;ll have hooks for
              libraries like (Hammer.js)[http://hammerjs.github.io/] to
              integrate with. Revert.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ember-routing-linkto-target-attribute]&lt;/p&gt;

&lt;p&gt;Resolution: This is a Go.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_issues-for-discussion'&gt;Issues for Discussion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/5115"&gt;Fix {{#with view.foo as bar}} #5115&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug. Merged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/5089"&gt;Fix usage of document.body.contains&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not required in metal-views, so the problem should go away. The suggested
polyfill with feature flag for 1.7 OK until that time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4936"&gt;Force remove &lt;code&gt;required&lt;/code&gt; attribute for IE8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scumbag IE. This is merged&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4920"&gt;Actions should be looked up via &lt;code&gt;Ember.get&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:-1:&lt;/code&gt; as is, need to re-work and add a &amp;#39;re-bubble&amp;#39; phase that checks &lt;code&gt;actionMissing&lt;/code&gt;
good idea, but seems like it may require a lot of work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.6.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/07/15/ember-1-6-1-released.html"/>
    <id>http://emberjs.com/blog/2014/07/15/ember-1-6-1-released.html</id>
    <published>2014-07-15T00:00:00Z</published>
    <updated>2014-07-15T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Shortly after Ember 1.6.0 was released a regression was identified regarding custom error substates.
The error handling that was added to make debugging errors thrown in the Router's promise hooks
inadvertently caused the error substates to be completely...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Shortly after Ember 1.6.0 was released a regression was identified regarding custom error substates.
The error handling that was added to make debugging errors thrown in the Router&amp;#39;s promise hooks
inadvertently caused the error substates to be completely ignored.&lt;/p&gt;

&lt;p&gt;For more details review the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Failing &lt;a href="http://emberjs.jsbin.com/juqij/2/edit?html,js,output"&gt;JSBin&lt;/a&gt; from the original &lt;a href="https://github.com/emberjs/ember.js/issues/5148"&gt;bug report&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/5166"&gt;Fixing PR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.6.1/CHANGELOG.md"&gt;Ember.js 1.6.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
