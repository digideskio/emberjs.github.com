<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2016-07-24T20:00:00-04:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember Data 2.7 and 2.8 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/07/25/ember-data-2-7-released.html"/>
    <id>http://emberjs.com/blog/2016/07/25/ember-data-2-7-released.html</id>
    <published>2016-07-24T20:00:00-04:00</published>
    <updated>2016-07-24T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.7, a minor version release of Ember Data, is
released. This release represents the work of over 27 direct
contributors, and over 103 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.8 beta.1, the branch of Ember Data that will be released
as stable in roughly six...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.7, a minor version release of Ember Data, is
released. This release represents the work of over 27 direct
contributors, and over 103 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.8 beta.1, the branch of Ember Data that will be released
as stable in roughly six weeks, is also being released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_blueprint-changes'&gt;Blueprint Changes&lt;/h3&gt;
&lt;p&gt;In Ember Data 2.5 there was a change made to the blueprints to use
module paths when importing instead of importing the default DS
namespace. At the time this was thought to be a minor change and did
not receive much scrutiny. However, in time the Ember Data team has
discovered that the changes to the import statements in the blueprints
have made it more confusing for both new and experienced Ember
developers.&lt;/p&gt;

&lt;p&gt;In Ember Data 2.5 and Ember Data 2.6 the following generator command for building a model:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ember generate model post content isDraft:boolean comments:has-many user:belongs-to&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It would generate the following bluerpint:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; attr from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/attr&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; { belongsTo, hasMany } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/relationships&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;content&lt;/span&gt;: attr(),
  &lt;span class="key"&gt;isDraft&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;user&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ember Data 2.7 the same command will now generate the following blueprint:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;content&lt;/span&gt;: DS.attr(),
  &lt;span class="key"&gt;isDraft&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;comments&lt;/span&gt;: DS.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;user&lt;/span&gt;: DS.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The main difference is the blueprints no longer use the paths to
import specific modules. We have found that encouraging users to omit
the paths results in better defaults for both new and experienced
Ember developers. The simpler &lt;code&gt;import DS from &amp;#39;ember-data&amp;#39;;&lt;/code&gt; statement
has less room for typos and other errors and is easier to developers
to remember so they do not need reference documentation whenever they
want to add a new import.&lt;/p&gt;

&lt;p&gt;This change &lt;em&gt;only&lt;/em&gt; impacts the blueprints that are generated when
using the
&lt;a href="https://ember-cli.com/user-guide/#using-ember-cli"&gt;ember-cli generate&lt;/a&gt;
command. Code that is written to use the path imports will still
continue to work and be supported until at least Ember Data 3.0.&lt;/p&gt;

&lt;p&gt;The Ember Data team will also be releasing patch releases to Ember
Data 2.5 and 2.6 to update their blueprint generators to match Ember
Data 2.7.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-7'&gt;Changes in Ember Data 2.7&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-boolean-transform-allow-null-code-a-href-https-github-com-emberjs-data-pull-4022-4022-a'&gt;&lt;code&gt;ds-boolean-transform-allow-null&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4022"&gt;#4022&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Allow &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt; values for boolean attributes via &lt;code&gt;attr(&amp;#39;boolean&amp;#39;, { allowNull: true })&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/user.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;username&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;wantsWeeklyEmail&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;allowNull&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-links-in-record-array-code-a-href-https-github-com-emberjs-data-pull-4263-4263-a'&gt;&lt;code&gt;ds-links-in-record-array&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4263"&gt;#4263&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This feature exposes a &lt;code&gt;links&lt;/code&gt; object on a &lt;code&gt;RecordArray&lt;/code&gt;. This can be used to load additional links when  present in the response JSON-API document.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;store.query(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;isRecent&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; }).then((posts) =&amp;gt; {
  posts.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;links.next&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/danmcclain"&gt;@danmcclain&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-8-beta-1'&gt;Upcoming Features in Ember Data 2.8.beta-1&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-improved-ajax-code-a-href-https-github-com-emberjs-data-pull-3099-3099-a'&gt;&lt;code&gt;ds-improved-ajax&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/3099"&gt;#3099&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-improved-ajax&lt;/code&gt; feature was originally planned to be released
in Ember Data 2.7. However, feedback from the beta found that many
people are overriding &lt;code&gt;ajax()&lt;/code&gt; to change the protocol of the adapter
and the new methods added in made &lt;code&gt;ds-improved-ajax&lt;/code&gt; made this usecase
harder to achieve. The Ember Data team has decided to delay the
&lt;code&gt;ds-improved-ajax&lt;/code&gt; feature flag until the Ember Data 2.8 release while
improving the API for this usecase.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ds-improved-ajax&lt;/code&gt; feature adds new public methods to
&lt;code&gt;DS.RESTAdapter&lt;/code&gt;, which allow to customize the properties of a
request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;methodForRequest&lt;/code&gt; to get the HTTP verb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urlForRequest&lt;/code&gt; to get the URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headersForRequest&lt;/code&gt; to get the headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataForRequest&lt;/code&gt; to get the data (query params or request body)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; hash passed to those methods has all the properties with
which the corresponding &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;createRecord&lt;/code&gt;, &lt;code&gt;findQuery&lt;/code&gt;, ...  calls
have been invoked: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;snapshot&lt;/code&gt;(s), &lt;code&gt;id&lt;/code&gt;(s) and &lt;code&gt;query&lt;/code&gt;. The
&lt;code&gt;requestType&lt;/code&gt; property indicates which method is requested; the possible
values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing the actual AJAX request is handled by the &lt;code&gt;makeRequest&lt;/code&gt;
method, which is similar to the existing &lt;code&gt;ajax&lt;/code&gt; method: it makes the
request using &lt;code&gt;jQuery.ajax&lt;/code&gt; and attaches success and failure handlers.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Say your API handles creation of resources via PUT, this can now be
customized as follows:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// adapters/application.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTAdapter.extend({
  methodForRequest(params) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (params.requestType === &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;createRecord&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;PUT&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }

    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(...&lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for
implementing this feature.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.8 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.8.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.8.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 2.6 and 2.7 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/06/09/ember-data-2-6-released.html"/>
    <id>http://emberjs.com/blog/2016/06/09/ember-data-2-6-released.html</id>
    <published>2016-06-08T20:00:00-04:00</published>
    <updated>2016-06-08T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.6, a minor version release of Ember Data, is
released. This release represents the work of over 22 direct
contributors, and over 85 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.7 beta.1, the branch of Ember Data that will be released
as stable in roughly six...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.6, a minor version release of Ember Data, is
released. This release represents the work of over 22 direct
contributors, and over 85 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.7 beta.1, the branch of Ember Data that will be released
as stable in roughly six weeks, is also being released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-6'&gt;Changes in Ember Data 2.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ds-serialize-ids-and-types&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enables a new &lt;code&gt;ids-and-type&lt;/code&gt; strategy (in addition to the already existing &lt;code&gt;ids&lt;/code&gt; and &lt;code&gt;records&lt;/code&gt;) for
serializing has many relationships using the &lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; that  will include both
&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; of each model as an object.&lt;/p&gt;

&lt;p&gt;For instance, if a user has many pets, which is a polymorphic relationship, the generated payload would be:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Bertin Osborne&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;pets&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Cat&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; },
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Parrot&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}
    ]
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is particularly useful for polymorphic relationships not backed
  by &lt;a href="https://en.wikipedia.org/wiki/Single_Table_Inheritance"&gt;STI&lt;/a&gt;
  when just including the id of the records is not enough.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;@cibernox&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-7-beta-1'&gt;Upcoming Features in Ember Data 2.7.beta-1&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-boolean-transform-allow-null-code-a-href-https-github-com-emberjs-data-pull-4022-4022-a'&gt;&lt;code&gt;ds-boolean-transform-allow-null&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4022"&gt;#4022&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Allow &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt; values for boolean attributes via &lt;code&gt;attr(&amp;#39;boolean&amp;#39;, { allowNull: true })&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/user.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; attr from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/attr&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;email&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;username&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;wantsWeeklyEmail&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;allowNull&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-improved-ajax-code-a-href-https-github-com-emberjs-data-pull-3099-3099-a'&gt;&lt;code&gt;ds-improved-ajax&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/3099"&gt;#3099&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Though &lt;code&gt;ajax()&lt;/code&gt; (and &lt;code&gt;ajaxOptions()&lt;/code&gt;) of &lt;code&gt;DS.RESTAdapter&lt;/code&gt; are marked as
private, they have been overwritten in many applications, since there is
currently no other way to customize the request.&lt;/p&gt;

&lt;p&gt;This feature adds new public methods to &lt;code&gt;DS.RESTAdapter&lt;/code&gt;, which allow to
customize the properties of a request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;methodForRequest&lt;/code&gt; to get the HTTP verb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urlForRequest&lt;/code&gt; to get the URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headersForRequest&lt;/code&gt; to get the headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataForRequest&lt;/code&gt; to get the data (query params or request body)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; hash passed to those methods has all the properties with
which the corresponding &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;createRecord&lt;/code&gt;, &lt;code&gt;findQuery&lt;/code&gt;, ...  calls
have been invoked: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;snapshot&lt;/code&gt;(s), &lt;code&gt;id&lt;/code&gt;(s) and &lt;code&gt;query&lt;/code&gt;. The
&lt;code&gt;requestType&lt;/code&gt; property indicates which method is requested; the possible
values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing the actual AJAX request is handled by the &lt;code&gt;makeRequest&lt;/code&gt;
method, which is similar to the existing &lt;code&gt;ajax&lt;/code&gt; method: it makes the
request using &lt;code&gt;jQuery.ajax&lt;/code&gt; and attaches success and failure handlers.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Say your API handles creation of resources via PUT, this can now be
customized as follows:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// adapters/application.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTAdapter.extend({
  methodForRequest(params) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (params.requestType === &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;createRecord&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;PUT&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }

    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(...&lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ds-links-in-record-array-code-a-href-https-github-com-emberjs-data-pull-4263-4263-a'&gt;&lt;code&gt;ds-links-in-record-array&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4263"&gt;#4263&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This feature exposes a &lt;code&gt;links&lt;/code&gt; object on a &lt;code&gt;RecordArray&lt;/code&gt;. This can be used to load additional links when  present in the response JSON-API document.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;store.query(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;isRecent&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; }).then((posts) =&amp;gt; {
  posts.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;links.next&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/danmcclain"&gt;@danmcclain&lt;/a&gt; for
implementing this feature.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.7 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.7.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.7.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.6 and 2.7 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/06/08/ember-2-6-and-2-7-beta-released.html"/>
    <id>http://emberjs.com/blog/2016/06/08/ember-2-6-and-2-7-beta-released.html</id>
    <published>2016-06-07T20:00:00-04:00</published>
    <updated>2016-06-07T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.6, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.7 beta, the branch of Ember that will be released as stable in
roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_changes-in-ember-js-2-6"&gt;Changes in Ember.js 2.6&lt;/h3&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.6, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.7 beta, the branch of Ember that will be released as stable in
roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-6'&gt;Changes in Ember.js 2.6&lt;/h3&gt;
&lt;p&gt;No new features are added in Ember core in 2.6. In general the core team and
community have remained active around other highly visible parts of the Ember
stack (Ember Data, FastBoot, Glimmer, etc).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember 2.6 and will be
removed in Ember 3.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;didInitAttrs&lt;/code&gt; hook for component lifecycles is deprecated in favor of
simply using &lt;code&gt;init&lt;/code&gt;. &lt;code&gt;didInitAttrs&lt;/code&gt; had confusing timing
issues, and &lt;code&gt;init&lt;/code&gt; fulfills the same role. See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_ember-component-didinitattrs"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Passing a &lt;code&gt;model&lt;/code&gt; argument to &lt;code&gt;{{render}}&lt;/code&gt; is deprecated in favor of using
a component for the same cases. For example &lt;code&gt;{{render &amp;#39;chat&amp;#39; roomModel}}&lt;/code&gt;
can be refactored into a &lt;code&gt;chat-room&lt;/code&gt; component.
See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_model-param-in-code-render-code-helper"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes landing in 2.6, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.6.0/CHANGELOG.md"&gt;Ember.js 2.6.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-7-beta'&gt;Ember.js 2.7 Beta&lt;/h3&gt;
&lt;p&gt;Ember 2.7 beta introduces one new backward compatible API:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-computed-uniqby-code'&gt;&lt;code&gt;Ember.computed.uniqBy&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In general, the core team is hesitant about adding any new computed macros
or array prototype extensions to the framework. Instead, we encourage developers
to adopt an addon such as &lt;a href="https://github.com/cibernox/ember-cpm"&gt;ember-cpm&lt;/a&gt;
if they desire an expanded list of macros.&lt;/p&gt;

&lt;p&gt;However contributor &lt;a href="https://github.com/seanjohnson08"&gt;@seanjohnson08&lt;/a&gt; correctly pointed out there is a logical
gap in the APIs Ember provides today. Although each of &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;,
and &lt;code&gt;reject&lt;/code&gt; have a comparable &lt;code&gt;xxxBy&lt;/code&gt; method (for example &lt;code&gt;findBy&lt;/code&gt;) no
comparable method exists for &lt;code&gt;uniq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ember 2.7 adds &lt;code&gt;uniqBy&lt;/code&gt; as an computed property macro. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;carsInAccidents&lt;/span&gt;: Ember.computed.mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), 
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed.uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;carsInAccidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;uniqBy&lt;/code&gt; is also added as an array method. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents.@each.car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more information on these methods, see the &lt;a href="http://emberjs.com/api/classes/Ember.computed.html#method_uniqBy"&gt;API docs for the
computed macro&lt;/a&gt;, &lt;a href="http://emberjs.com/api/classes/Ember.Array.html#method_uniqBy"&gt;API docs for the array method&lt;/a&gt;, and &lt;a href="https://github.com/emberjs/ember.js/pull/12875"&gt;PR #12875&lt;/a&gt;
introducing these changes.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.7 beta, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.7.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.7.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Subteams</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/05/19/introducing-subteams.html"/>
    <id>http://emberjs.com/blog/2016/05/19/introducing-subteams.html</id>
    <published>2016-05-18T20:00:00-04:00</published>
    <updated>2016-05-18T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;I'm very happy to share with you our plan to scale Ember's day-to-day
decision-making and coordination—something we're calling Subteams. We mentioned
some of this in this year's EmberConf keynote, and wanted to expand on the
specific details.&lt;/p&gt;

&lt;p&gt;Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m very happy to share with you our plan to scale Ember&amp;#39;s day-to-day
decision-making and coordination—something we&amp;#39;re calling Subteams. We mentioned
some of this in this year&amp;#39;s EmberConf keynote, and wanted to expand on the
specific details.&lt;/p&gt;

&lt;p&gt;Ember.js was once just a view layer for rendering templates in the
browser, but has grown to become a complete SDK for the web. With one
&lt;code&gt;npm install&lt;/code&gt;, you get everything you need to create a modern web
application.&lt;/p&gt;

&lt;p&gt;Making things simple for developers often means a lot of coordination
and decision-making behind the scenes. As the number of pieces making up
Ember has grown—encompassing not only Ember.js but Ember CLI, Ember
Data, the Ember Inspector, documentation, and more—we want to ensure
that the Core Team does not become a bottleneck for progress.&lt;/p&gt;

&lt;p&gt;At the same time, we believe that having a strong vision that everyone
can rally behind is critical to building software that feels cohesive.
So how do we ensure that everyone is pulling their cart in the same
direction, without losing momentum?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re taking a page from &lt;a href="https://internals.rust-lang.org/t/announcing-the-subteams/2042"&gt;Rust&amp;#39;s
playbook&lt;/a&gt;
and adopting the idea of Subteams. While we&amp;#39;ve often had informal teams
tackle specific tasks, this change formalizes that process and
officially recognizes the hard work of these contributors.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_core-team'&gt;Core Team&lt;/h2&gt;
&lt;p&gt;The Core Team serves as the leadership for the Ember project as a whole.
Its responsibilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setting the overall direction and vision for the project.&lt;/strong&gt; This means
setting the core values that are used when making decisions about
technical tradeoffs. The core team also leads the writing of RFCs around new
initiatives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setting priorities and the release schedule.&lt;/strong&gt; Design bandwidth is limited,
and it&amp;#39;s dangerous to try to grow the framework too quickly; the core
team makes some difficult decisions about which areas to prioritize for
new design, based on the core values and target use cases.
The regular release cycle, being one of the project&amp;#39;s core values,
applies to subteams as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focusing on broad, cross-cutting concerns.&lt;/strong&gt; The Core Team is specifically
designed to take a global view of the project, to make sure the pieces
are fitting together in a coherent way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spinning up or shutting down subteams.&lt;/strong&gt; Over time, we may want to expand the
set of subteams, and it may make sense to have temporary &amp;quot;strike
teams&amp;quot; that focus on a particular, limited task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Going/no-going features&lt;/strong&gt;. While the subteams make decisions on RFCs,
the Core Team is responsible for pulling the trigger that moves a
feature from canary to beta. This provides an extra check that
features have adequately addressed cross-cutting concerns and that the
implementation quality is high enough.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each subteam is led by a Core Team liaison. This member is responsible for
keeping the Core Team apprised of progress on important initiatives,
identifying potential areas of concern early, and escalating cross-cutting
issues when needed.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #dev-ember-cli&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/ember-cli"&gt;Ember CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaisons&lt;/strong&gt;: Stefan Penner &amp;amp; Robert Jackson  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Katie Gengler&lt;/li&gt;
&lt;li&gt;Chad Hietala&lt;/li&gt;
&lt;li&gt;Jake Bixby&lt;/li&gt;
&lt;li&gt;Nathan Hammond&lt;/li&gt;
&lt;li&gt;Kelly Selden&lt;/li&gt;
&lt;li&gt;Tobias Bieniek&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #dev-ember-data&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/ember-data"&gt;Ember
Data&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaison&lt;/strong&gt;: Igor Terzic  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clemens Müller&lt;/li&gt;
&lt;li&gt;Christoffer Persson&lt;/li&gt;
&lt;li&gt;Stanley Stuart&lt;/li&gt;
&lt;li&gt;Brendan McLoughlin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_learning'&gt;Learning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #-learning&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/learning"&gt;Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Ember CLI and Ember Data subteams should be self-explanatory,
this one is the newest and may require some explanation.&lt;/p&gt;

&lt;p&gt;We intentionally did not call this subteam &lt;em&gt;Documentation&lt;/em&gt;,
because documentation is just one part of how new users learn to use
Ember. People start learning the second they land on the website
homepage, or when they see a presentation at their local user group.&lt;/p&gt;

&lt;p&gt;We want to make holistic learning a central part of Ember. In addition to good
guides and API documentation, this means thinking about how members of
the community interact, how they get help, and how we introduce them to
new features added via the RFC process.&lt;/p&gt;

&lt;p&gt;The Learning Subteam is responsible for the website, the guides, the API
docs and making sure the Core Team is aware of common pitfalls people
hit, like confusing error messages or APIs. We will take this
information and feed it back into the framework itself.&lt;/p&gt;

&lt;p&gt;The best documentation is the documentation you never have to write. By
reducing complexity, making errors clearer, and smoothing the learning
curve, we can help Ember reach an entirely new audience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaison&lt;/strong&gt;: Leah Silber&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;David Baker&lt;/li&gt;
&lt;li&gt;Ricardo Mendes&lt;/li&gt;
&lt;li&gt;Todd Jordan&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You&lt;/h2&gt;
&lt;p&gt;You can find information on the subteams and their members at
&lt;a href="http://emberjs.com/team/"&gt;http://emberjs.com/team/&lt;/a&gt;. We will keep this page up-to-date as people
come and go.&lt;/p&gt;

&lt;p&gt;A big thank you to the members of these teams, who donate their time and
energy to make the web a better place. If you&amp;#39;re interested in helping,
please reach out to one of the above team members for the best way to
get started.&lt;/p&gt;

&lt;p&gt;We are excited at the pace at which Ember has grown, and we think it
uniquely solves the challenge of building modern web applications in a
way that doesn&amp;#39;t push all of the complexity to the app developer. We
could not build as ambitiously without the dedication of these people.
Please join me in welcoming the new subteams, and in thanking for them
all of their hard work!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many thanks to the Rust Core Team and particularly Aaron Turon&amp;#39;s &lt;a href="https://github.com/aturon/rfcs/blob/rust-governance/text/0000-rust-governance.md"&gt;Governance
RFC&lt;/a&gt;,
and &lt;a href="https://internals.rust-lang.org/t/announcing-the-subteams/2042"&gt;subteam
announcement&lt;/a&gt;,
from which parts of this post are adapted.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Global Accessibility Awareness Day</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/05/17/global-accessibility-awareness-day.html"/>
    <id>http://emberjs.com/blog/2016/05/17/global-accessibility-awareness-day.html</id>
    <published>2016-05-16T20:00:00-04:00</published>
    <updated>2016-05-16T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;May 19, 2016 marks the fifth annual &lt;strong&gt;&lt;a href="http://www.globalaccessibilityawarenessday.org/"&gt;Global Accessibility Awareness Day (GAAD)&lt;/a&gt;&lt;/strong&gt; and this year we're encouraging you, the Ember.js community, to participate. We want to make our framework, addons, and the applications we collectively build and maintain...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;May 19, 2016 marks the fifth annual &lt;strong&gt;&lt;a href="http://www.globalaccessibilityawarenessday.org/"&gt;Global Accessibility Awareness Day (GAAD)&lt;/a&gt;&lt;/strong&gt; and this year we&amp;#39;re encouraging you, the Ember.js community, to participate. We want to make our framework, addons, and the applications we collectively build and maintain accessible to all users.&lt;/p&gt;

&lt;p&gt;Designing and building for accessibility can hugely benefit the Ember project and community. Accessibility informs the constraints of building great user interfaces, and better experiences result in greater adoption of Ember as a framework. Joining our efforts on May 19th is an investment in the Ember community and our collective future.&lt;/p&gt;

&lt;p&gt;Earlier this year &lt;a href="http://www.ember-a11y.com"&gt;the Ember A11y project&lt;/a&gt; was started with the goal of making Ember applications &lt;em&gt;accessible by default&lt;/em&gt;. We want Ember applications to move &amp;quot;beyond the ramp&amp;quot; of token accessibility and instead provide fantastic experiences for users of assistive technology. On Global Accessibility Awareness Day this year, we want &lt;strong&gt;you&lt;/strong&gt; to get involved.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_how-to-participate'&gt;How to Participate&lt;/h2&gt;
&lt;p&gt;On May 19th join the Ember A11y team, addon maintainers, and other participants in &lt;a href="https://embercommunity.slack.com/archives/topic-a11y"&gt;#topic-a11y&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com/"&gt;Ember Community Slack&lt;/a&gt;. Share what you&amp;#39;re working on and connect with us for ideas and advice. We have a &lt;a href="https://docs.google.com/spreadsheets/d/1q4DkaNwH8mh7xZJa1TmrHNcFuFuWdQ80iG88c7N4QII/edit#gid=808967448"&gt;curated list of issues in Ember community projects&lt;/a&gt; that you can help with, or feel free to bring and share what you&amp;#39;re doing in your own app! If you&amp;#39;ve got something you want help tackling we&amp;#39;re offering &lt;a href="http://pair.ember-a11y.com"&gt;pairing sessions with Ember A11y team members&lt;/a&gt; throughout the day.&lt;/p&gt;

&lt;p&gt;You can also &lt;a href="http://www.ember-a11y.com/"&gt;sign up for the Ember A11y mailing list at www.ember-a11y.com&lt;/a&gt; to get notifications about Global Accessibility Awareness Day and other accessibility topics in the Ember community.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_contribute-to-the-ember-a11y-project'&gt;Contribute to the Ember A11y Project&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/ember-a11y/"&gt;Ember A11y GitHub organization&lt;/a&gt; has a collection of addons that we maintain as part of our commitment to accessibility in the Ember ecosystem. Our primary focus so far has been on functionality for &lt;a href="https://github.com/ember-a11y/ember-a11y"&gt;focus management&lt;/a&gt; as well as &lt;a href="https://github.com/ember-a11y/ember-a11y-testing"&gt;testing&lt;/a&gt;. We&amp;#39;d love for you to help &lt;a href="https://github.com/rwjblue/ember-template-lint/issues/41"&gt;add features&lt;/a&gt;, &lt;a href="https://github.com/ember-a11y/ember-a11y/issues/3"&gt;research issues&lt;/a&gt;, &lt;a href="https://github.com/ember-a11y/ember-a11y/issues/9"&gt;address &lt;code&gt;TODO:&lt;/code&gt;s in the codebase&lt;/a&gt;, and &lt;a href="http://ember-a11y.github.io/ember-a11y/"&gt;test in multiple browser/assistive tech permutations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A curated list of Ember A11y issues ripe for the picking &lt;a href="https://docs.google.com/spreadsheets/d/1q4DkaNwH8mh7xZJa1TmrHNcFuFuWdQ80iG88c7N4QII/edit#gid=808967448"&gt;will be here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_contribute-to-community-addons'&gt;Contribute to Community Addons&lt;/h3&gt;
&lt;p&gt;This year we&amp;#39;ve partnered with a few community addons to work on improving their accessibility bonafides. &lt;a href="https://docs.google.com/spreadsheets/d/1q4DkaNwH8mh7xZJa1TmrHNcFuFuWdQ80iG88c7N4QII/edit#gid=0"&gt;The complete list of the community addons we&amp;#39;ve partnered with and efforts you can participate in is here.&lt;/a&gt; If you happen to use any of these addons in your own applications this is an excellent way to start contributing.&lt;/p&gt;

&lt;p&gt;If you want to improve an addon not in this list, the simplest way to get started is to do an accessibility review with assistive technologies. If you discover things that don&amp;#39;t work well, file an issue with the &lt;code&gt;[a11y]&lt;/code&gt; tag as a prefix.&lt;/p&gt;

&lt;p&gt;If you are unsure of where to start just reach out in &lt;a href="https://embercommunity.slack.com/archives/topic-a11y"&gt;#topic-a11y&lt;/a&gt; on Slack. We&amp;#39;ll be there to help.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_learn-about-accessibility'&gt;Learn About Accessibility&lt;/h3&gt;
&lt;p&gt;Accessibility is a tremendously broad space and includes everything from design to tooling to code. Learning about accessibility will help make you a better developer and is another great way to spend Global Accessibility Awareness Day. We&amp;#39;ve selected a few resources to help you get started.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_using-assistive-technology'&gt;Using Assistive Technology&lt;/h4&gt;
&lt;p&gt;You can experience the web using assistive tech and see what it&amp;#39;s like. Turn off your display and surf the web with a screen reader for an hour. Try using &lt;a href="http://www.nvda-project.org/"&gt;NVDA&lt;/a&gt; on Windows, VoiceOver on &lt;a href="http://help.apple.com/voiceover/info/guide/10.11/"&gt;OS X&lt;/a&gt; and &lt;a href="http://help.apple.com/iphone/9/#/iph3e2e4367"&gt;iOS&lt;/a&gt;, or &lt;a href="https://support.google.com/accessibility/android/answer/6283677?hl=en"&gt;TalkBack on Android&lt;/a&gt;. These tools can vary widely; trying more than one can help you understand the differences in user experience.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_guides-and-reading'&gt;Guides and Reading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;a href="http://a11yproject.com/checklist.html"&gt;The A11y Project&amp;#39;s Web Accessibility Checklist&lt;/a&gt; to guide you through an accessibility evaluation of a website.&lt;/li&gt;
&lt;li&gt;Check out this fantastic article on the tension between &lt;a href="http://simplyaccessible.com/article/guidelines-vs-ux/"&gt;accessibility guidelines and user experience&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Addy Osmani provided this &lt;a href="https://addyosmani.com/a11y/"&gt;overview of Chrome&amp;#39;s A11y Command-line Tools&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn about the foundations of Web Accessibility with the &lt;a href="https://www.smashingmagazine.com/2015/03/web-accessibility-with-accessibility-api/"&gt;Accessibility APIs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_videos-and-presentations'&gt;Videos and Presentations&lt;/h4&gt;
&lt;p&gt;This list of presentations is selected from the Ember community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/163925627"&gt;Accessibility Mechanics for Web Applications&lt;/a&gt; by &lt;a href="https://twitter.com/LeonieWatson"&gt;Léonie Watson&lt;/a&gt; given at &lt;a href="http://emberlondon.com/"&gt;Ember London&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ok9v9-Tcq0o"&gt;Building for Accessibility&lt;/a&gt; by &lt;a href="https://twitter.com/nathanhammond"&gt;Nathan Hammond&lt;/a&gt; and &lt;a href="https://twitter.com/jennison"&gt;Jennison Asuncion&lt;/a&gt; (one of the co-founders of GAAD) given at &lt;a href="https://wickedgoodember.com/"&gt;Wicked Good Ember&lt;/a&gt;. &lt;a href="http://www.nathanhammond.com/building-for-accessibility"&gt;Followup blog post.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/binhums"&gt;Ben Holmes&lt;/a&gt; gave a &lt;a href="http://confreaks.tv/videos/emberconf2016-minitalk-accessibility-in-ember"&gt;lightning talk&lt;/a&gt; at &lt;a href="http://emberconf.com/"&gt;EmberConf&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A talk titled &lt;a href="https://github.com/Robdel12/a11y-debt#a11y-debt"&gt;A11y Debt&lt;/a&gt; by &lt;a href="https://twitter.com/robdel12"&gt;Robert DeLuca&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_work-on-your-own-application'&gt;Work on Your Own Application&lt;/h3&gt;
&lt;p&gt;Lastly we encourage you to join us even if you&amp;#39;re working on your own application behind closed doors. We recommend investigating adoption of &lt;a href="https://emberobserver.com/addons/ember-a11y"&gt;ember-a11y&lt;/a&gt; for its focusing mechanics, adding &lt;a href="https://emberobserver.com/addons/ember-a11y-testing"&gt;ember-a11y-testing&lt;/a&gt; into your CI pipeline to test for accessibility issues, as well as adopting &lt;a href="https://emberobserver.com/addons/ember-cli-template-lint"&gt;ember-cli-template-lint&lt;/a&gt; which will hopefully include linting for accessibility issues by the end of the day on May 19th!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_after-gaad'&gt;After GAAD&lt;/h2&gt;
&lt;p&gt;Accessibility isn&amp;#39;t a one-day-a-year project. The Ember A11y community group is here to stay, and you can participate! Information about what we&amp;#39;re working on shows up in our &lt;a href="https://github.com/ember-a11y/core-notes/tree/ember-a11y/ember-a11y"&gt;fortnightly meeting notes&lt;/a&gt; and our nascent website, &lt;a href="http://www.ember-a11y.com"&gt;ember-a11y.com&lt;/a&gt;. We hang out in the &lt;a href="https://embercommunity.slack.com/archives/topic-a11y"&gt;#topic-a11y channel&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com/"&gt;Ember Community Slack&lt;/a&gt; and some of us haunt the &lt;a href="https://www.paciellogroup.com/blog/2015/07/anybody-can-be-an-a11y-slacker/"&gt;Web A11y Slack/Gitter&lt;/a&gt;. Come introduce yourself, we&amp;#39;d love to chat and help in any way we can.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve also set up a low-traffic email list for which you can sign up to be notified of accessibility-related news and happenings in the Ember community like Global Accessibility Awareness Day. &lt;a href="http://www.ember-a11y.com/"&gt;Sign up for email updates from the Ember A11y team.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;re glad to be a part of this community and we&amp;#39;re looking forward to working with you!&lt;/p&gt;

&lt;p&gt;- The Ember A11y Community Team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 2.5 and 2.6 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/05/03/ember-data-2-5-released.html"/>
    <id>http://emberjs.com/blog/2016/05/03/ember-data-2-5-released.html</id>
    <published>2016-05-02T20:00:00-04:00</published>
    <updated>2016-05-02T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.5, a minor version release of Ember Data, is released. This release represents the work of over 31 direct contributors, and over 137 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.6 beta.1, the branch of Ember Data that will be released as stable in roughly six...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.5, a minor version release of Ember Data, is released. This release represents the work of over 31 direct contributors, and over 137 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.6 beta.1, the branch of Ember Data that will be released as stable in roughly six weeks, is also being released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-5'&gt;Changes in Ember Data 2.5&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-finder-include-code'&gt;&lt;code&gt;ds-finder-include&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-finder-include&lt;/code&gt; feature allows an &lt;code&gt;include&lt;/code&gt; query parameter to
be specified using &lt;code&gt;store.findRecord()&lt;/code&gt; and &lt;code&gt;store.findAll()&lt;/code&gt; as
described in &lt;a href="https://github.com/emberjs/rfcs/pull/99"&gt;RFC 99&lt;/a&gt;. The
&lt;code&gt;include&lt;/code&gt; parameter tells JSON-API servers which relationships to
sideload in a response, but it can also be used by custom adapters to
signal which relationships the backend can sideload to improve
performance.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/HeroicEric"&gt;@HeroicEric&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /articles/1?include=comments&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; article = &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.findRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1&lt;/span&gt;, { &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /articles?include=comments&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; article = &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.findAll(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-references-code'&gt;&lt;code&gt;ds-references&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-references&lt;/code&gt; feature implements the references API as described
in &lt;a href="https://github.com/emberjs/rfcs/pull/57"&gt;RFC 57&lt;/a&gt;. References is a
low level API to perform meta-operations on records, has-many
relationships and belongs-to relationships:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get the current local data synchronously without triggering a fetch or producing a promise&lt;/li&gt;
&lt;li&gt;notify the store that a fetch for a given record has begun, and provide a promise for its result&lt;/li&gt;
&lt;li&gt;similarly, notify a record that a fetch for a given relationship has begun, and provide a promise for its result&lt;/li&gt;
&lt;li&gt;retrieve server-provided metadata about a record or relationship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following &lt;code&gt;post&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/post.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; { belongsTo, hasMany } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/relationships&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(),
  &lt;span class="key"&gt;author&lt;/span&gt;: belongsTo()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The references API now allows the possibility to interact with the relationships:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; post = store.peekRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1&lt;/span&gt;);

&lt;span class="comment"&gt;// check if the author is already loaded, without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;if&lt;/span&gt; (post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).value() !== &lt;span class="predefined-constant"&gt;null&lt;/span&gt;) {
  console.log(post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author.name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
} &lt;span class="keyword"&gt;else&lt;/span&gt; {
  &lt;span class="comment"&gt;// get the id of the author without triggering a request&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; authorId = post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).id();

  &lt;span class="comment"&gt;// load the author&lt;/span&gt;
  post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).load();
  console.log(&lt;span class="error"&gt;`&lt;/span&gt;Loading author &lt;span class="keyword"&gt;with&lt;/span&gt; id &lt;span class="predefined"&gt;$&lt;/span&gt;{authorId}&lt;span class="error"&gt;`&lt;/span&gt;);
}

&lt;span class="comment"&gt;// reload the author&lt;/span&gt;
post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).reload();

&lt;span class="comment"&gt;// get all ids without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; commentIds = post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).ids();

&lt;span class="comment"&gt;// check if there are comments, without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;if&lt;/span&gt; (post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).value() !== &lt;span class="predefined-constant"&gt;null&lt;/span&gt;) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; meta = post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).meta();
  console.log(&lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;{commentIds.length} comments out of &lt;span class="predefined"&gt;$&lt;/span&gt;{meta.total}&lt;span class="error"&gt;`&lt;/span&gt;);
} &lt;span class="keyword"&gt;else&lt;/span&gt; {
  post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).load();
}

&lt;span class="comment"&gt;// reload comments&lt;/span&gt;
post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).reload();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for implementing
this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ds-transform-pass-options-code'&gt;&lt;code&gt;ds-transform-pass-options&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-transform-pass-options&lt;/code&gt; feature allows for smarter transforms
by passing the options object from &lt;code&gt;DS.attr([type], [options])&lt;/code&gt; into
the transform.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_example'&gt;Example&lt;/h5&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;title&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;markdown&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;markdown&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
    &lt;span class="key"&gt;markdown&lt;/span&gt;: {
      &lt;span class="key"&gt;gfm&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;,
      &lt;span class="key"&gt;sanitize&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/transforms/markdown.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Transform.extend({
  &lt;span class="function"&gt;serialize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt; (deserialized, attributeMeta) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; deserialized.raw;
  },

  &lt;span class="function"&gt;deserialize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt; (serialized, attributeMeta) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; options = attributeMeta.options.markdown || {};

    &lt;span class="keyword"&gt;return&lt;/span&gt; marked(serialized, options);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for implementing
this feature and &lt;a href="https://github.com/knownasilya"&gt;@knownasilya&lt;/a&gt; for
proposing the &lt;a href="https://github.com/emberjs/rfcs/pull/1"&gt;RFC&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-6-beta-1'&gt;Upcoming Features in Ember Data 2.6.beta-1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ds-serialize-ids-and-types&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enables a new &lt;code&gt;ids-and-type&lt;/code&gt; strategy (in addition to the already existing &lt;code&gt;ids&lt;/code&gt; and &lt;code&gt;records&lt;/code&gt;) for
serializing has many relationships using the &lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; that  will include both
&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; of each model as an object.&lt;/p&gt;

&lt;p&gt;For instance, if a user has many pets, which is a polymorphic relationship, the generated payload would be:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Bertin Osborne&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;pets&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Cat&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; },
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Parrot&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}
    ]
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is particularly useful for polymorphic relationships not backed
  by &lt;a href="https://en.wikipedia.org/wiki/Single_Table_Inheritance"&gt;STI&lt;/a&gt;
  when just including the id of the records is not enough.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.6 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.6.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.6.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
