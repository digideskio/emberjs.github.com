<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2015-10-04T17:00:00-07:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember Data 2.1 and 2.2 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/10/05/ember-data-2-1-released.html"/>
    <id>http://emberjs.com/blog/2015/10/05/ember-data-2-1-released.html</id>
    <published>2015-10-04T17:00:00-07:00</published>
    <updated>2015-10-04T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.1, a minor version release of Ember Data with bug fixes only, is released today. This release represents the work of over 26 direct contributors, and over 127 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.2 beta.1, the branch of Ember Data that will be released...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.1, a minor version release of Ember Data with bug fixes only, is released today. This release represents the work of over 26 direct contributors, and over 127 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.2 beta.1, the branch of Ember Data that will be released as stable in roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-data-2-1'&gt;New Features in Ember Data 2.1&lt;/h2&gt;
&lt;p&gt;There are no new Features introduced in Ember Data 2.1. Instead the
Ember Data team spent this release cycle focused on improving the
guides, API documentation and fixing bugs.&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://github.com/emberjs/data/blob/v2.1.0/CHANGELOG.md"&gt;Ember Data 2.1.0 CHANGELOG&lt;/a&gt; for a full list of all changes.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data-2-2-beta'&gt;Ember Data 2.2 beta&lt;/h2&gt;
&lt;p&gt;No new features are currently planned for Ember Data 2.2. During the
canary cycle leading to this beta, the Ember Data team and community
have been primarily focused on bug fixes and performance
improvements. The Ember Data team expects the introduction of new
features to resume in Ember Data 2.3.&lt;/p&gt;

&lt;p&gt;For more details on changes in 2.2, review the
&lt;a href="https://github.com/emberjs/data/blob/v2.2.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.2.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.1 and 2.2 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/10/04/ember-2-1-released.html"/>
    <id>http://emberjs.com/blog/2015/10/04/ember-2-1-released.html</id>
    <published>2015-10-03T17:00:00-07:00</published>
    <updated>2015-10-03T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.1, a minor version release of Ember with additive features only, is released today. This release represents the work of over 82 direct contributors, and over 850 commits.&lt;/p&gt;

&lt;p&gt;Ember.js 2.2 beta, the branch of Ember that will be released as stable...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.1, a minor version release of Ember with additive features only, is released today. This release represents the work of over 82 direct contributors, and over 850 commits.&lt;/p&gt;

&lt;p&gt;Ember.js 2.2 beta, the branch of Ember that will be released as stable in roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-2-1'&gt;New Features in Ember.js 2.1&lt;/h2&gt;
&lt;p&gt;Changes to the Ember&amp;#39;s API in 2.1 are backwards compatible. A summary of the new features in today&amp;#39;s release follows.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-get-code-helper'&gt;&lt;code&gt;{{get}}&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{get}}&lt;/code&gt; helper allows dynamic property lookup on objects in templates.
For example, these two usages are equivalent:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;user.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;get&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A property with a value of a string can be passed as the second argument,
making both the object and the property being read dynamic. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;get&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="attribute-name"&gt;somePropertyName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For documentation on &lt;code&gt;get&lt;/code&gt;, reference the &lt;a href="http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_get"&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Big thanks to &lt;a href="https://twitter.com/jmurphyau"&gt;@jmurphyau&lt;/a&gt; for the
implementation of this feature, and for his excellent
&lt;a href="https://github.com/jmurphyau/ember-get-helper"&gt;ember-get-helper&lt;/a&gt; addon that
demonstrated how useful this helper would be. Using his
&lt;a href="https://github.com/jmurphyau/ember-truth-helpers"&gt;ember-truth-helpers&lt;/a&gt; addon
in 1.13 codebases is highly recommended.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-each-in-code-helper'&gt;&lt;code&gt;{{each-in}}&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{each-in}}&lt;/code&gt; helper iterates keys and values of an object. It is similar
conceptually to the &lt;code&gt;for (key in object) {&lt;/code&gt; syntax of JavaScript. For example,
this code would display a list of all property names and values on the &lt;code&gt;user&lt;/code&gt;
object:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each-in&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;key&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;key&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;value&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each-in&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;code&gt;{{each-in}}&lt;/code&gt;, the iterated list of keys will be unbound. If a new
property is set on &lt;code&gt;user&lt;/code&gt; with &lt;code&gt;user.newProp = &amp;#39;newVal&amp;#39;;&lt;/code&gt;, the new property
will not appear.&lt;/p&gt;

&lt;p&gt;For documentation on the &lt;code&gt;{{each-in}}&lt;/code&gt; helper, see the &lt;a href="http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in"&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; for the
implementation of this feature, and thanks to
&lt;a href="https://twitter.com/miguelcamba"&gt;@miguelcamba&lt;/a&gt; for his followup PRs.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_registry-and-container-reform'&gt;Registry and Container Reform&lt;/h4&gt;
&lt;p&gt;The Ember.js registry and container are some of the most extensively used
private APIs in the framework. They
provided one of the only ways to lookup arbitrary objects from Ember&amp;#39;s
dependency container.&lt;/p&gt;

&lt;p&gt;We are committed to stabilizing this part of the framework and
offering public APIs. This first step creates a normalized way to interact
with &lt;code&gt;register&lt;/code&gt; and &lt;code&gt;lookup&lt;/code&gt; that we expect to last through the 2.x cycle
and beyond.&lt;/p&gt;

&lt;p&gt;In 2.1, &lt;code&gt;Ember.Application&lt;/code&gt; instances are passed as the first argument to &lt;code&gt;initializer&lt;/code&gt;
hooks. &lt;code&gt;initializer&lt;/code&gt; hooks are where dependencies between object types
can be configured, and factories can be registered. Several public APIs will
exist on &lt;code&gt;Ember.Application&lt;/code&gt; instances, some of them new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt; - register a factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inject&lt;/code&gt; - inject a factory into another factory, or all factories of a type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unregister&lt;/code&gt; - remove a factory from registration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolveRegistration&lt;/code&gt; - fetch a registered factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasRegistration&lt;/code&gt; - check for a registered factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registerOption&lt;/code&gt;, &lt;code&gt;registeredOption&lt;/code&gt;, &lt;code&gt;registerOptions&lt;/code&gt;, &lt;code&gt;registeredOptions&lt;/code&gt;,
&lt;code&gt;registerOptionsForType&lt;/code&gt;, &lt;code&gt;registeredOptionsForType&lt;/code&gt; which manage options
for a factory (is it a singleton, can it be instantiated).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; instances are passed as the first argument to
&lt;code&gt;instanceInitializer&lt;/code&gt; hooks in 2.1. &lt;code&gt;instanceInitializer&lt;/code&gt; hooks are where
factories can be fetched out of the configured and booted application.
One relevant public APIs exists on &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup&lt;/code&gt; - fetch an instance of a factory (with dependencies)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find updates to the guides regarding initializers in the revamped &lt;a href="http://guides.emberjs.com/v2.1.0/applications/applications-and-instances/"&gt;Application Concerns&lt;/a&gt; section. The
API documentation is similarly updated at the &lt;a href="http://emberjs.com/api/modules/ember-application.html"&gt;ember-application namespace&lt;/a&gt;, &lt;a href="http://emberjs.com/api/classes/Ember.Application.html"&gt;Ember.Application&lt;/a&gt; class, and &lt;a href="http://emberjs.com/api/classes/Ember.ApplicationInstance.html"&gt;Ember.ApplicationInstance&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;This feature also introduces two minor deprecations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expecting two arguments for an initializer hook is deprecated&lt;/li&gt;
&lt;li&gt;Calling &lt;code&gt;appInstance.container.lookup&lt;/code&gt; on the first argument to an instance
initializer is deprecated in favor of &lt;code&gt;appInstance.lookup&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecations flag where we expect to change an API in the future. It is not
recommended that you use deprecated functionality, but you can also safely
silence a deprecation message and continue to use that functionality until
its removal date.&lt;/p&gt;

&lt;p&gt;A huge thanks to the tireless &lt;a href="https://twitter.com/dgeb"&gt;@dgeb&lt;/a&gt; for his work on the
RFC, implementation, and documentation for these changes. They represent a significant
improvement in Ember&amp;#39;s dependency injection system.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecate-and-warn-handlers'&gt;Deprecate and Warn Handlers&lt;/h4&gt;
&lt;p&gt;In the run up to Ember 2.0, it became clear that the tooling for management of
deprecations was poor. One of the reasons for this was the lack of a public,
documented API for deciding how a deprecations and warnings should be handled.
2.1 introduces a proper API for our tooling to build upon.&lt;/p&gt;

&lt;p&gt;The default behavior of a deprecation or warning is to log to the console. To change
this behavior, register a handler and write custom logic. For example this
handler would throw an exception for any deprecation messages with the word
&lt;code&gt;should&lt;/code&gt; in them:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.Debug.registerDeprecationHandler((message, options, next) =&amp;gt; {
  &lt;span class="keyword"&gt;if&lt;/span&gt; (message.indexOf(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) !== -&lt;span class="integer"&gt;1&lt;/span&gt;) {
    &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; Error(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Deprecation message with should: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;+message);
  } &lt;span class="keyword"&gt;else&lt;/span&gt; {
    &lt;span class="comment"&gt;// defer to whatever handler was registered before this one&lt;/span&gt;
    next(message, options);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, all warnings are silenced:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// next is not called, so no warnings get the default behavior&lt;/span&gt;
Ember.Debug.registerWarnHandler(() =&amp;gt; {});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Handlers are provided with the following data through arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt; is the text logged by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; is an object containing at minimum the property &lt;code&gt;id&lt;/code&gt; in the format &lt;code&gt;package-name.specific-deprecation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; is a caller for the previously registered handler. Often, this is the
default handler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecation handlers will also be provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;options.until&lt;/code&gt; is the version of Ember this feature and deprecation will be
removed in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of Ember 2.0, &lt;code&gt;deprecate&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; calls must provide an &lt;code&gt;id&lt;/code&gt; option,
and &lt;code&gt;deprecate&lt;/code&gt; calls must additionally provide an &lt;code&gt;until&lt;/code&gt; option.
Addons not providing this data during
2.x will trigger a deprecation warning.&lt;/p&gt;

&lt;p&gt;For more information see the &lt;a href="http://emberjs.com/api/classes/Ember.Debug.html"&gt;Ember.Debug&lt;/a&gt;
API documentsion. This API can be used with previous versions of Ember via the
&lt;a href="https://github.com/rwjblue/ember-debug-handlers-polyfill"&gt;ember-debug-handlers-polyfill&lt;/a&gt;,
though &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; data is not provided until Ember 2.0.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt; for
shipping this API and the polyfill addon, and to &lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;
for the RFC.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.1, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.1.0/CHANGELOG.md"&gt;Ember.js 2.1.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js-2-2-beta'&gt;Ember.js 2.2 beta&lt;/h2&gt;
&lt;p&gt;No new features are slated for Ember 2.2. During the canary cycle leading to this beta, the core team and community have been primarily focused on performance improvements or feature work still behind a feature flag.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.2, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.2.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.2.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Guides Status Update</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/09/02/ember-guides-status-update.html"/>
    <id>http://emberjs.com/blog/2015/09/02/ember-guides-status-update.html</id>
    <published>2015-09-01T17:00:00-07:00</published>
    <updated>2015-09-01T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;The road to Ember 2.0 has been long and rewarding: the community and team have invested in huge efforts to move Ember to a component-based architecture; we released a stable Ember Data; and we unified our development process with Ember CLI. All in...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The road to Ember 2.0 has been long and rewarding: the community and team have invested in huge efforts to move Ember to a component-based architecture; we released a stable Ember Data; and we unified our development process with Ember CLI. All in all, we&amp;#39;ve made huge progress.&lt;/p&gt;

&lt;p&gt;Unfortunately, our docs efforts haven’t kept up with all of those improvements. We know that many Ember users have been frustrated that they can&amp;#39;t find the resources they need to take advantage of new features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over the next few releases, we&amp;#39;ll be focusing on major improvements to the content of the Ember Guides and the process of landing new features so we don&amp;#39;t fall behind again.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_upcoming-releases'&gt;Upcoming releases&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s what you can expect in the coming weeks and months:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ember Data&lt;/em&gt;&lt;/strong&gt;: Several of us are working hard to update the Models section of the Guides to properly document Ember Data in its stable form. This should be released imminently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ember 2.1&lt;/em&gt;&lt;/strong&gt;: Several people are working on reviewing the Guides from beginning to end to improve the quality of the writing and make sure that all of the information is up to date. We aim to have this completed for the 2.1 release of the Guides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ember 2.2&lt;/em&gt;&lt;/strong&gt;: A few contributors are writing an updated version of the tutorial that used to be at the beginning of the Guides. We aim to have the first version in the 2.2 release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_better-process'&gt;Better process&lt;/h2&gt;
&lt;p&gt;Until recently, the Ember Guides and API documentation were maintained by the same developers who wrote the code for Ember.js itself. As the burden has grown, the developers bringing you Ember have stopped being able to tackle both writing the code and documenting it. We&amp;#39;ve realized that we need a more pragmatic and structured approach to keeping the documentation up-to-date.&lt;/p&gt;

&lt;p&gt;We’ve created a new Docs subteam to help drive the direction of the documentation and help make sure that new features always include documentation. It includes existing Ember core team members, along with fresh faces @locks and @michaelrkn. With extra bandwidth from members who are focused exclusively on documentation, we&amp;#39;ve already made great strides in improving the documentation and filling in missing pieces.&lt;/p&gt;

&lt;p&gt;Additionally, the team has agreed that &lt;strong&gt;no new feature will land in a stable release of Ember without documentation and updates to relevant guides&lt;/strong&gt;. We don’t want documentation to languish again.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_getting-involved'&gt;Getting involved&lt;/h2&gt;
&lt;p&gt;Whether you&amp;#39;re a new Ember dev or an old hand, there is lots of work that you can help out with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out issues labeled &lt;a href="https://github.com/emberjs/guides/labels/help%20wanted"&gt;help wanted&lt;/a&gt; on the Guides repo.&lt;/li&gt;
&lt;li&gt;Read through the &lt;a href="https://github.com/emberjs/guides/blob/master/CONTRIBUTING.md"&gt;guidelines for contributing&lt;/a&gt; to the Guides.&lt;/li&gt;
&lt;li&gt;If you&amp;#39;d like to help out but get stuck along the way at any point, join us in the &lt;a href="https://embercommunity.slack.com/messages/documentation/"&gt;documentation Slack channel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Contact @locks or @michaelrkn on Slack if you&amp;#39;re interested in joining the Docs subteam.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help other contributors stay productive, please keep your contributions and questions limited to issues that are not being worked on by other contributors, and avoid asking for status updates. If you&amp;#39;re curious about the progress of the Guides, you can follow along on commits to the &lt;a href="https://github.com/emberjs/guides"&gt;Guides repo&lt;/a&gt; and read the &lt;a href="https://github.com/emberjs/core-notes/tree/master/docs-team"&gt;Docs team weekly meeting minutes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like all of Ember.js and its sister projects, the Guides are maintained by an all-volunteer team. Please take a moment to thank them online, buy them a beer at your local meetup, and best yet, chip in and help out yourself!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to Yehuda Katz and Leah Silber for reviewing the draft of this post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v2.0 Released and v2.1 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/09/02/ember-data-2-0-released.html"/>
    <id>http://emberjs.com/blog/2015/09/02/ember-data-2-0-released.html</id>
    <published>2015-09-01T17:00:00-07:00</published>
    <updated>2015-09-01T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are excited to announce the release of Ember Data 2.0, the
second stable release since 1.13 that includes significant improvements,
cleanup, and cruft removal.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;As previously discussed&lt;/a&gt;, Ember Data releases occur in
lockstep with Ember, to help developers...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are excited to announce the release of Ember Data 2.0, the
second stable release since 1.13 that includes significant improvements,
cleanup, and cruft removal.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;As previously discussed&lt;/a&gt;, Ember Data releases occur in
lockstep with Ember, to help developers better reason about
compatibility between these libraries. Ember Data 2.0 is designed to be
used in tandem with Ember 2.0, and like Ember 2.0, we have used the
occasion of a new major version number to remove deprecated features and
clean up the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember Data 2.0 is about removing deprecated
functionality, not adding new features&lt;/strong&gt;. If you&amp;#39;ve already started
using Ember Data 1.13 and cleared the deprecations, you should find
upgrading to Ember Data 2.0 to be very straightforward.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_json-api'&gt;JSON API&lt;/h3&gt;
&lt;p&gt;In the &lt;a href="http://emberjs.com/blog/2015/06/18/ember-data-1-13-released.html"&gt;Ember Data 1.13 blog post&lt;/a&gt;, we described how we
had overhauled Ember Data&amp;#39;s internals to use JSON API from top to
bottom.&lt;/p&gt;

&lt;p&gt;Using JSON API dramatically simplified internal code and APIs, but I
want to emphasize that &lt;strong&gt;moving to JSON API internally does not affect
your applications, and you are in no way required to use JSON API
yourself to upgrade to newer versions of Ember Data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The adapters that determine how your application talks to the backend
server remain unchanged, but this change should make the lives of
adapter authors much simpler going forward.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_unsaved-deleted-records'&gt;Unsaved Deleted Records&lt;/h3&gt;
&lt;p&gt;There is one significant breaking change in the move from 1.13 to
2.0. The short version of this change is &lt;strong&gt;locally deleted (unsaved)
records are no longer removed from RecordArrays and hasMany
arrays. Ember Data now removes the deleted record only after the
delete has been confirmed by the backend. There is also a
&lt;a href="https://github.com/ember-data/ember-data-live-filter-by"&gt;new addon&lt;/a&gt;
to make it easier to implement the old behavior.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Ember Data 1.13, once a record was marked as deleted, it was removed from
all of the &lt;code&gt;RecordArrays&lt;/code&gt; and &lt;code&gt;hasMany&lt;/code&gt; arrays it belonged to. This made it
difficult to create UIs where users could &amp;quot;un-delete&amp;quot; records.&lt;/p&gt;

&lt;p&gt;For example, imagine you are building a document viewer app using Ember Data.
You show the user a list of documents they have access to. When the user
deletes a document, you want it to remain in the list, but with a different
visual treatment to indicate that it has been deleted locally (i.e., not saved back to the server).&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2015-08-03-ember-data-2-0-released/deleted-document.png" alt="Example UI with deleted document"&gt;&lt;/p&gt;

&lt;p&gt;Building this UI was difficult because the record would be removed from the
list as soon as you called &lt;code&gt;deleteRecord()&lt;/code&gt; on the model.&lt;/p&gt;

&lt;p&gt;In Ember Data 2.0, this will be a lot easier because records are no longer
removed from hasMany relationships or RecordArrays until the delete has been
acknowledged by the adapter. Note that Although deleted records will be visible
in hasMany relationships, they will not be serialized when saving these
relationships back to the server.&lt;/p&gt;

&lt;p&gt;To make the transition easier, the Ember Data team (with help from
&lt;a href="https://github.com/pangratz"&gt;Clemens Müller&lt;/a&gt;) has released an addon called
&lt;a href="https://github.com/ember-data/ember-data-live-filter-by"&gt;Ember Data Live filterBy&lt;/a&gt;. This
allows the &lt;code&gt;filterBy&lt;/code&gt; method on &lt;code&gt;RecordArray&lt;/code&gt;s and &lt;code&gt;hasMany&lt;/code&gt;
relationships to return a live filtered subset of the original
array. This can be used to filter out deleted but unsaved records to
preserve the old behavior, where records are removed from collections
as soon as they are deleted. This addon work with Ember Data 1.13 and Ember Data 2.0.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.PostController = Ember.Controller.extend({
  &lt;span class="function"&gt;allPosts&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.peekAll(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property()
  &lt;span class="function"&gt;allUndeletedPosts&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.peekAll(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).filterBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isDeleted&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;, { &lt;span class="key"&gt;live&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; });
  }.property()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h1 class='anchorable-toc' id='toc_ember-data-2-1-beta'&gt;Ember Data 2.1 Beta&lt;/h1&gt;
&lt;p&gt;Ember Data data 2.1 will be the first release following Ember&amp;#39;s 6 week
release cycle. Rather then rush new features into the beta before they
are ready, Ember Data 2.1 will not contain any new features or
deprecations. Instead the Ember Data team is going to spend this cycle
fixing issues, updating documentation and planning features for future
2.x releases.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;CHANGELOGS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v2.0.0/CHANGELOG.md"&gt;Ember Data 2.0.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v2.1.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.1.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.1 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/08/16/ember-2-1-beta-released.html"/>
    <id>http://emberjs.com/blog/2015/08/16/ember-2-1-beta-released.html</id>
    <published>2015-08-15T17:00:00-07:00</published>
    <updated>2015-08-15T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.1 beta is released today. As a minor release, Ember 2.1 will be
backwards compatible with Ember 2.0. Any changes to the API will be additive.
This continues Ember's commitment to &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;
we began with the 1.0 release.&lt;/p&gt;

&lt;p&gt;In addition...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.1 beta is released today. As a minor release, Ember 2.1 will be
backwards compatible with Ember 2.0. Any changes to the API will be additive.
This continues Ember&amp;#39;s commitment to &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;
we began with the 1.0 release.&lt;/p&gt;

&lt;p&gt;In addition it means many of the first features for Ember 2.2, most notably angle
bracket components, have landed in Canary behind a feature flag. If you&amp;#39;re
interested in help us progress with those features, now is a good time to
try them out.&lt;/p&gt;

&lt;p&gt;On to the changes coming in our late September/early October release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-2-1'&gt;New Features in Ember.js 2.1&lt;/h2&gt;
&lt;p&gt;Ember.js 2.1 will be a minor release of Ember. This means changes to the API are
made in an additive, backwards compatible manner. In roughly six weeks, these
features will be part of the 2.1 stable version.&lt;/p&gt;

&lt;p&gt;A summary of the new features in today&amp;#39;s release follows.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-get-code-helper'&gt;&lt;code&gt;{{get}}&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{get}}&lt;/code&gt; helper allows dynamic property lookup on objects in templates.
For example, these two usages are equivalent:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;user.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;get&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A property with a value of a string can be passed as the second argument,
making both the object and the property being read dynamic. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;get&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="attribute-name"&gt;somePropertyName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more information on the &lt;code&gt;{{get}}&lt;/code&gt; helper, reference the implementation
in &lt;a href="https://github.com/emberjs/ember.js/pull/11196"&gt;PR #11196&lt;/a&gt; and
&lt;a href="https://github.com/emberjs/ember.js/pull/11691"&gt;PR #11691&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Big thanks to &lt;a href="https://twitter.com/jmurphyau"&gt;@jmurphyau&lt;/a&gt; for the
implementation of this feature, and for his excellent
&lt;a href="https://github.com/jmurphyau/ember-get-helper"&gt;ember-get-helper&lt;/a&gt; addon that
demonstrated how useful this helper would be. Trying his
&lt;a href="https://github.com/jmurphyau/ember-truth-helpers"&gt;ember-truth-helpers&lt;/a&gt; addon
is highly recommended.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-each-in-code-helper'&gt;&lt;code&gt;{{each-in}}&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{each-in}}&lt;/code&gt; helper iterates keys and values of an object. It is similar
conceptually to the &lt;code&gt;for (key in object) {&lt;/code&gt; syntax of JavaScript. For example,
this code would display a list of all property names and values on the &lt;code&gt;user&lt;/code&gt;
object:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each-in&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;key&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;key&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;value&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each-in&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;code&gt;{{each-in}}&lt;/code&gt;, the iterated list of keys will be unbound. If a new
property is set on &lt;code&gt;user&lt;/code&gt; with &lt;code&gt;user.newProp = &amp;#39;newVal&amp;#39;;&lt;/code&gt;, the new property
will not appear.&lt;/p&gt;

&lt;p&gt;For more information on the &lt;code&gt;{{each-in}}&lt;/code&gt; helper, reference
&lt;a href="https://github.com/emberjs/ember.js/pull/11171"&gt;PR #11171&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; for the
implementation of this feature, and thanks to
&lt;a href="https://twitter.com/miguelcamba"&gt;@miguelcamba&lt;/a&gt; for his followup PRs.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecate-and-warn-handlers'&gt;Deprecate and Warn Handlers&lt;/h4&gt;
&lt;p&gt;In the run up to Ember 2.0, it became clear that the tooling for management of
deprecations was poor. One of the reasons for this was the lack of a public,
documented API for deciding how a deprecations and warnings should be handled.
2.1 introduces a proper API for our tooling to build upon.&lt;/p&gt;

&lt;p&gt;The default behavior of a deprecation or warning is to log to the console. To change
this behavior, register a handler and write custom logic. For example this
handler would throw an exception for any deprecation messages with the word
&lt;code&gt;should&lt;/code&gt; in them:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.Debug.registerDeprecationHandler((message, options, next) =&amp;gt; {
  &lt;span class="keyword"&gt;if&lt;/span&gt; (message.indexOf(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) !== -&lt;span class="integer"&gt;1&lt;/span&gt;) {
    &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; Error(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Deprecation message with should: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;+message);
  } &lt;span class="keyword"&gt;else&lt;/span&gt; {
    &lt;span class="comment"&gt;// defer to whatever handler was registered before this one&lt;/span&gt;
    next(message, options);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, all warnings are silenced:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// next is not called, so no warnings get the default behavior&lt;/span&gt;
Ember.Debug.registerWarnHandler(() =&amp;gt; {});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Handlers are provided with the following data through arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt; is the text logged by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; is a caller for the previously registered handler. Often, this is the
default handler.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options.id&lt;/code&gt; is an id in the format &lt;code&gt;package-name.specific-deprecation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecation handlers will also be provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;options.until&lt;/code&gt; is the version of Ember this feature and deprecation will be
removed in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of Ember 2.0, &lt;code&gt;deprecate&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; calls must provide an &lt;code&gt;id&lt;/code&gt; option,
and &lt;code&gt;deprecate&lt;/code&gt; calls must additionally provide an &lt;code&gt;until&lt;/code&gt; option.
Addons not providing this data during
2.x will trigger a deprecation warning.&lt;/p&gt;

&lt;p&gt;For more information see &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0065-deprecation-warning-handlers.md"&gt;RFC #65&lt;/a&gt;
and the implementation in &lt;a href="https://github.com/emberjs/ember.js/pull/11833"&gt;PR #11833&lt;/a&gt;.
This API can be used with older versions of Ember via the
&lt;a href="https://github.com/rwjblue/ember-debug-handlers-polyfill"&gt;ember-debug-handlers-polyfill&lt;/a&gt;,
though &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; data is not provided until Ember 2.0.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt; for
shipping this API and the polyfill addon, and to &lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;
for the RFC.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_registry-and-container-reform'&gt;Registry and Container Reform&lt;/h4&gt;
&lt;p&gt;The Ember.js registry and container are some of the most extensively used
private APIs in the framework. They
provided one of the only ways to lookup arbitrary objects from Ember&amp;#39;s
dependency container.&lt;/p&gt;

&lt;p&gt;In 2.x, we are committed to stabilizing this part of the framework and
offering public APIs. This first step creates a normalized way to interact
with &lt;code&gt;register&lt;/code&gt; and &lt;code&gt;lookup&lt;/code&gt; that we expect to last through the 2.x cycle
and beyond.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ember.Application&lt;/code&gt; instances are passed as the first argument to &lt;code&gt;initializer&lt;/code&gt;
hooks in 2.1. &lt;code&gt;initializer&lt;/code&gt; hooks are where dependencies between object types
can be configured, and factories can be registered. Several public APIs will
exist on &lt;code&gt;Ember.Application&lt;/code&gt; instances, some of them new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt; - register a factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inject&lt;/code&gt; - inject a factory into another factory, or all factories of a type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unregister&lt;/code&gt; - remove a factory from registration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolveRegistration&lt;/code&gt; - fetch a registed factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasRegistration&lt;/code&gt; - check for a registered factory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registerOption&lt;/code&gt;, &lt;code&gt;registeredOption&lt;/code&gt;, &lt;code&gt;registerOptions&lt;/code&gt;, &lt;code&gt;registeredOptions&lt;/code&gt;,
&lt;code&gt;registerOptionsForType&lt;/code&gt;, &lt;code&gt;registeredOptionsForType&lt;/code&gt; which manage options
for a factory (is it a singleton, can it be instantiated).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; instances are passed as the first argument to
&lt;code&gt;instanceInitializer&lt;/code&gt; hooks in 2.1. &lt;code&gt;instanceInitializer&lt;/code&gt; hooks are where
objects and classes can be fetched out of the configured and booted application.
Two new relevent public APIs will exist on &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup&lt;/code&gt; - fetch an instance of a factory (with dependencies)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about these changes read
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0046-registry-reform.md"&gt;RFC #46&lt;/a&gt;
and the initial implementation in
&lt;a href="https://github.com/emberjs/ember.js/pull/11440"&gt;PR #11440&lt;/a&gt;. To better
understand dependency management in Ember and how to use these APIs, see the
section on &lt;a href="http://guides.emberjs.com/v1.13.0/understanding-ember/dependency-injection-and-service-lookup/#toc_dependency-management-in-ember-js"&gt;dependency management&lt;/a&gt; in
the 1.13 guides.&lt;/p&gt;

&lt;p&gt;This feature also introduces two minor deprecations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling &lt;code&gt;appInstance.container.lookup&lt;/code&gt; on the first argument to an instance
initializer is deprecated in favor of &lt;code&gt;appInstance.lookup&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Expecting two arguments for an initializer hook is deprecated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deprecations flag where we expect to change an API in the future. It is not
recommended that you use deprecated functionality, but you can also safely
silence a deprecation message and continue to use that functionality until
its removal date.&lt;/p&gt;

&lt;p&gt;Huge thanks to &lt;a href="https://twitter.com/dgeb"&gt;@dgeb&lt;/a&gt; for
his tireless work on the RFC and implementation for this work, as well as
his patience building consensus around changes to Ember&amp;#39;s internals.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.1, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.1.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.1.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.0 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/08/13/ember-2-0-released.html"/>
    <id>http://emberjs.com/blog/2015/08/13/ember-2-0-released.html</id>
    <published>2015-08-12T17:00:00-07:00</published>
    <updated>2015-08-12T17:00:00-07:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember 2.0 is not a traditional major release. After thirteen point releases in
almost two years, we're taking a turn to focus entirely on sweeping out
built-up cruft as a foundation for continued progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember 2.0 only removes features that were...&lt;/strong&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember 2.0 is not a traditional major release. After thirteen point releases in
almost two years, we&amp;#39;re taking a turn to focus entirely on sweeping out
built-up cruft as a foundation for continued progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember 2.0 only removes features that were deprecated as of Ember 1.13, so
apps that run on Ember 1.13 without any deprecation warnings should run
without issues on Ember 2.0.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;New applications should begin using Ember 2.0 today. Apps requiring Ember-Data
should use Ember-Data 2.0.0-beta.1 (2.0 release coming shortly!).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_new-features-in-ember-js-2-0'&gt;New Features in Ember.js 2.0&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;&amp;lt;This space intentionally left blank!&amp;gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Major releases of most libraries try to do two things. They introduce new APIs,
and remove deprecated ones. Our release focuses on doing one thing well:
&lt;strong&gt;Instead of introducing new features, the goal of Ember 2.0 is to remove
accumulated cruft.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since Ember 1.0, adherence to semantic versioning has helped us grow an amazing
community. Ember powers extremely ambitious applications, and most of those
applications have been able to move forward over 13+ releases as new features
arrived.&lt;/p&gt;

&lt;p&gt;We are committed to giving every Ember codebase a path into 2.x. To ensure
this, we&amp;#39;ve flagged everything removed in 2.0 with a deprecation in the 1.x
series. &lt;strong&gt;If your app runs on Ember 1.13 without raising deprecations, it
should run on 2.0.&lt;/strong&gt; There are no new features to adapt to or adopt.&lt;/p&gt;

&lt;p&gt;In the first few releases in Ember 2.x, we plan to land a variety of exciting
features. We are all the more excited that thousands of existing apps will be
ready to use them immediately. More about this below.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_removed-apis'&gt;Removed APIs&lt;/h4&gt;
&lt;p&gt;Internally, we&amp;#39;ve taken to calling Ember 2.0 a &amp;quot;garbage collection&amp;quot; release.
Two years is a lot of framework development, and there are many things dropped
in today&amp;#39;s release.&lt;/p&gt;

&lt;p&gt;Developers migrating forward will find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="http://emberjs.com/deprecations/v1.x/"&gt;1.x Deprecation Guide&lt;/a&gt; contains
a summary and migration path for many deprecations since Ember 1.7.
Additionally, this guide is linked to from deprecation messages in your
browser&amp;#39;s console.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/emberjs/ember-inspector#ember-inspector-"&gt;Ember Inspector&lt;/a&gt;
is an essential tool for debugging Ember apps, and provides some tooling for
managing deprecations.&lt;/li&gt;
&lt;li&gt;Core team members &lt;a href="https://twitter.com/rwjblue"&gt;Robert Jackson&lt;/a&gt; and
&lt;a href="https://twitter.com/mixonic"&gt;Matthew Beale&lt;/a&gt; published the
&lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt;
addon in July. This tool helps to manage upgrades to your codebase through
deprecation messages. Watch Robert present on upgrade workflows in this
&lt;a href="https://www.youtube.com/watch?v=ltzN4v-ymo4&amp;amp;feature=youtu.be&amp;amp;t=1h25m55s"&gt;NYC meetup video&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/rwjblue/ember-debug-handlers-polyfill"&gt;ember-debug-handlers-polyfill&lt;/a&gt;
addon provides a future-safe API for writing your own upgrade tooling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the major API removals follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Views&lt;/strong&gt; have been removed in Ember 2.0. Components, which provide better
isolation and scoping semantics, fulfill the use-cases views were introduced
for.&lt;/p&gt;

&lt;p&gt;We recognize that existing apps will not complete their migration away from
views for several months, so we have published the
&lt;a href="https://github.com/emberjs/ember-legacy-views"&gt;ember-legacy-views&lt;/a&gt;
compatibility addon, that will allow you to spread out the transition over more
releases. We are committed to maintain support for this addon until at least
Ember 2.6.&lt;/p&gt;

&lt;p&gt;If you are building a new application, the use-case for views have completely
been subsumed by Components. Existing apps should refactor away from the
&lt;code&gt;{{view}}&lt;/code&gt; helper and &lt;code&gt;Ember.View&lt;/code&gt;s in favor of Components.&lt;/p&gt;

&lt;p&gt;However, existing applications that make use of top-level Views do not need to
immediately refactor those views to components. The future Routable Components
will provide a softer transition path for this use-case and we commit to
support the compatibility addon until the community has had a chance to
transition to Routable Components.&lt;/p&gt;

&lt;p&gt;Similarly, the use-cases for &lt;strong&gt;Controllers&lt;/strong&gt; have largely been eliminated.&lt;/p&gt;

&lt;p&gt;As with views, we have published the
&lt;a href="https://github.com/emberjs/ember-legacy-controllers"&gt;ember-legacy-controllers&lt;/a&gt;
compatibility addon that you can use to spread out the transition. This addon
will also be maintained until at least Ember 2.6.&lt;/p&gt;

&lt;p&gt;If you are building a new application, you should almost never need controllers
except to manage query parameters and communicate with the route (ala
&lt;code&gt;transitionTo&lt;/code&gt;). For these cases, Ember 2.0 retains support for top-level
controllers with no addon required. While we plan to completely replace these
use-cases during the 2.x series, everything that works without the
compatibility addon will continue to work until 3.0.&lt;/p&gt;

&lt;p&gt;Existing applications should refactor away from using the &lt;code&gt;{{controller}}&lt;/code&gt;
property, use of proxying controllers (&lt;code&gt;ArrayController&lt;/code&gt; and
&lt;code&gt;ObjectController&lt;/code&gt;), &lt;code&gt;itemController&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;However, existing applications that make use of top-level Controllers do not
need to immediately eliminate those controllers. As with top-level views, the
future Routable Components will provide a softer transition for this use-case
and we commit to support the compatibility addon until the community has had a
chance to transition to Routable Components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReduceComputed and ArrayComputed&lt;/strong&gt; have been made obsolete by the Glimmer
rendering engine introduced in Ember 1.13. These APIs allowed array operations
to be performed without creating new arrays. Glimmer&amp;#39;s value diffing makes this
unnecessary. Computed property macros that operate on arrays are still present,
but they are simply not backed by &lt;code&gt;ReduceComputed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context shifting in templates&lt;/strong&gt; (&lt;code&gt;{{#each}}&lt;/code&gt; and &lt;code&gt;{{#with}}&lt;/code&gt; without block
params) is removed in Ember 2.0. For any template, there is now only one this
and it cannot be changed for part of that template by any helper. This makes
templates easier to reason about, and unlocks opportunities for performance
improvements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IE8 support&lt;/strong&gt; has been dropped for Ember 2.0. For the 2.x series, IE9+ will
be supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legacy Handlebars helpers&lt;/strong&gt; are removed in favor of the &lt;code&gt;Ember.Helper&lt;/code&gt; API.
This API does not provide a mechanism for helpers to take a block, but does
introduce support for nested helpers which can be used in concert with built-in
helpers (like &lt;code&gt;{{#if}}&lt;/code&gt; and &lt;code&gt;{{#each}}&lt;/code&gt;) to achieve the same ends.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.0.0"&gt;CHANGELOG.md&lt;/a&gt;
for an authoritative list of cleanups.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_the-road-ahead'&gt;The Road Ahead&lt;/h4&gt;
&lt;p&gt;Over the last few releases of Ember 1.x, we added a large number of new
features. These additions, including a whole new rendering engine, were
introduced while maintaining backwards compatibility. Unsurprisingly,
maintaining support for the semantics of two rendering engines (among other
things) introduced a large amount of cruft. Continuing to provide backwards
compatible legacy APIs has a non-trivial impact on the performance of Ember
applications, and on the project’s momentum.&lt;/p&gt;

&lt;p&gt;Ember 2.0 allowed us to purge much of that built-up cruft. That was no small
task; removing code, documenting deprecations, and building new workflows for
managing these changes would not have happened without lots of hands. It was an
incredible effort, and we&amp;#39;d like to thank the community for making it happen.&lt;/p&gt;

&lt;p&gt;With the garbage collection sweep out of our way, we can continue to expand on
the foundation solidified in Ember’s 1.x series.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_improved-release-cadence'&gt;Improved Release Cadence&lt;/h5&gt;
&lt;p&gt;Since Ember 1.0, we have followed &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;,
working very hard to maintain public API compatibility while adding new
features. In the lead-up to breaking changes in Ember 2.0, we made a number of
mistakes that caused our users to experience a great deal of churn.&lt;/p&gt;

&lt;p&gt;While we successfully followed our existing policies regarding deprecation
before removal, and ensured that each deprecated feature had a viable
replacement, we did not do a good job of distinguishing between different kinds
of deprecations. Additionally, many deprecations landed very late and all at
once. These factors combined made the entire process feel overwhelming.&lt;/p&gt;

&lt;p&gt;The feeling of &amp;quot;churn&amp;quot; is contrary to all our release process goals. In
addition to the continued maintenance of a six-week release cycle, we have a
number of tweaks to the process planned for 2.x. These are intended to help us
avoid a similar problem late in the 2.x cycle.&lt;/p&gt;

&lt;p&gt;Some examples of improvements are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LTS (Long-Term Support) Releases&lt;/strong&gt; (&lt;a href="https://github.com/emberjs/rfcs/pull/56"&gt;RFC #56&lt;/a&gt;),
which can give users who want to upgrade less often than every six week a
sanctioned way to do so.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mandatory docs&lt;/strong&gt;. No new features will be added to the Ember 2.0 release
channel without accompanying documentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More informative deprecations&lt;/strong&gt;. All deprecations will include which
release their behavior will be removed in, as well as a link to transition
instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved deprecation tooling&lt;/strong&gt;. More informative deprecations allow us to
make the Ember inspector&amp;#39;s deprecation pane smarter, and more useful for
incrementally working through deprecations. In particular, we can avoid
nagging you (by default) about removals that will not happen until far in the
future. For more information see
&lt;a href="https://github.com/emberjs/rfcs/pull/65"&gt;RFC #65&lt;/a&gt; and the included comments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Svelte Builds&lt;/strong&gt;, which allow you to ask Ember CLI not to include deprecated
features you are no longer using. This will reduce pressure on future major
releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-2-x-themes'&gt;Ember 2.x Themes&lt;/h4&gt;
&lt;p&gt;In addition to a better release process, you can look forward to several
high-level areas of improvement throughout the 2.x series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alignment with JavaScript&lt;/strong&gt;. Throughout 2.x, we will continue our efforts to
align Ember with ES6 and future versions of JavaScript. As the JavaScript
decorator proposal stabilizes, and as transpilers improve their
implementations, we plan to adapt computed properties and other APIs to that
syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript Modules&lt;/strong&gt;. We will also continue to evolve further towards a
modules development style and away from a globals style. Among other things,
this will allow us to more aggressively automate the removal of dead code
paths.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stabilization and Integration&lt;/strong&gt;. The Ember ecosystem will continue to
stabilize and integrate tightly. Ember-Data and Ember CLI will be versioned in
lockstep with Ember itself. Putting these projects on the &amp;quot;release train&amp;quot; with
Ember will mean they adhere to the same backwards compatible and incremental
change policies as Ember did through 1.x.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember Data&lt;/strong&gt;. With the release of Ember 2.0, Ember Data is now a stable part
of Ember&amp;#39;s releases. It will adhere to Semantic Versioning policies like Ember
itself, and every release of Ember will include a compatible release of Ember
Data. Along those lines, Ember Data will not make any breaking changes until
3.0.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_new-features-in-the-pipeline'&gt;New Features in the Pipeline&lt;/h5&gt;
&lt;p&gt;Many of our other plans have already been proposed via the RFC process and
discussions on GitHub, but here&amp;#39;s a recap.&lt;/p&gt;

&lt;p&gt;We are actively working on the implementation of these features, and expect
them to land gradually over several releases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angle-Bracket Components and One-Way Data Flow&lt;/strong&gt;. Ember 2.x will transition
to angle-bracket components. For example &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt; instead of
&lt;code&gt;{{my-button}}&lt;/code&gt;. These will operate with one-way binding as part of a larger
transition to a &amp;quot;data down, actions up&amp;quot;, or &amp;quot;DDAU&amp;quot;, style of programming that
you will read about as features land. We expect these components to land in
2.2 and be refined over the next few releases. See
&lt;a href="https://github.com/emberjs/rfcs/pull/60"&gt;RFC #60&lt;/a&gt; and
&lt;a href="https://github.com/emberjs/ember.js/pull/12011"&gt;PR #12011&lt;/a&gt; for more details
about our progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pods&lt;/strong&gt;. We are also actively working on finalizing the pods directory layout
for applications, which makes it easier to group related parts of your
application together. This change will be completely opt-in, and existing
layouts will continue to work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Routable Components&lt;/strong&gt;. After angle-bracket components and the pods layout
land, we will be able to transition the last few use-cases for controllers to
the much-anticipated Routable Components.
&lt;a href="https://github.com/emberjs/rfcs/pull/38"&gt;RFC #38&lt;/a&gt; and
&lt;a href="https://github.com/emberjs/ember.js/pull/11939"&gt;PR #11939&lt;/a&gt; track our progress
so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FastBoot&lt;/strong&gt;, Ember&amp;#39;s alpha release server-side pre-rendering library, will
continue to improve and stabilize over the 2.x lifecycle. Find it on GitHub as
&lt;a href="https://github.com/tildeio/ember-cli-fastboot"&gt;ember-cli-fastboot&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
