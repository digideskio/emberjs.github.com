<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2015-02-06T19:00:00-05:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember.js 1.10.0 and 1.11 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html"/>
    <id>http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html</id>
    <published>2015-02-06T19:00:00-05:00</published>
    <updated>2015-02-06T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.10.0 and the
first beta in the 1.11 series. This comes as the tenth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.10 release represents the effort of at least 50...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.10.0 and the
first beta in the 1.11 series. This comes as the tenth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.10 release represents the effort of at least 50 contributors
across over 553 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-htmlbars-templating-engine'&gt;The HTMLBars Templating Engine&lt;/h2&gt;
&lt;p&gt;Throughout 2014 the Ember.js community has poured its shared effort into
a new templating solution. This new library, dubbed HTMLBars, makes available
features and performance improvements impossible to support with Handlebars
(the previous library). We are delighted to announce the inclusion of
the HTMLBars templating engine in Ember.js 1.10.&lt;/p&gt;

&lt;p&gt;HTMLBars will enable the implementation of several APIs described in
&lt;a href="https://github.com/emberjs/rfcs/pull/15"&gt;The Road to Ember 2.0&lt;/a&gt;, and contributes
to our continued improvement of rendering performance. Additionally,
it will allow us to continue supporting all Ember 1.x template syntax.&lt;/p&gt;

&lt;p&gt;This long-term effort would not have succeeded without the continued
contributions of the Ember community and core team. In no particular
order and with apologies to anyone we&amp;#39;ve missed we would like to thank
&lt;a href="http://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;, &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt;,
&lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;, &lt;a href="http://twitter.com/nerd20"&gt;@nerd20&lt;/a&gt;,
&lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;,
&lt;a href="https://twitter.com/salzhrani"&gt;@salzhrani&lt;/a&gt;, &lt;a href="http://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;,
&lt;a href="http://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;, &lt;a href="http://github.com/oneeman"&gt;oneeman&lt;/a&gt;,
&lt;a href="http://twitter.com/kpdecker"&gt;@kpdecker&lt;/a&gt; and the many alpha and beta
testers who provided feedback and bug reports. You are the stuff &amp;quot;stability without
stagnation&amp;quot; is made of.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-10'&gt;New Features in Ember.js 1.10&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_htmlbars-0-8-5'&gt;HTMLBars 0.8.5&lt;/h4&gt;
&lt;p&gt;Ember.js 1.10 is dependent on HTMLBars 0.8.5. To ease this and later template
library version changes, Ember&amp;#39;s template compiler will be packaged as a
part of the release files. For example, a JSBin in Ember 1.9 would need to be
updated from:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v2.0.0.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.9.1/ember.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.10.0/ember-template-compiler.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.10.0/ember.debug.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ember-template-compiler.js&lt;/code&gt; is only required for template compilation. The
runtime dependencies for HTMLBars are built into the framework file.&lt;/p&gt;

&lt;p&gt;To smoothly upgrade to 1.10 and HTMLBars, Ember-CLI users should update to a
version at or after 0.1.12 and then remove
their application&amp;#39;s Handlebars dependency. Ember App-Kit users should upgrade
to Ember-CLI.&lt;/p&gt;

&lt;p&gt;Ember-Rails users should upgrade to version 0.16.1, then remove their Handlebars
dependency.&lt;/p&gt;

&lt;p&gt;Developers of applications that follow a non-standard build pipeline should
review the instructions &lt;a href="/blog/2015/02/05/compiling-templates-in-1-10-0.html"&gt;published by Robert Jackson this week&lt;/a&gt;
and join the conversation at &lt;a href="http://discuss.emberjs.com/"&gt;discuss.emberjs.com&lt;/a&gt;
or on IRC.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.8 introduced a performance regression that we expected to re-coup in
the 1.10 release. In December the team at &lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt; created the
&lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; repo.
This project aids Ember developers in profiling and measuring performance in the
framework.&lt;/p&gt;

&lt;p&gt;Using these benchmarks, we&amp;#39;re pleased to report a twelve percent improvement
in common rendering scenarios between 1.7 and 1.10, and as much as a fifty
percent improvement between 1.9 and 1.10.&lt;/p&gt;

&lt;p&gt;Better rendering and general framework performance continue to be a priority for
the core team and community. Specific goals include reactive rendering for
HTMLBars, more optimized metal views, limiting observation, and refinements to the Ember
object model.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_chained-else-blocks'&gt;Chained Else Blocks&lt;/h4&gt;
&lt;p&gt;HTMLBars is built using the Handlebars parser, and will continue to gain
features related to template syntax. Ember 1.10 features support for chained
else helpers, the most common use being &lt;code&gt;else if&lt;/code&gt;. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isAtWork&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  Ship that code!
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isReading&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  You can finish War and Peace eventually...
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Chained else helpers work with any &lt;code&gt;else&lt;/code&gt;, including those of &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;each&lt;/code&gt;
helpers.&lt;/p&gt;

&lt;p&gt;You can read more about the implemetation &lt;a href="https://github.com/wycats/handlebars.js/pull/892"&gt;in the Handlebars repo&lt;/a&gt;.
Thanks to &lt;a href="http://twitter.com/kpdecker"&gt;@kpdecker&lt;/a&gt; for this improvement.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_block-params'&gt;Block Params&lt;/h4&gt;
&lt;p&gt;Ember 1.10 introduces block parameters. Block params provide consistent
scope to templates, and allow components to pass internal values to a downstream
scope.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! available on the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;cars&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;car&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;car.manufacturer&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;make&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;make.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! still the controller scope }}&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Preserving template context results in easier to read templates, and passing
variables into child scopes allows for new patterns of component composition.&lt;/p&gt;

&lt;p&gt;Block params are passed from a template via the &lt;code&gt;yield&lt;/code&gt; helper. For example, this
component yields the &lt;code&gt;fullName&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/components/x-customer.js }}&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({

  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;var&lt;/span&gt; customer = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="keyword"&gt;return&lt;/span&gt; [customer.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), customer.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)].join(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer.firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer.lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;age&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; (&lt;span class="keyword"&gt;new&lt;/span&gt; Date() - &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;birthday&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) / (&lt;span class="integer"&gt;86400000&lt;/span&gt; * &lt;span class="integer"&gt;365&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;birthday&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/components/x-customer.hbs }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;customer&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;yield&lt;/span&gt; &lt;span class="attribute-name"&gt;fullName&lt;/span&gt; &lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/index.hbs }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;layout&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;x-customer&lt;/span&gt; &lt;span class="attribute-name"&gt;customer&lt;/span&gt;=&lt;span class="attribute-value"&gt;model&lt;/span&gt; &lt;span class="attribute-name"&gt;birthday&lt;/span&gt;=&lt;span class="attribute-value"&gt;model.birthday&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt; &lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    Hello, &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;. You are &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; years old.
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;x-customer&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for the implementation of this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_injected-properties'&gt;Injected Properties&lt;/h4&gt;
&lt;p&gt;Ember 1.x has exposed two APIs for managing dependency injection. The first is
the application initializer API, using &lt;code&gt;register&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; methods on an
application instance. The second allows configuration of an injection on
controllers via &lt;code&gt;needs&lt;/code&gt;. You can read more about these patterns in
&lt;a href="/guides/understanding-ember/dependency-injection-and-service-lookup/"&gt;the dependency injection guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new injected properties offer a more declarative API for dependency injection.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Ember.inject.service()&lt;/code&gt; to inject a service with the same name as the property
it is injected as. In this example, the &lt;code&gt;storage&lt;/code&gt; service is injected onto the
&lt;code&gt;storage&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;storage&lt;/span&gt;: Ember.inject.service()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Passing a name to the &lt;code&gt;service()&lt;/code&gt; method allows a different service to be injected.
For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;storage&lt;/span&gt;: Ember.inject.service(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;local-storage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition to injecting services, controllers can be injected with &lt;code&gt;Ember.inject.controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, these injections are lazy. When used within a unit test, a stubbed service can
be passed during &lt;code&gt;create&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;a value is saved on storage&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; component = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
    &lt;span class="key"&gt;storage&lt;/span&gt;: {
      &lt;span class="function"&gt;write&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
        ok(&lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;value was written&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      }
    }
  });

  &lt;span class="keyword"&gt;var&lt;/span&gt; element = &lt;span class="local-variable"&gt;this&lt;/span&gt;.append();
  element.click();
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Refer to the &lt;a href="/api/#method_inject_service"&gt;API documentation&lt;/a&gt; to read about this new feature in
detail.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/slindberg"&gt;slindberg&lt;/a&gt; for his implementation of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;As Ember.js moves forward, various APIs are deprecated to allow for their
removal in a later major release (such as 2.0). The
&lt;a href="/guides/deprecations/"&gt;deprecations guide&lt;/a&gt; summarizes
deprecations and demonstrates how to update to a new API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The explicit &lt;code&gt;{{bind}}&lt;/code&gt; helper has been deprecated. This helper has
long been marked private, and was a legacy Sproutcore
feature. This helper will be removed in Ember 1.11.&lt;/li&gt;
&lt;li&gt;Quote-less outlet names are deprecated in 1.10. An example of this is
&lt;code&gt;{{outlet modal}}&lt;/code&gt;, which should be re-written as &lt;code&gt;{{outlet &amp;quot;modal&amp;quot;}}&lt;/code&gt;.
This ensures the outlet helper is consistent with others, where unquoted
words are values and not string literals.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;beforeObserver&lt;/code&gt; feature is deprecated in Ember 1.10. Before observers
are rarely used, but introduce significant overhead to the observer system
in general. For observer use that requires the previous value of a property
be known, implementing a cache is simple and more efficient. Read more about
how to do this in &lt;a href="/guides/deprecations/#toc_deprecate-beforeobservers"&gt;the deprecation guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Observing the &lt;code&gt;childViews&lt;/code&gt; array of a &lt;code&gt;ContainerView&lt;/code&gt; is deprecated.&lt;/li&gt;
&lt;li&gt;Setting the &lt;code&gt;childViews&lt;/code&gt; property on a view definition is deprecated in
1.10. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="key"&gt;childViews&lt;/span&gt;: [ &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;childA&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, ChildB ],
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This use of &lt;code&gt;childViews&lt;/code&gt; is inconsistent with other uses throughout Ember, and
as a result is difficult to implement with good performance. Explicitly creating
views upon initialization is preferred:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(&lt;span class="local-variable"&gt;this&lt;/span&gt;.childA));
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(ChildB));
  },
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-11-beta'&gt;New Features in Ember.js 1.11 beta&lt;/h2&gt;
&lt;p&gt;Ember.js 1.11 beta continues a series of releases iterating the framework
toward our 2.0 goals. In six weeks, these and a few other features will
be declared stable.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_inline-if'&gt;Inline if&lt;/h4&gt;
&lt;p&gt;In 1.11 Ember&amp;#39;s &lt;code&gt;if&lt;/code&gt; helper can be used in the inline form:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/marciojunior_me"&gt;@marciojunior_me&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_each-with-index'&gt;Each with Index&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; helper will support an &lt;code&gt;index&lt;/code&gt; block param in Ember 1.11:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;people&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! The first index value will be 0 }}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-attribute-syntax'&gt;Bound Attribute Syntax&lt;/h4&gt;
&lt;p&gt;Current Ember developers are familiar with the &lt;code&gt;bind-attr&lt;/code&gt; syntax, used
to declare an attribute binding on an HTML element. An original
motivation for HTMLBars was to improve on this syntax.&lt;/p&gt;

&lt;p&gt;Ember 1.11 introduces a more intuitive API for attribute binding. For
example, here the &lt;code&gt;color&lt;/code&gt; variable is bound to the class of a div:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The inline if helper can also be used in these contexts:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For some attributes, like the &lt;code&gt;disabled&lt;/code&gt; boolean, passing a literal value
is desirable. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To allow the data-binding of non-string values to boolean properties and
custom element properties, bound attributes are implemented with a
&lt;strong&gt;property-first&lt;/strong&gt; setter.&lt;/p&gt;

&lt;p&gt;When binding to an attribute, Ember first checks to see if that attribute is a
property of the element&amp;#39;s DOM node (with normalization of capitalization). If it
is, the value is set with a property. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// disabled is a property of input elements, so...&lt;/span&gt;
input.disabled = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attribute is not present as a property, then its value is set as an
attribute:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// class is not a property of div elements, do...&lt;/span&gt;
div.setAttribute(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;red&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For SVG attributes and the style attribute, we&amp;#39;ve made a exceptions to this pattern.
Despite these exceptions, the property-first rule is a good way to describe what is
happening behind the scenes. In practice, the binding syntax feels natural.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
and &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt; for their effort on the design and implementation
of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_named-substates'&gt;Named Substates&lt;/h4&gt;
&lt;p&gt;Two routing substates exist for Ember routes. The &lt;code&gt;loading&lt;/code&gt; substate will be entered
if the async hooks of a route are still processing, and the &lt;code&gt;error&lt;/code&gt; substate will be
entered when an async hook promise is rejected.&lt;/p&gt;

&lt;p&gt;Substates are sibling routes. When the &lt;code&gt;new&lt;/code&gt; route of &lt;code&gt;cars.new&lt;/code&gt; is loading, the &lt;code&gt;cars.loading&lt;/code&gt;
substate is entered. The &lt;code&gt;application&lt;/code&gt; route has no parent namespace to nest its siblings.
This makes using the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; substates impossible for an application route.&lt;/p&gt;

&lt;p&gt;Named substates add a new lookup method for substates. The name of the route is pre-pended
onto the substate. So a valid loading substate for &lt;code&gt;application&lt;/code&gt; can be defined as
&lt;code&gt;application_loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://twitter.com/machty"&gt;@machty&lt;/a&gt; for landing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_component-helper'&gt;Component Helper&lt;/h4&gt;
&lt;p&gt;Ember components can be bound via the &lt;code&gt;component&lt;/code&gt; helper. For example this logic
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isRed&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-red&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isBlue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-blue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isGreen&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-green&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can now be replaced by a computed property and the &lt;code&gt;component&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;component&lt;/span&gt; &lt;span class="attribute-name"&gt;colorComponentName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;colorComponentName&lt;/code&gt; should have a value of &lt;code&gt;x-red&lt;/code&gt;, &lt;code&gt;x-blue&lt;/code&gt; etc. As
the value of the property changes, the rendered component will also change.&lt;/p&gt;

&lt;p&gt;A big thank you to &lt;a href="https://twitter.com/lukemelia"&gt;@lukemelia&lt;/a&gt; for shipping
this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-11'&gt;Notable Deprecations in 1.11&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.11:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ObjectController&lt;/code&gt; will be removed in Ember 2.0. In Ember 1.11,
both explicitly using an &lt;code&gt;ObjectController&lt;/code&gt; and using the proxying behavior
of a generated &lt;code&gt;ObjectController&lt;/code&gt; will raise deprecation warnings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the features included in Ember 1.12 are developed, additional deprecations
may be added to the 1.11 release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.10.0/CHANGELOG.md"&gt;Ember.js 1.10.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.11.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.11.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Using Ember? Please take ten minutes to share your
feedback by participating in the &lt;a href="http://goo.gl/forms/6yIsF3TNsQ"&gt;2015 Ember Community Survey&lt;/a&gt;. Open
until February 20th.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Compiling templates with Ember 1.10</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/05/compiling-templates-in-1-10-0.html"/>
    <id>http://emberjs.com/blog/2015/02/05/compiling-templates-in-1-10-0.html</id>
    <published>2015-02-04T19:00:00-05:00</published>
    <updated>2015-02-04T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;As many of you know, Ember 1.10 will be the first version of Ember that uses &lt;a href="https://github.com/tildeio/htmlbars"&gt;HTMLBars&lt;/a&gt; as its templating engine. With this change you may need to change the way you compile your templates.&lt;/p&gt;

&lt;p&gt;The HTMLBars API is evolving and not 1.0.0 yet, so to ensure...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;As many of you know, Ember 1.10 will be the first version of Ember that uses &lt;a href="https://github.com/tildeio/htmlbars"&gt;HTMLBars&lt;/a&gt; as its templating engine. With this change you may need to change the way you compile your templates.&lt;/p&gt;

&lt;p&gt;The HTMLBars API is evolving and not 1.0.0 yet, so to ensure that templates are compiled compatibly with your Ember version we have updated the Ember build system to generate a &lt;code&gt;ember-template-compiler.js&lt;/code&gt; file alongside every build of Ember. This template compiler can be used server-side for precompilation or in the browser to compile templates on the fly. If you do not need to compile templates at runtime (in the browser) the &lt;code&gt;ember.debug.js&lt;/code&gt; or &lt;code&gt;ember.prod.js&lt;/code&gt; file alone is sufficient. There is no need to include a runtime dependency. This is a departure from previous versions, where you would always include either &lt;code&gt;handlebars.js&lt;/code&gt; or &lt;code&gt;handlebars.runtime.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most of the time you will use a third party library like &lt;a href="https://github.com/ember-cli/ember-cli"&gt;ember-cli&lt;/a&gt;, &lt;a href="https://github.com/rondale-sc/ember-cli-htmlbars"&gt;ember-cli-htmlbars&lt;/a&gt;, or &lt;a href="https://github.com/dgeb/grunt-ember-templates"&gt;grunt-ember-templates&lt;/a&gt; to precompile templates, but this post will discuss how libraries like this should work internally.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_server-side-compilation'&gt;Server Side Compilation&lt;/h3&gt;
&lt;p&gt;If possible, it is definitely a best practice to compile your templates server side. This is much faster due to less total size (you don&amp;#39;t need the compiler on the client) and less work that the app needs to do.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-1-0-through-1-9'&gt;Ember 1.0 through 1.9&lt;/h4&gt;
&lt;p&gt;In prior versions, you would typically use the &lt;code&gt;ember-template-compiler&lt;/code&gt; NPM package that corresponded to your Ember version to precompile your templates. That might look something like the following:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; compiler = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-template-compiler&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; input = fs.readFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/template.hbs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;span class="keyword"&gt;var&lt;/span&gt; template = compiler.precompile(input, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; output = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;export default Ember.Handlebars.template(&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + template + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;);&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

fs.writeFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/output.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, output, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You would also need to include &lt;code&gt;handlebars.runtime.js&lt;/code&gt; in your final build&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-1-10'&gt;Ember 1.10+&lt;/h4&gt;
&lt;p&gt;With Ember 1.10, you will use the &lt;code&gt;ember-template-compiler.js&lt;/code&gt; file that is paired with your Ember version. If you use our &lt;a href="https://github.com/components/ember"&gt;Bower repo&lt;/a&gt;, &lt;a href="https://rubygems.org/gems/ember-source"&gt;RubyGem&lt;/a&gt;, or simply download Ember from our &lt;a href="http://emberjs.com/builds/"&gt;builds site&lt;/a&gt; there is a &lt;code&gt;ember-template-compiler.js&lt;/code&gt; in the same path as &lt;code&gt;ember.debug.js&lt;/code&gt; and &lt;code&gt;ember.prod.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use this template compiler directly  and without additional requirements. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; compiler = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;./bower_components/ember/ember-template-compiler&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; input = fs.readFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/template.hbs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;span class="keyword"&gt;var&lt;/span&gt; template = compiler.precompile(input, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; output = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;export default Ember.HTMLBars.template(&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + template + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;);&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

fs.writeFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/output.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, output, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you will notice, the new API for server-side compilation is nearly identical to that of prior versions. The main change is the usage of the local &lt;code&gt;bower_components/ember/ember-template-compiler.js&lt;/code&gt; file as opposed to the NPM module.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_client-side-compilation'&gt;Client Side Compilation&lt;/h3&gt;
&lt;p&gt;Generally speaking, you should avoid compiling templates on the client, but there are times that you cannot avoid this. Live demo apps like &lt;a href="http://emberjs.jsbin.com"&gt;JSBin&lt;/a&gt; are one example.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-1-0-through-1-9'&gt;Ember 1.0 through 1.9&lt;/h3&gt;
&lt;p&gt;In prior versions of Ember you would need to ensure that the full version of &lt;a href="handlebarsjs.com"&gt;Handlebars.js&lt;/a&gt; was present to allow compiling of templates. Perhaps something like the following in your &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/handlebars.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember.prod.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_ember-1-10'&gt;Ember 1.10+&lt;/h3&gt;
&lt;p&gt;With Ember 1.10, you will include the &lt;code&gt;ember-template-compiler.js&lt;/code&gt; for your specific Ember version.  Something like the following:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember-template-compiler.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember.prod.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you include the &lt;code&gt;ember.debug.js&lt;/code&gt; file instead of a production file the compiler is still required.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_template-compilation-build-tools'&gt;Template Compilation Build Tools&lt;/h3&gt;
&lt;p&gt;There are any number of build tool libraries that are intended to make the server side compilation of templates easier. Here are just a few (please let us know of others):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rondale-sc/ember-cli-htmlbars"&gt;ember-cli-htmlbars&lt;/a&gt; - Can be used either as a standalone Broccoli plugin, or as an ember-cli addon.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dgeb/grunt-ember-templates"&gt;grunt-ember-templates&lt;/a&gt; - Works as a Grunt plugin. To precompile HTMLBars templates, you must supply specific parameters to your task definition as mentioned in &lt;a href="https://github.com/dgeb/grunt-ember-templates/pull/77"&gt;this PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbashford/mimosa-ember-htmlbars"&gt;mimosa-ember-htmbars&lt;/a&gt; - A plugin for the &lt;a href="http://mimosa.io/"&gt;mimosa&lt;/a&gt; build tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember-rails"&gt;ember-rails&lt;/a&gt; - The Rails Asset Pipeline plugin supports HTMLBars templates.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Inside FastBoot: Faking the DOM in Node</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/01/08/inside-fastboot-faking-the-dom-in-node.html"/>
    <id>http://emberjs.com/blog/2015/01/08/inside-fastboot-faking-the-dom-in-node.html</id>
    <published>2015-01-07T19:00:00-05:00</published>
    <updated>2015-01-07T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;As we &lt;a href="/blog/2014/12/22/inside-fastboot-the-road-to-server-side-rendering.html"&gt;announced in the inaugural blog post in our Inside FastBoot
series&lt;/a&gt;, we
have begun working on giving Ember.js developers the ability to run
their apps in Node.js. Once complete, this feature will allow your users
to see HTML and CSS right away...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;As we &lt;a href="/blog/2014/12/22/inside-fastboot-the-road-to-server-side-rendering.html"&gt;announced in the inaugural blog post in our Inside FastBoot
series&lt;/a&gt;, we
have begun working on giving Ember.js developers the ability to run
their apps in Node.js. Once complete, this feature will allow your users
to see HTML and CSS right away, with the JavaScript downloading
in the background and taking over once it has fully loaded.&lt;/p&gt;

&lt;p&gt;Before the holidays, we had already succeeded in getting the Ember.js
framework loading in Node.js (where it cannot rely on things like the
DOM) without throwing any exceptions. We also were able to get Ember
apps booting, parsing URLs, and completing most of the functionality
necessary to start the app, including loading controllers, routes and
models, etc.&lt;/p&gt;

&lt;p&gt;This week, we&amp;#39;ve made good progress on the next major piece of
functionality: allowing HTMLbars templates to render in Node.js where,
again, there is no native DOM available.&lt;/p&gt;

&lt;p&gt;So how does HTMLbars, a DOM-based templating library, work in an
environment without a DOM?&lt;/p&gt;

&lt;p&gt;As it turns out, we can introduce a &amp;quot;virtual DOM&amp;quot; into the server-side
environment, implemented in pure JavaScript. That&amp;#39;s exactly what we&amp;#39;ve
done, thanks to the work of Kris Selden and his &lt;a href="https://github.com/krisselden/simple-dom"&gt;simple-dom&lt;/a&gt;
library.&lt;/p&gt;

&lt;p&gt;Importantly, &lt;code&gt;simple-dom&lt;/code&gt; implements a very, very small subset of the WHATWG
DOM specification, optimized for performance, and for the requirements
of the Ember view layer. For example, it does not implement any part of
the DOM that would require the use of accessors; it&amp;#39;s just an attempt to
faithfully represent the DOM as a &lt;strong&gt;data structure&lt;/strong&gt;, not its complete
API surface. (If you need the whole enchilada, check out something like
&lt;a href="https://github.com/tmpvar/jsdom"&gt;jsdom&lt;/a&gt;, which is much more complete.)&lt;/p&gt;

&lt;p&gt;While working on FastBoot, we have created a series of integration tests
we run in Node.js that verify everything is working correctly. In those
tests, we swap out the code that accesses the DOM (encapsulated inside
an object we call a &lt;code&gt;DOMHelper&lt;/code&gt;) with a version that uses a &lt;code&gt;Document&lt;/code&gt;
provided by &lt;code&gt;simple-dom&lt;/code&gt; rather than relying on the global &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This week, with our implementation of &amp;quot;the little DOM that could,&amp;quot; we were
able to get more and more sophisticated templates rendering to a string.&lt;/p&gt;

&lt;p&gt;First, we started with just a simple template that printed a string:
&lt;code&gt;&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we moved on to bound expressions, so &lt;code&gt;&amp;lt;h1&amp;gt;Hello {{location}}&amp;lt;/h1&amp;gt;&lt;/code&gt;
became &lt;code&gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday, we got &lt;code&gt;{{#if}}&lt;/code&gt; helpers and nested components working as
well.  (Other helpers likely work, we just have not written tests for
them yet.)&lt;/p&gt;

&lt;p&gt;Now that we have bare-bones rendering in place, we are theoretically
able to start booting Ember apps in Node.js, connecting their router
with a server-side routing library like Express, and serving up requests
as they come in.&lt;/p&gt;

&lt;p&gt;Next week, we&amp;#39;ll begin working on giving Ember CLI the ability to
compile Ember apps to be consumed by Node.js. Once that&amp;#39;s in place, our
plan is to start updating all of the tests in Ember&amp;#39;s test suite that
flex the templating and view layers, ensuring that they pass in a
DOM-less environment.&lt;/p&gt;

&lt;p&gt;Our goal is to have something alpha quality but useable as soon as
possible, so those with simpler apps can start taking advantage and
helping us test right away. As people run into incompatibilities in the
real world, we can incorporate fixes into the codebase and our test
suite and rapidly increase the number of compatible apps.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested in following along at home, you may want to star
these repos on GitHub to watch our progress:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js"&gt;https://github.com/emberjs/ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/krisselden/simple-dom"&gt;https://github.com/krisselden/simple-dom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tildeio/htmlbars"&gt;https://github.com/tildeio/htmlbars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ll have more for you in future posts in the Inside FastBoot series,
cataloging implementation challenges and successes, so stay tuned for
more.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.14.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/12/31/ember-data-1-0-beta-14-1-released.html"/>
    <id>http://emberjs.com/blog/2014/12/31/ember-data-1-0-beta-14-1-released.html</id>
    <published>2014-12-30T19:00:00-05:00</published>
    <updated>2014-12-30T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data v1.0.0-beta.14.1 is a bugfix release that adds sourcemaps
to your build pipeline in Ember CLI and Rails. Additionally support
for versions of Ember &amp;lt;= 1.7.1 have been removed. This was mentioned
in the &lt;a href="http://emberjs.com/blog/2014/12/25/ember-data-1-0-beta-14-released.html"&gt;beta.12 blogpost&lt;/a&gt;, and is now enforced...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data v1.0.0-beta.14.1 is a bugfix release that adds sourcemaps
to your build pipeline in Ember CLI and Rails. Additionally support
for versions of Ember &amp;lt;= 1.7.1 have been removed. This was mentioned
in the &lt;a href="http://emberjs.com/blog/2014/12/25/ember-data-1-0-beta-14-released.html"&gt;beta.12 blogpost&lt;/a&gt;, and is now enforced via an assertion
in the code and by your package manager files.&lt;/p&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.14 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/12/25/ember-data-1-0-beta-14-released.html"/>
    <id>http://emberjs.com/blog/2014/12/25/ember-data-1-0-beta-14-released.html</id>
    <published>2014-12-24T19:00:00-05:00</published>
    <updated>2014-12-24T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Due to a hiccup during the publishing step while releasing beta.13,
we've removed beta.13 from npm and instead published beta.14. This
release is available to you whether you are using npm and ember-cli,
rubygems, or bower. Of course, the builds are...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Due to a hiccup during the publishing step while releasing beta.13,
we&amp;#39;ve removed beta.13 from npm and instead published beta.14. This
release is available to you whether you are using npm and ember-cli,
rubygems, or bower. Of course, the builds are always available as static
files at &lt;a href="http://emberjs.com/builds"&gt;emberjs.com/builds&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_improvements'&gt;Improvements&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/terzicigor"&gt;Igor Terzic&lt;/a&gt;, &lt;a href="https://twitter.com/hjdivad"&gt;David Hamilton&lt;/a&gt;, and &lt;a href="https://twitter.com/stefanpenner"&gt;Stefan
Penner&lt;/a&gt; put in some great strides to improve performance around
how relationships work together in Ember Data. These performance changes
have wide-reaching effects into everything you do in Ember Data:
querying records, pushing records into the store, and creating records.
Since everyone on the Ember Data team works on real apps, we tested
these changes in our applications and saw improvements averaging 50% or
higher around pushing and creating records into the store.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_code-store-update-code-has-been-deprecated'&gt;&lt;code&gt;store.update()&lt;/code&gt; has been deprecated&lt;/h3&gt;
&lt;p&gt;Calling &lt;code&gt;store.update()&lt;/code&gt; has been deprecated in favor of &lt;code&gt;store.push()&lt;/code&gt;
now
handling partial payloads:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; post = store.push(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;,
  &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Ember.js is fantastic&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;author&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Tomster&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 'Ember.js is fantastic'&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 'Tomster'&lt;/span&gt;

store.push(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;author&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Tom Dale&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });

post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 'Ember.js is fantastic'&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// =&amp;gt; 'Tom Dale'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This also means that properties missing in the payload will no longer be
reset,
but stay the same.&lt;/p&gt;

&lt;p&gt;If you need to reset values to null, you should have your server
explicitly
send back null values in the payload:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;person&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;role&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Computer Science Pioneer&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you cannot change your API and you desire this behavior, you can
create a
serializer and do the logic yourself:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/serializers/person.js&lt;/span&gt;
&lt;span class="comment"&gt;// or App.PersonSerializer if you aren't using Ember CLI&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTSerializer.extend({
  &lt;span class="function"&gt;normalize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(type, hash, prop) {
    hash = &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(type, hash, prop);
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!hash.hasOwnProperty(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)){
      hash.firstName = &lt;span class="predefined-constant"&gt;null&lt;/span&gt;;
    }
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!hash.hasOwnProperty(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)){
      hash.lastName = &lt;span class="predefined-constant"&gt;null&lt;/span&gt;;
    }
    &lt;span class="keyword"&gt;return&lt;/span&gt; hash;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or if you want to restore the old behavior for all of your models:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/serializers/application.js&lt;/span&gt;
&lt;span class="comment"&gt;// or App.ApplicationSerializer&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTSerializer.extend({
  &lt;span class="function"&gt;normalize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(type, hash, prop) {
    hash = &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(type, hash, prop);
    type.eachAttribute(&lt;span class="keyword"&gt;function&lt;/span&gt;(key) {
      &lt;span class="keyword"&gt;if&lt;/span&gt; (!hash.hasOwnProperty(key)) {
        hash[key] = &lt;span class="predefined-constant"&gt;null&lt;/span&gt;;
      }
    }, &lt;span class="local-variable"&gt;this&lt;/span&gt;);
    &lt;span class="keyword"&gt;return&lt;/span&gt; hash;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_special-thanks'&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;A special thanks to &lt;a href="http://dockyard.com"&gt;Dockyard&lt;/a&gt; for sponsoring Igor during the
month of December!&lt;/p&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.9.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/12/23/ember-1-9-1-released.html"/>
    <id>http://emberjs.com/blog/2014/12/23/ember-1-9-1-released.html</id>
    <published>2014-12-22T19:00:00-05:00</published>
    <updated>2014-12-22T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today, the Ember team is pleased to announce the release of Ember.js
1.9.1. Ember 1.9.1 fixes one regression and introduces more conservative
escaping of attributes to help developers guard against inadvertent cross-site
scripting (XSS) vulnerabilities...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today, the Ember team is pleased to announce the release of Ember.js
1.9.1. Ember 1.9.1 fixes one regression and introduces more conservative
escaping of attributes to help developers guard against inadvertent cross-site
scripting (XSS) vulnerabilities.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_view-helper-instances'&gt;{{view}} Helper &amp;amp; Instances&lt;/h3&gt;
&lt;p&gt;The 1.9.0 release introduced a regression where the Handlebars
&lt;code&gt;{{view}}&lt;/code&gt; helper would only work with &lt;code&gt;Ember.View&lt;/code&gt; subclasses, not
instances. In 1.9.1, passing a view instance to the helper has been
fully restored.&lt;/p&gt;

&lt;p&gt;We intended to deprecate this functionality, not remove it entirely.
If your app was relying on this behavior, first, please accept our
apologies for the accidental regression. Second, please consider
refactoring your code to use components instead of views, as support for
this API will be removed in Ember 2.0.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_xss-improvements-for-bound-attributes'&gt;XSS Improvements for Bound Attributes&lt;/h3&gt;
&lt;p&gt;XSS vulnerabilities happen when you unintentionally put unescaped
user-supplied content into the DOM, creating a vector for attackers
to trick the browser into evaluating JavaScript that has the same access
to data as your legitimate JavaScript.&lt;/p&gt;

&lt;p&gt;Since its inception, Ember.js has automatically guarded against these
attacks by HTML-escaping any bound data that goes into the DOM. For
example, given this model data:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;script type=javascript&amp;gt;alert('pwned!');&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following template would not be vulnerable to XSS:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Hello, &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;firstName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s because Ember automatically replaces the &amp;lt; and &amp;gt; characters
with &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, there is still another potential exploit vector: bound attributes.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you display a profile for your users and allow them to supply
an arbitrary homepage that your app links to:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{!-- templates/user.hbs --}}&lt;/span&gt;
First Name: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;firstName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
Homepage: &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bind-attr&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="attribute-value"&gt;homepageUrl&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;homepageUrl&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While this template may look harmless at first glance, imagine a
malicious user provides the following data:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Guardians of Peace&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;homepageUrl&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;javascript:alert('Kim Jong Un is not to be
disrespected!')&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attacker can induce another user to click the profile link, you
will have inadvertently allowed their JavaScript to be evaluated in the
same origin as your trusted code.&lt;/p&gt;

&lt;p&gt;As of Ember 1.9.1, we will automatically escape any bound &lt;code&gt;href&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;
or &lt;code&gt;background&lt;/code&gt; attributes that contain a &lt;code&gt;javascript:&lt;/code&gt; or &lt;code&gt;vbscript:&lt;/code&gt;
protocol handler by prefixing their value with &lt;code&gt;unsafe:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are also releasing a new beta version of Ember 1.10 that contains
even more targeted fixes. Thanks to the additional power the HTMLbars
parser gives us, these attributes will only be escaped on elements where
they trigger a top-level navigation and thus a potential exploit: &lt;code&gt;a&lt;/code&gt;,
&lt;code&gt;body&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, and &lt;code&gt;img&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;d like to thank Mano and Manoharan from Zoho for responsibly disclosing
this potential XSS vector and working with us to find a solution that makes
it as easy as possible for developers to write secure apps.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.9.1/CHANGELOG.md"&gt;Ember.js 1.9.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.10.0-beta.2/CHANGELOG.md"&gt;Ember.js 1.10.0-beta.2 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
