<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2015-04-13T20:00:00-04:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Security and Bugfix Releases - Ember 1.10.1, 1.11.2, 1.11.3</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/04/14/security-and-bugfix-releases-ember-1-10-1-1-11-2-1-11-3.html"/>
    <id>http://emberjs.com/blog/2015/04/14/security-and-bugfix-releases-ember-1-10-1-1-11-2-1-11-3.html</id>
    <published>2015-04-13T20:00:00-04:00</published>
    <updated>2015-04-13T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Because developers trust Ember.js to handle sensitive customer data in
production, we take the security of the project extremely seriously. Ember
remains one of the few JavaScript projects that has a &lt;a href="/security/"&gt;clearly
outlined security policy&lt;/a&gt; and a
&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;low-traffic...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Because developers trust Ember.js to handle sensitive customer data in
production, we take the security of the project extremely seriously. Ember
remains one of the few JavaScript projects that has a &lt;a href="/security/"&gt;clearly
outlined security policy&lt;/a&gt; and a
&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;low-traffic mailing list exclusively for security
announcements&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_security-releases-ember-js-1-10-1-1-11-2'&gt;Security Releases: Ember.js 1.10.1, 1.11.2&lt;/h2&gt;
&lt;p&gt;Today we are announcing the release of Ember.js 1.10.1 and 1.11.2, which
contain an important security fix.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.10.1 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.10.0...v1.10.1"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.11.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.1...v1.11.2"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Additionally the stable, beta, and master branches have all been patched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These releases contain a fix for an XSS vulnerability that
you can learn more about on our security mailing list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/ember-security/nbntfs2EbRU"&gt;CVE-2015-1866&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is recommended that you update immediately. In order to ease
upgrading, the only change in each release is the security fix.&lt;/p&gt;

&lt;p&gt;We would like to thank Phillip Haines of &lt;a href="http://zestia.com/"&gt;Zestia&lt;/a&gt;
for working with us on identifying the issue and on the advisory process.&lt;/p&gt;

&lt;p&gt;If you discover what you believe may be a security issue in Ember.js, we
ask that you follow our &lt;a href="/security/"&gt;responsible disclosure
policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using Ember.js in production, please consider subscribing to
our &lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;security announcements mailing
list&lt;/a&gt;.  It is
extremely low-traffic and only contains announcements such as these.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_additional-reading'&gt;Additional Reading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/2013/04/05/announcing-the-ember-security-policy.html"&gt;Ember.js Security Policy Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/security/"&gt;Ember.js Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;Ember.js Security Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js-1-11-3'&gt;Ember.js 1.11.3&lt;/h2&gt;
&lt;p&gt;Ember.js 1.11.3 has also been released with a fix for nested &lt;code&gt;{{render}}&lt;/code&gt; helpers. This is
in addition to the security patch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.11.3 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.2...v1.11.3"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.11.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/04/04/ember-1-11-1-released.html"/>
    <id>http://emberjs.com/blog/2015/04/04/ember-1-11-1-released.html</id>
    <published>2015-04-03T20:00:00-04:00</published>
    <updated>2015-04-03T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today we are releasing Ember.js 1.11.1, a patch-level release of Ember that
fixes several regressions introduced in the 1.11.0 release.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_collectionview-with-code-attributebindings-code"&gt;CollectionView with &lt;code&gt;attributeBindings&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle much effort was put into making sure that &lt;code&gt;attributeBindings&lt;/code&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today we are releasing Ember.js 1.11.1, a patch-level release of Ember that
fixes several regressions introduced in the 1.11.0 release.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_collectionview-with-code-attributebindings-code'&gt;CollectionView with &lt;code&gt;attributeBindings&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle much effort was put into making sure that &lt;code&gt;attributeBindings&lt;/code&gt; used
the same logic that template bound attributes use.  Namely, that &lt;code&gt;attributeBindings&lt;/code&gt; use
HTMLBars&amp;#39; attribute helpers instead of jQuery&amp;#39;s.&lt;/p&gt;

&lt;p&gt;Unfortunately, this work lead to an error when &lt;code&gt;CollectionView&lt;/code&gt; instances were used with
&lt;code&gt;attributeBindings&lt;/code&gt; specified.  This regression is fixed in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_invalid-urls'&gt;Invalid URLs&lt;/h3&gt;
&lt;p&gt;Refactoring in the router initialization process lead to a bug that caused the browsers URL
to become out of sync with the correct URL when the back button was pressed while using 
&lt;code&gt;HistoryLocation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This regression is fixed in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_handlebars-helper-issues'&gt;Handlebars Helper Issues&lt;/h3&gt;
&lt;p&gt;A couple regressions were fixed for Handlebars helpers with 1.11.1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The inverse template (aka &lt;code&gt;{{else}}&lt;/code&gt; block) of Handlebars helpers was not properly accounted
for during the HTMLBars transition. Using an &lt;code&gt;{{else}}&lt;/code&gt; block with a Handlebars helper has
not been function since 1.9.0.&lt;/li&gt;
&lt;li&gt;The main block could not be rendered even if &lt;code&gt;options.fn()&lt;/code&gt; was called within the helper. This
regression was first introduced in 1.11.0-beta.4.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_incorrect-assertion-for-each-foos-itemcontroler-bar'&gt;Incorrect Assertion for {{each foos itemControler=&amp;#39;bar&amp;#39;}}&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle an issue regarding &lt;code&gt;{{each}}&lt;/code&gt; with prototype extensions disabled was reported.
The solution to that issue was to add a much more helpful assertion when an &lt;code&gt;ArrayController&lt;/code&gt;&amp;#39;s model
did not have &lt;code&gt;Ember.Array&lt;/code&gt; mixed into it. Unfortunately, this assertion also was triggered when the
model was simply &lt;code&gt;undefined&lt;/code&gt;. The assertion has been updated to ignore falsey &lt;code&gt;model&lt;/code&gt;&amp;#39;s in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_render-helper-with-view'&gt;{{render}} helper with View&lt;/h3&gt;
&lt;p&gt;In 1.11.0 using the &lt;code&gt;{{render}}&lt;/code&gt; helper (i.e. &lt;code&gt;{{render &amp;#39;post&amp;#39;}}&lt;/code&gt;) when a &lt;code&gt;PostView&lt;/code&gt; is present would not
provide the view with a template (it was assumed to be manually specified in the view via &lt;code&gt;templateName&lt;/code&gt;
property). As of 1.11.1 you can specify the &lt;code&gt;templateName&lt;/code&gt; in the &lt;code&gt;{{render}}&lt;/code&gt; helpers view (just like in 1.11.0),
but if you do not the views template will be defaulted to a template with the same name as the view itself.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.0...v1.11.1"&gt;Ember.js 1.11.0 to 1.11.1 commit log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v1.11.1"&gt;Ember.js 1.11.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.11.0 and 1.12 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html"/>
    <id>http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html</id>
    <published>2015-03-26T20:00:00-04:00</published>
    <updated>2015-03-26T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least 87 contributors
across over 646 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-11'&gt;New Features in Ember.js 1.11&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_bound-attribute-syntax'&gt;Bound Attribute Syntax&lt;/h4&gt;
&lt;p&gt;Current Ember developers are familiar with the &lt;code&gt;bind-attr&lt;/code&gt; syntax, used
to declare an attribute binding on an HTML element. An original
motivation for HTMLBars was to improve on this syntax.&lt;/p&gt;

&lt;p&gt;Ember 1.11 introduces a more intuitive API for attribute binding. For
example, here the &lt;code&gt;color&lt;/code&gt; variable is bound to the class of a div:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The inline if helper can also be used in these contexts:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For some attributes, like the &lt;code&gt;disabled&lt;/code&gt; boolean, passing a literal value
is desirable. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To allow the data-binding of non-string values to boolean properties and
custom element properties, bound attributes are implemented with a
&lt;strong&gt;property-first&lt;/strong&gt; setter.&lt;/p&gt;

&lt;p&gt;When binding to an attribute, Ember first checks to see if that attribute is a
property of the element&amp;#39;s DOM node (with normalization of capitalization). If it
is, the value is set with a property. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// disabled is a property of input elements, so...&lt;/span&gt;
input.disabled = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attribute is not present as a property, then its value is set as an
attribute:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// class is not a property of div elements, do...&lt;/span&gt;
div.setAttribute(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;red&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For SVG attributes and the style attribute, we&amp;#39;ve made an exception to this pattern
and simply use &lt;code&gt;setAttribute&lt;/code&gt; at all times.
Despite these exceptions, the property-first rule is a good way to describe what is
happening behind the scenes. In practice, the binding syntax feels natural.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
and &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt; for their effort on the design and implementation
of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_escaping-content-in-htmlbars'&gt;Escaping Content in HTMLBars&lt;/h4&gt;
&lt;p&gt;Bound attribute syntax introduces several new uses of mustaches
(the &lt;code&gt;{{&lt;/code&gt; syntax used in Ember templates). These new uses
come with new security considerations.&lt;/p&gt;

&lt;p&gt;Two notable new considerations are mustache use inside style
contexts, and inside JavaScript contexts. For example, without
escaping this
binding would be vulnerable to an XSS attack (via ActiveX
controls) in IE8:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;userProvidedWidth&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Implementing CSS and JavaScript context-sensitive escaping
will require further research and development. In Ember 1.11,
bound &lt;code&gt;style&lt;/code&gt; attributes will warn when the value is not marked safe.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy, log a warning }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The examples that follow are intended to demonstrate how this
works in practice. For example these bindings Just Work:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! Works as expected }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Warnings about unsafe bindings other than &lt;code&gt;style&lt;/code&gt; will be introduced
before Ember 2.0.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;onmouseover&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;alert(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="tag"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;px&lt;span class="tag"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Strings that are known to be adequately escaped can be
passed through the &lt;code&gt;htmlSafe&lt;/code&gt; function to mark them safe.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;layout&lt;/span&gt;: Ember.HTMLBars.compile(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;a style='width: {{someProperty}}px'&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="function"&gt;someProperty&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.String.htmlSafe(&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;));
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A less savory alternative is to use the &lt;code&gt;{{{&lt;/code&gt; &amp;quot;escaped mustache&amp;quot; style. There are
plans to improve escaped content as we approach 2.0.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_inline-if'&gt;Inline if&lt;/h4&gt;
&lt;p&gt;In 1.11 Ember&amp;#39;s &lt;code&gt;if&lt;/code&gt; helper can be used in the inline form:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/eaf4"&gt;@eaf4&lt;/a&gt; and &lt;a href="https://twitter.com/marciojunior_me"&gt;@marciojunior_me&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_each-with-index'&gt;Each with Index&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; helper will support an &lt;code&gt;index&lt;/code&gt; block param in Ember 1.11:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;people&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! The first index value will be 0 }}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/timmyce"&gt;@timmyce&lt;/a&gt; and &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_named-substates'&gt;Named Substates&lt;/h4&gt;
&lt;p&gt;Two routing substates exist for Ember routes. The &lt;code&gt;loading&lt;/code&gt; substate will be entered
if the async hooks of a route are still processing, and the &lt;code&gt;error&lt;/code&gt; substate will be
entered when an async hook promise is rejected.&lt;/p&gt;

&lt;p&gt;Substates are sibling routes. When the &lt;code&gt;new&lt;/code&gt; route of &lt;code&gt;cars.new&lt;/code&gt; is loading, the &lt;code&gt;cars.loading&lt;/code&gt;
substate is entered. The &lt;code&gt;application&lt;/code&gt; route has no parent namespace to nest its siblings.
This makes using the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; substates impossible for an application route.&lt;/p&gt;

&lt;p&gt;Named substates add a new lookup method for substates. The name of the route is pre-pended
onto the substate. So a valid loading substate for &lt;code&gt;application&lt;/code&gt; can be defined as
&lt;code&gt;application_loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://twitter.com/machty"&gt;@machty&lt;/a&gt; for landing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_component-helper'&gt;Component Helper&lt;/h4&gt;
&lt;p&gt;Ember components can be bound via the &lt;code&gt;component&lt;/code&gt; helper. For example this logic
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isRed&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-red&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isBlue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-blue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isGreen&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-green&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can now be replaced by a computed property and the &lt;code&gt;component&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;component&lt;/span&gt; &lt;span class="attribute-name"&gt;colorComponentName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;colorComponentName&lt;/code&gt; should either have a value of &lt;code&gt;x-red&lt;/code&gt;, or &lt;code&gt;x-blue&lt;/code&gt; etc. As
the value of the property changes, the rendered component will also change.&lt;/p&gt;

&lt;p&gt;A big thank you to &lt;a href="https://twitter.com/lukemelia"&gt;@lukemelia&lt;/a&gt; for shipping
this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.10 has favorable rendering performance compared to previous releases. We&amp;#39;re
pleased that Ember 1.11 builds upon that progress. Compared to 1.10, common list
rendering scenarios have improved by about twenty percent and view instance
creation is over twice as fast. These measurements were made using the
&lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Progress continues on the &lt;a href="https://github.com/emberjs/ember.js/pull/10501"&gt;Glimmer rendering engine&lt;/a&gt;
announced at EmberConf 2015. This dramatic performance improvement is expected to
land in Ember.js 1.13.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-11'&gt;Notable Deprecations in 1.11&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.11:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ObjectController&lt;/code&gt; will be removed in Ember 2.0. In Ember 1.11,
both explicitly using an &lt;code&gt;ObjectController&lt;/code&gt; and using the proxying behavior
of a generated &lt;code&gt;ObjectController&lt;/code&gt; will raise deprecation warnings. See the
&lt;a href="/guides/deprecations#toc_objectcontroller"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Initializing instances (via &lt;code&gt;container.lookup&lt;/code&gt;) in initializers is deprecated. For
initialization that requires instances Ember has introduced &amp;quot;instance initializers&amp;quot;. See
the &lt;a href="/guides/deprecations#toc_access-to-instances-in-initializers"&gt;deprecation guide&lt;/a&gt;
for more information, as well as this &lt;a href="https://github.com/emberjs/website/pull/1951"&gt;documentation PR&lt;/a&gt;
and &lt;a href="https://github.com/emberjs/ember.js/pull/10256"&gt;the implementation PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Not a deprecation, but related: The &lt;code&gt;{{bind}}&lt;/code&gt; template helper was a private
helper, and has been deprecated
since Ember 1.10. It has been removed in Ember.js 1.11.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.11.0/CHANGELOG.md"&gt;Ember.js 1.11.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.12.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.12.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.16.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/24/ember-data-1-0-beta-16-1-released.html"/>
    <id>http://emberjs.com/blog/2015/03/24/ember-data-1-0-beta-16-1-released.html</id>
    <published>2015-03-23T20:00:00-04:00</published>
    <updated>2015-03-23T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data v1.0.0-beta.16.1 is a bugfix release that fixes 2
regressions reported with Ember Data v1.0.0-beta.16. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data v1.0.0-beta.16.1 is a bugfix release that fixes 2
regressions reported with Ember Data v1.0.0-beta.16. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
&lt;a href="http://emberjs.com/builds"&gt;http://emberjs.com/builds&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_store-adapterfor-application-throwing-exceptions'&gt;store.adapterFor(&amp;#39;application&amp;#39;) Throwing Exceptions&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/kamal"&gt;Kamal Fariz Mahyuddin&lt;/a&gt; reported issue
&lt;a href="https://github.com/emberjs/data/issues/2925"&gt;#2925&lt;/a&gt; where code that
attempted to use the store&amp;#39;s &lt;a href="http://emberjs.com/api/data/classes/DS.Store.html#method_adapterFor"&gt;adapterFor&lt;/a&gt; method to access
the &lt;code&gt;application&lt;/code&gt; adapter was throwing an error with Ember Data
&lt;code&gt;v1.0.0-beta.16&lt;/code&gt;. This has been fixed in Ember Data
&lt;code&gt;v1.0.0-beta.16.1&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_incompatibility-with-ember-1-10-0-beta-4'&gt;Incompatibility with Ember 1.10.0-beta.4&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/danielspaniel"&gt;Daniel Sudol&lt;/a&gt;
&lt;a href="https://github.com/emberjs/data/issues/2927"&gt;reported&lt;/a&gt; that
&lt;code&gt;v1.0.0-beta.16&lt;/code&gt; was throwing an error when it was loaded alongside
Ember &lt;code&gt;1.10.0-beta.4&lt;/code&gt; due to Ember Data calling the wrong
registerHelper method on HTMLBars. This was tracked down to an issue
in &lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;ember-inflector&lt;/a&gt; which comes bundled with Ember
Data. The issue has been fixed in &lt;code&gt;v1.5.0&lt;/code&gt; of ember-inflector and
Ember Data &lt;code&gt;v1.0.0-beta.16.1&lt;/code&gt; now includes the updated version.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_testing-issues-with-1-0-0-beta-16'&gt;Testing issues with 1.0.0-beta.16&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/pmdarrow"&gt;Peter Darrow&lt;/a&gt; called
&lt;a href="https://github.com/emberjs/data/issues/2924"&gt;out some testing problems&lt;/a&gt;
with Ember Data &lt;code&gt;v1.0.0-beta.16&lt;/code&gt;. This was concluded to be an issue
with &lt;code&gt;ember-qunit&lt;/code&gt; not properly cleaning up Ember Data&amp;#39;s store after
tests. &lt;a href="https://github.com/rwjblue"&gt;Robert Jackson&lt;/a&gt; quickly fixed the issue and
recommends you update to &lt;code&gt;v0.3.0&lt;/code&gt; of &lt;code&gt;ember-qunit&lt;/code&gt; if you experience
this issue.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelog'&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v1.0.0-beta.16.1/CHANGELOG.md"&gt;Ember Data 1.0.0-beta.16.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.16 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/23/ember-data-1-0-beta-16-released.html"/>
    <id>http://emberjs.com/blog/2015/03/23/ember-data-1-0-beta-16-released.html</id>
    <published>2015-03-22T20:00:00-04:00</published>
    <updated>2015-03-22T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.16. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.16. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
emberjs.com/builds&lt;/p&gt;

&lt;p&gt;The 1.0.0-beta.16 release represents the effort of at least 31
contributors across over 112 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-core-contributor'&gt;New Core Contributor&lt;/h2&gt;
&lt;p&gt;Contributor &lt;a href="https://github.com/wecc"&gt;Christoffer Persson&lt;/a&gt; has been given collaborator
status and will help us triage issues, merge pull requests, and
contribute bug fixes and documentation. Christoffer has been extremely
active in triaging issues and contributing features and bug fixes to
the Ember Data project.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_the-store-now-passes-snapshots-instead-of-records-to-adapter-methods'&gt;The store now passes snapshots instead of records to adapter methods&lt;/h3&gt;
&lt;p&gt;In 1.0.0-beta.15 Ember Data introduce the Snapshot API and began
passing snapshot instances into all serializers to prevent
side-effects from occurring when inspecting relationships for
serialization. This introduces some pain points in 3rd party adapters
and serializers since they could not easily create snapshot instances
without using private APIs. In Ember Data 1.0.0-beta.16 the
store will now pass snapshot instances into adapters methods instead
of record instances.&lt;/p&gt;

&lt;p&gt;The following adapter methods now receive snapshots instead of records:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find(store, type, id, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany(store, type, ids, snapshots)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany(store, snapshot, url, relationship)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo(store, snapshot, url, relationship)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The signature of &lt;code&gt;buildURL(type, id, snapshot)&lt;/code&gt; has also been updated to receive
snapshots instead of records.&lt;/p&gt;

&lt;p&gt;This change removes the need for adapters to create snapshots manually using the
private API &lt;code&gt;record._createSnapshot()&lt;/code&gt; to be able to pass snapshots to
serializers.&lt;/p&gt;

&lt;p&gt;Snapshots are backwards-compatible with records (with deprecation warnings) and
it should be pretty straight forward to update current code to the public
Snapshot API:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)           =&amp;gt; postSnapshot.id
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)        =&amp;gt; postSnapshot.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)       =&amp;gt; postSnapshot.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)     =&amp;gt; postSnapshot.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.constructor         =&amp;gt; postSnapshot.type;
post.constructor.typeKey =&amp;gt; postSnapshot.typeKey
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you need to access the underlying record of a snapshot you can do so by
accessing &lt;code&gt;snapshot.record&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full API reference of &lt;code&gt;DS.Snapshot&lt;/code&gt; can be found &lt;a href="http://emberjs.com/api/data/classes/DS.Snapshot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_improvements'&gt;Improvements&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_store-as-a-service'&gt;Store as a Service&lt;/h3&gt;
&lt;p&gt;The store has now been registered as a service. So when you are using
Ember Data 1.0.0-beta.16 with Ember 1.10+ you can now inject the store
into any Ember object managed by the container.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.TweetComposerComponent = Ember.Component.extend({
  &lt;span class="key"&gt;store&lt;/span&gt;: Ember.inject.service(),
  &lt;span class="function"&gt;newTweet&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;store&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tweet&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {});
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please give a warm thanks to &lt;a href="https://github.com/martndemus"&gt;martndemus&lt;/a&gt; for his
work implementing this feature!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_mixins-in-polymorphic-relationships'&gt;Mixins in Polymorphic Relationships&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/igorT"&gt;Igor Terzic&lt;/a&gt; Added support for using mixins in polymorphic
relationships. This allows Ember Data to reference Mixins instead of
Model classes as the type argument for relationships.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Comment = DS.Model.extend({
  &lt;span class="key"&gt;owner&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;commentable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;polymorphic&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});

App.CommentableMixin = Ember.Mixin.create({
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_better-support-for-using-multiple-stores'&gt;Better Support for using multiple stores&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jmurphyau"&gt;James Murphy&lt;/a&gt; landed an
&lt;a href="https://github.com/emberjs/data/pull/2617"&gt;awesome PR&lt;/a&gt; that makes it
easier to use multiple stores in your Ember Application.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelog'&gt;Changelog&lt;/h2&gt;
&lt;p&gt;In addition to the major changes mentioned above this release also
includes many bug fixes and documentation updates. Be sure to check
out the change log for the full list of updates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v1.0.0-beta.16/CHANGELOG.md"&gt;Ember Data 1.0.0-beta.16 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.15 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/14/ember-data-1-0-beta-15-released.html"/>
    <id>http://emberjs.com/blog/2015/02/14/ember-data-1-0-beta-15-released.html</id>
    <published>2015-02-13T19:00:00-05:00</published>
    <updated>2015-02-13T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.15. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.15. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
emberjs.com/builds&lt;/p&gt;

&lt;p&gt;The 1.0.0-beta.15 release represents the effort of at least 30
contributors across over 168 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_improvements'&gt;Improvements&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_snapshot-api'&gt;Snapshot API&lt;/h3&gt;
&lt;p&gt;In Ember Data serializers will now be given a snapshot instance
instead of a record instance when serializing records. A snapshot
represents the frozen state of a record at a particular moment in
time. Its initial purpose is to be passed to serializers instead of
the real record. This allows the serializer to examine the current
state of that record in the moment without triggering side-effects,
like loading relationships.&lt;/p&gt;

&lt;p&gt;The snapshot has a different API from a record for accessing
properties so you will know you are working with a snapshot. Using
&lt;code&gt;snapshot.get&lt;/code&gt; is still supported for compatibility however it will
log a deprecated warning to encourage you to use the new apis.&lt;/p&gt;

&lt;p&gt;To access attributes you should now use the &lt;code&gt;attr&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To access a belongsTo relationship you should use &lt;code&gt;.belongsTo()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To access a hasMany relationship you should use &lt;code&gt;.hasMany()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please give a warm thanks to &lt;a href="https://github.com/wecc"&gt;Christoffer Persson&lt;/a&gt; for all his
work implementing this feature!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_errors-on-arbitrary-properties'&gt;Errors on arbitrary properties&lt;/h3&gt;
&lt;p&gt;Previously, Ember Data would only attach errors to a record&amp;#39;s error
object if they matched a property that was already on the record. Now
thanks to &lt;a href="https://github.com/alexspeller"&gt;Alex Speller&lt;/a&gt;&amp;#39;s
&lt;a href="https://github.com/emberjs/data/pull/1984"&gt;work&lt;/a&gt; any error returned
by the backend can be attached to the error object.&lt;/p&gt;

&lt;p&gt;Please note that if your backend is returning an error property that
is not an attribute on the record you will need to manually clear it
before the record can transition out of the error state.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_sort-query-params-in-ajax-calls'&gt;Sort query params in ajax calls.&lt;/h3&gt;
&lt;p&gt;When developing APIs, it is common to use a caching mechanism, like
Varnish, to cache requests to public API endpoints, and those tools
use the URL string to determine if they have a cached response.&lt;/p&gt;

&lt;p&gt;As an example, if one user requests &lt;code&gt;/posts?sort=price&amp;amp;category=pets&lt;/code&gt;
and another requests &lt;code&gt;/posts?category=pets&amp;amp;sort=price&lt;/code&gt;, the cached
request won&amp;#39;t be used in the second call.&lt;/p&gt;

&lt;p&gt;Ember Data&amp;#39;s &lt;code&gt;RESTAdapter&lt;/code&gt; will now sort the query parameters by their
field name when making an ajax request.&lt;/p&gt;

&lt;p&gt;It is possible to disable this behavior, by setting &lt;code&gt;sortQueryParams&lt;/code&gt;
to be false on your adapter.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.ApplicationAdapter = DS.RESTAdapter.extend({
  &lt;span class="key"&gt;namespace&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;api/v1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;sortQueryParams&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;Miguel Camba&lt;/a&gt; for implementing this feature.&lt;/p&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
</feed>
