<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2015-05-09T20:00:00-04:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>The Transition to Ember 2.0 in Detail</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html"/>
    <id>http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html</id>
    <published>2015-05-09T20:00:00-04:00</published>
    <updated>2015-05-09T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;As we approach the eve of the release of Ember 1.13-beta, it's a good
time to talk about the transition plan for those of us who have Ember
1.11 and 1.12 applications.&lt;/p&gt;

&lt;p&gt;The high level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember 1.13-beta.1 will be released on Monday. It will come with...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;As we approach the eve of the release of Ember 1.13-beta, it&amp;#39;s a good
time to talk about the transition plan for those of us who have Ember
1.11 and 1.12 applications.&lt;/p&gt;

&lt;p&gt;The high level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember 1.13-beta.1 will be released on Monday. It will come with the
new Glimmer engine and a series of new deprecations, preparing for
cruft removal in Ember 2.0.&lt;/li&gt;
&lt;li&gt;Ember 1.13 will ship with support for &lt;strong&gt;angle bracket components&lt;/strong&gt;,
which also serve as the opt-in for one-way data flow and the entirety
of the other React-inspired programming model improvements.&lt;/li&gt;
&lt;li&gt;We will continue to fix regressions caused by the Glimmer engine
throughout the 1.13 beta cycle.&lt;/li&gt;
&lt;li&gt;We plan to release Ember 2.0-beta.1 on June 12, as announced at
EmberConf.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We will release a point release of Ember 1.13 (likely 1.13.1)
together with the release of Ember 2.0.&lt;/strong&gt; This release will continue
to fix regressions caused by the Glimmer engine, and help smooth the
transition to Ember 2.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We will likely release additional point releases of Ember 1.13 to
help address unexpected difficulties in the transition to Ember 2.0.&lt;/strong&gt;
For the most part, this will likely include new deprecations with
light backporting of features needed to complete a transition away
from deprecated features in 1.13.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Glimmer engine represents the third phase of major performance work
on Ember in the past year (preceded by &lt;code&gt;metal-views&lt;/code&gt; in 1.8 and HTMLBars
in 1.10). Now that it&amp;#39;s landed, we&amp;#39;re going to move into the next phase
of major performance improvements. Expect to see more about that once
Ember 2.0 has shipped.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_dealing-with-glimmer-regressions'&gt;Dealing With Glimmer Regressions&lt;/h3&gt;
&lt;p&gt;We landed Glimmer in Canary, and given that it&amp;#39;s a completely rewritten
rendering engine, we&amp;#39;re quite happy with the results so far.&lt;/p&gt;

&lt;p&gt;That said, we expect to continue seeing compatibility fallout,
especially in heavily-used private APIs, over the next several months.&lt;/p&gt;

&lt;p&gt;As a result, &lt;strong&gt;we plan to continue releasing point releases in the 1.13
series as we learn about additional incompatibilities.&lt;/strong&gt; We will
continue to do this after Ember 2.0, to try to make sure that everyone
who wants to upgrade to Ember 1.13 and remove deprecations (as a
precursor to an Ember 2.0 upgrade) can do so.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_add-on-compatibility-and-private-apis'&gt;Add-On Compatibility and Private APIs&lt;/h3&gt;
&lt;p&gt;Ember 1.x add-ons quite often use private APIs. This was necessary for
many of the most ambitious add-ons (like Liquid Fire), and these add-ons
were a boon for Ember users.&lt;/p&gt;

&lt;p&gt;While Glimmer cannot maintain compatibility for every private API used
by add-ons, we are committed to helping existing add-ons find new
approaches that work post-Glimmer, ideally in the form of public APIs.&lt;/p&gt;

&lt;p&gt;We know that many Ember 1.x apps (including apps by members of the core
team) will not be able to upgrade to Ember 1.13 and Glimmer until
popular existing add-ons can support 1.13. We don&amp;#39;t plan to put the 1.13
series to bed until people with 1.12 apps who are trying to upgrade to
deprecation-free 1.13 in earnest can do so successfully.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-roll-out-of-new-features'&gt;The Roll Out of New Features&lt;/h2&gt;
&lt;p&gt;Over the past six months, we&amp;#39;ve talked about a lot of new features that
we plan to work on during this time-frame.&lt;/p&gt;

&lt;p&gt;Since the 1.8.0 release (October 2014), we landed a large chunk of the
features we started to talk about as precursors to 2.0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Ember 1.13, we will land the last chunk of 2.0 precursor features,
including the Glimmer rendering engine and React-style data flow.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Glimmer rendering engine is fully backwards compatible with the
Ember 1.12 public API, and we continue to do work to ensure
compatibility with real-world apps and addons that are using popular
private APIs.&lt;/p&gt;

&lt;p&gt;The new data flow model, including one-way data flow by default,
separation of attributes from component state, opt-in mutable bindings,
and callback-style actions are all opt-in through the use of another big
new feature: &lt;strong&gt;angle-bracket components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We do not plan to remove curly-brace components (with their legacy
semantics) in Ember 2.0, &lt;strong&gt;so you can take your time upgrading your
components to the new semantics and still upgrade to Ember 2.0&lt;/strong&gt;. In the
sections that follow, I will lay out the most important changes and talk
about the transition path.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_2-0-precursor-features-already-landed-by-1-12'&gt;2.0 Precursor Features Already Landed By 1.12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elimination of metamorph tags&lt;/strong&gt; landed in Ember 1.8.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;metal-views&lt;/strong&gt; landed in Ember 1.8.0, providing full support for SVG
documents, including components in SVG.&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;HTMLBars&lt;/strong&gt; engine landed in 1.10, which prepared the codebase
for Glimmer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;block params&lt;/strong&gt; and &lt;strong&gt;chained else&lt;/strong&gt; in templates landed in 1.10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;services&lt;/strong&gt; landed in 1.10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;curly attributes / elimination of &lt;code&gt;bind-attr&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;a
href=&amp;quot;{{src}}&amp;quot;&amp;gt;&lt;/code&gt;), the first big fruits of HTMLBars, landed in 1.11&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;dynamic {{component}} helper&lt;/strong&gt; landed in 1.11&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;instance initializers&lt;/strong&gt;, a precursor to FastBoot, landed in 1.12&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-1-13-and-the-glimmer-engine'&gt;Ember 1.13 and the Glimmer Engine&lt;/h3&gt;
&lt;p&gt;The Glimmer engine is shorthand for a whole bunch of new features. While
most of the public discussion has focused on performance, it also
integrates many of the programming model improvements pioneered by
React.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_one-way-values-by-default'&gt;One-Way Values By Default&lt;/h4&gt;
&lt;p&gt;First of all, starting in Ember 2.0, template bindings are one-way by
default. Because we know that it will take some time to refactor your
applications to explicitly opt-in to two-way bindings as needed, we have
decided to make this new behavior a consequence of opting in to new
angle-bracket components.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{!-- title is a mutable two-way binding --}}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;my-component&lt;/span&gt; &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="attribute-value"&gt;model.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{!-- title is just an (immutable) value --}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;my-component&lt;/span&gt; &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;model.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At the moment, we have not yet decided when precisely to drop two-way
bindings by default, and whether to continue to include the support in a
plugin once we have dropped it. The specifics will depend largely on how
difficult the upgrade to angle-bracket components proves to be.&lt;/p&gt;

&lt;p&gt;We expect angle-bracket components to land as part of Ember 1.13 on June
12.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_fast-re-render'&gt;Fast Re-Render&lt;/h4&gt;
&lt;p&gt;In Ember 1.12, calling &lt;code&gt;rerender()&lt;/code&gt; on a component is an extremely
expensive operation, and blows away all of the existing DOM (together
with its internal state, such as selection, cursor, focus, scroll
position and more).&lt;/p&gt;

&lt;p&gt;In Ember 1.13, thanks to the Glimmer engine, you can safely invoke
&lt;code&gt;rerender()&lt;/code&gt; and it will only update the parts of the template that have
actually changed.&lt;/p&gt;

&lt;p&gt;This allows you to replace an entire data structure with a totally new
POJO, &lt;code&gt;rerender&lt;/code&gt; the component, and get highly performant updates that
preserve the DOM.&lt;/p&gt;

&lt;p&gt;As in React, if you modify a property on the component that is used in
the template (&amp;quot;state&amp;quot; in React), the component will be &lt;code&gt;rerendered()&lt;/code&gt;,
so the most common way to trigger a (fast) re-render is to set a
property on the component that is used by the component&amp;#39;s template.&lt;/p&gt;

&lt;p&gt;Notably, this model is quite similar to the binding model used in Ember
1.12, with some small changes that eliminate the possibility of creating
complex graphs of two-way bindings by accident.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_new-lifecycle-hooks'&gt;New Lifecycle Hooks&lt;/h4&gt;
&lt;p&gt;Instead of having to register observers on &amp;quot;bindings&amp;quot; and try to reflect
the changes into your DOM, which can be fairly error-prone and
confusing, Ember 1.13 introduces a series of new lifecycle hooks that
execute whenever a component&amp;#39;s attributes change.&lt;/p&gt;

&lt;p&gt;Attribute changes can happen either via observation, such as when a
service has changed, or through the data-down/actions-up data flow
pattern enabled by &lt;code&gt;component.rerender()&lt;/code&gt; and &lt;code&gt;component.set()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Ember 1.12, you might write something like this:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Component.extend({
  didInsertElement() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().button({
      &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;value&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
      &lt;span class="key"&gt;disabled&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    });
  },
  &lt;span class="key"&gt;valueDidChange&lt;/span&gt;: observer(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;value&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().option(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;text&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;value&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;))
  }),

  &lt;span class="key"&gt;disabledDidChange&lt;/span&gt;: observer(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().option(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;))
  })
})
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One problem with this code is that the observer can fire at any time,
and it executes both when the value is changed from inside the component
and when it is changed from the outside.&lt;/p&gt;

&lt;p&gt;As we&amp;#39;ll see in the next section, conflating changes coming from the
inside with changes coming from the outside can make it difficult to
reason about the data flow, and makes it very easy for code in your
component to accidentally trigger observers that were intended for
changes coming from the &lt;em&gt;outside&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Starting with Ember 1.13, you will be able to express the same concept
more clearly:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Component.extend({
  didInsertElement() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().button({
      &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.value,
      &lt;span class="key"&gt;disabled&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.disabled
    });
  },

  didUpdateElement() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().options({
      &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.value,
      &lt;span class="key"&gt;disabled&lt;/span&gt;: &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.disabled
    });
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A full description of the new lifecycle hooks will be included with the
documentation of Ember 1.13, but they will allow you to perform work in
response to a change in attributes both before and after rendering has
taken place. You will also be able to do work for initial render only,
for updates only, or both.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_the-code-attrs-code-property'&gt;The &lt;code&gt;attrs&lt;/code&gt; Property&lt;/h4&gt;
&lt;p&gt;As described above, conflating the attributes (values provided by the
component&amp;#39;s caller) with the component&amp;#39;s own state can cause confusion,
especially when combined with mutable attributes.&lt;/p&gt;

&lt;p&gt;In particular, a seemingly innocuous change to a piece of component
state can trigger a cascade of changes to child components, sibling
components, and even parent components.&lt;/p&gt;

&lt;p&gt;Beginning with angle-bracket components in Ember 1.13, a component&amp;#39;s
attributes will be available in &lt;code&gt;this.attrs&lt;/code&gt; rather than on the
component itself.&lt;/p&gt;

&lt;p&gt;So when a component is invoked this way:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;my-component&lt;/span&gt; &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;model.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The component will see &lt;code&gt;this.attrs.title&lt;/code&gt; as the current value of
&lt;code&gt;model.name&lt;/code&gt;. Whenever &lt;code&gt;model.name&lt;/code&gt; changes via observation, or when the
parent component is re-rendered, &lt;code&gt;my-component&lt;/code&gt;&amp;#39;s lifecycle hooks will
be triggered, and it will see a new version of &lt;code&gt;model.name&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_the-code-mut-code-helper'&gt;The &lt;code&gt;mut&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;But what if you want to allow the child component to modify the property
explicitly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mut&lt;/code&gt; helper will produce an object that contains both a &lt;code&gt;value&lt;/code&gt;
property and an &lt;code&gt;update&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Imagine a component that will increment a &lt;code&gt;count&lt;/code&gt; property whenever the
component is clicked.&lt;/p&gt;

&lt;p&gt;You might write such a component this way in Ember 1.12:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;my-counter&lt;/span&gt; &lt;span class="attribute-name"&gt;count&lt;/span&gt;=&lt;span class="attribute-value"&gt;activatedCount&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// my-counter.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="function"&gt;click&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;count&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;count&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="integer"&gt;1&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While this is fairly terse, the code in the component and its invocation
is fairly unclear.  While it is modifying a property in a parent
component, nothing about the JavaScript code makes that clear. And while
the code that invokes &lt;code&gt;my-counter&lt;/code&gt; is allowing its &lt;code&gt;activatedCount&lt;/code&gt;
property to be modified (which is rather unusual), nothing about the
invocation makes that clear.&lt;/p&gt;

&lt;p&gt;Especially in larger components, and when combined with an observer on
&lt;code&gt;count&lt;/code&gt;, the expected behavior can become quite obtuse and it can become
hard to follow the precise, expected data flow.&lt;/p&gt;

&lt;p&gt;In Ember 1.13, you can write the same component this way:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;my-counter&lt;/span&gt; &lt;span class="attribute-name"&gt;count&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;mut&lt;/span&gt; &lt;span class="attribute-name"&gt;activatedCount&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// my-counter.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="function"&gt;click&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.count.update(&lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs.count.value + &lt;span class="integer"&gt;1&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The call to &lt;code&gt;{{mut activatedCount}}&lt;/code&gt; packages up an object containing
both its current value and a callback that allows the receiving
component to modify it. There are only a handful of additional
characters, but the intent of the code is far clearer, both when the
component is invoked and when the component is updating the attribute.&lt;/p&gt;

&lt;p&gt;In other words, &lt;code&gt;{{mut}}&lt;/code&gt; just produces a regular JavaScript value that
contains both the current value and a way to update it. The lifecycle
hooks will fire at the same times as well.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_the-code-action-code-helper'&gt;The &lt;code&gt;action&lt;/code&gt; Helper&lt;/h4&gt;
&lt;p&gt;Finally, the behavior of actions in Ember 1.12 is quite magical. You
pass an action string into a component, and &lt;code&gt;sendAction&lt;/code&gt; triggers the
action in the environment that provided the string.&lt;/p&gt;

&lt;p&gt;Frustratingly, it is impossible to pass a component that wants to
trigger an action an alternative function, because actions are strings,
not functions.&lt;/p&gt;

&lt;p&gt;Even in Ember 1.12, you can always pass a function into a component, but
if you simply do something like: &lt;code&gt;&amp;lt;my-component on-playing={{actions.playing}} /&amp;gt;&lt;/code&gt;,
the &lt;code&gt;this&lt;/code&gt; in the function will be wrong (you want it to be the
component). In addition, you want a way to pass arguments into the
function (i.e. &amp;quot;&lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;currying&lt;/a&gt;&amp;quot;).&lt;/p&gt;

&lt;p&gt;Starting in Ember 1.13, a new &lt;code&gt;action&lt;/code&gt; helper provides you with a way to
do both of these things:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{!-- parent-component --}}&lt;/span&gt;

&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;users&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;user&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;big-button&lt;/span&gt; &lt;span class="attribute-name"&gt;on-active&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;selectedUser&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="comment"&gt;{{!-- equivalent --}}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;big-button&lt;/span&gt; &lt;span class="attribute-name"&gt;on-active&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;actions.selectedUser&lt;/span&gt; &lt;span class="attribute-name"&gt;user&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// parent-component.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    selectedUser(user) {
      &lt;span class="comment"&gt;// this is the component&lt;/span&gt;
      &lt;span class="comment"&gt;// user is the user from the current iteration of the loop&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// big-button.js&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="function"&gt;click&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;on-active&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]();
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;big-button&lt;/code&gt; is simply invoking a function, the invoking
component can provide whatever function it wants.&lt;/p&gt;

&lt;p&gt;Another nice touch, &lt;code&gt;action&lt;/code&gt; works seamlessly with &lt;code&gt;mut&lt;/code&gt;. This means
that from the component&amp;#39;s perspective, it&amp;#39;s just calling a callback, but
the code that calls the component can easily pass in a callback that
updates one of its values.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;my-text&lt;/span&gt; &lt;span class="attribute-name"&gt;on-enter&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;pressedEnter&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;my-text&lt;/span&gt; &lt;span class="attribute-name"&gt;on-enter&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="error"&gt;(&lt;/span&gt;&lt;span class="attribute-name"&gt;mut&lt;/span&gt; &lt;span class="attribute-name"&gt;currentText&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// my-text.js&lt;/span&gt;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  keyUp(event) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (event.which === &lt;span class="integer"&gt;13&lt;/span&gt;) {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.attrs[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;on-enter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;](&lt;span class="local-variable"&gt;this&lt;/span&gt;.&lt;span class="predefined"&gt;$&lt;/span&gt;().val());
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, &lt;code&gt;this.attrs[&amp;#39;on-enter&amp;#39;]&lt;/code&gt; is simply a function. The
&lt;code&gt;action&lt;/code&gt; helper packages up a method in the component&amp;#39;s &lt;code&gt;actions&lt;/code&gt; hash,
currying &lt;code&gt;this&lt;/code&gt; (and other arguments). It also converts a &lt;code&gt;mut&lt;/code&gt; object
into a function that can be invoked.&lt;/p&gt;

&lt;p&gt;A component that wishes to support mutable bindings as actions need only
invoke the callback with a new value. Actions from the &lt;code&gt;actions&lt;/code&gt; hash,
and even regular functions passed as &lt;code&gt;on-enter={{func}}&lt;/code&gt; will work just
fine.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_routeable-components'&gt;Routeable Components&lt;/h3&gt;
&lt;p&gt;Finally, routeable components are under active development, but there is
still some uncertainty about precisely when they will land.&lt;/p&gt;

&lt;p&gt;The complete feature has two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to fully define query parameters outside the controller
(in the route). Alex Matchneer and Trek Glowacki are actively working
on this feature.&lt;/li&gt;
&lt;li&gt;The ability to have a route dispatch directly to a component, rather
than to a controller and a template. Erik Bryn is actively working on
this feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We intend to land both of these parts in the 1.x series, but there is a
good chance that they will land in 1.13.1, which will be released in
parallel with 2.0-beta. As I said in the beginning of this post, we will
likely backport a few features to the 1.13.x series in order to ease the
transition. Because of the proximity to Ember 2.0 and the impact of this
change on the programming model, routable components are a good
candidate for backporting.&lt;/p&gt;

&lt;p&gt;Whenever we land these features precisely, we are committed to making
sure that there is a clear way to upgrade to the last point release of
1.13, clear all deprecations, and then painlessly upgrade to 2.0.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_conclusion'&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that we have landed the Glimmer engine, we will be focusing our
energy over the next few months on the release of Ember 2.0-beta on June
12 and Ember 2.0 final on July 24.&lt;/p&gt;

&lt;p&gt;The 1.13 release is the final minor version in the 1.x series. In order
to aid the transition to Ember 2.0, we plan to release several point
releases of 1.13 (1.13.1, 1.13.2, etc.) that will attempt to fix
regressions caused by Glimmer and do some light backporting of features
that will aid in the transition.&lt;/p&gt;

&lt;p&gt;Note that Glimmer itself implemented the full Ember 1.x test suite, so
many of the regressions are simple bugs, related to untested features,
or related to private APIs. Based on experience over the past week
attempting to integrate Canary into existing applications, we feel
relatively optimistic about the plan of record for Ember 2.0, and where
we are in the process.&lt;/p&gt;

&lt;p&gt;For obvious reasons (the recent merge of Glimmer), Ember 1.13-beta will
be an unusually unstable beta release, but we are hopeful that the
release of Ember 1.13.0 on June 12 will have shaken out the bulk of any
problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have an app, the best thing you can do right now to help is try
to upgrade it to Canary.&lt;/strong&gt; Not all add-ons work yet, but that gap is
closing every day, and the more information we can uncover through
real-app testing, the faster this will go.&lt;/p&gt;

&lt;p&gt;I would like to thank the whole Ember community for your enthusiasm and
effort around the Ember 2.0 release. Maintaining a focus on
compatibility while making major changes is hard, but well worth it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make this happen!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Glimmer's In Canary, Test Your Apps!</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/05/05/glimmer-merging.html"/>
    <id>http://emberjs.com/blog/2015/05/05/glimmer-merging.html</id>
    <published>2015-05-04T20:00:00-04:00</published>
    <updated>2015-05-04T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;After months of work, &lt;strong&gt;Glimmer is landing in Canary today&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What this means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test suite passes.&lt;/li&gt;
&lt;li&gt;We have tested Glimmer on our own apps, and, for the most part, apps boot and
run correctly.&lt;/li&gt;
&lt;li&gt;There are still known issues (see below), including with...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;After months of work, &lt;strong&gt;Glimmer is landing in Canary today&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What this means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test suite passes.&lt;/li&gt;
&lt;li&gt;We have tested Glimmer on our own apps, and, for the most part, apps boot and
run correctly.&lt;/li&gt;
&lt;li&gt;There are still known issues (see below), including with the test helpers.&lt;/li&gt;
&lt;li&gt;At this point, we need community help to identify compatibility issues not
covered by the test suite.&lt;/li&gt;
&lt;li&gt;We expect to continue improving compatibility with the pre-Glimmer engine for
some time, as new issues come to light.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Glimmer is the new rendering engine the Ember community has been working on for
the past several months. It is the first ground-up change to the templating
engine since SproutCore 2.0, and takes advantage of the groundwork laid by
HTMLBars to dramatically improve re-rendering performance. It also sets the
stage for more performance improvements during the 2.x series, and
React-inspired improvements to the Ember programming model. Best of all, we are
landing Glimmer in Ember 1.13, compatible with the full public API of Ember
1.x.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also worth noting that while our apps feel faster, not every
performance benchmark will necessarily show marked improvement. There
will be more on this below, but the Glimmer refactor focused primarily
on dramatic improvements to re-rendering performance and programming
model improvements.&lt;/p&gt;

&lt;p&gt;Initial render of component-heavy pages shows some improvement in most
of our tests, but you should expect to see the biggest improvements when
re-rendering lists, especially when you are not using deprecated
functionality.&lt;/p&gt;

&lt;p&gt;Once we land Glimmer, you will probably see a variety of different
benchmarks testing various aspects of Ember. We expect to see benchmarks
showing that there are still pathologically slow scenarios in Ember,
especially in areas that we did not focus on improving. We expect to
continue to improve performance across Ember throughout the 2.x series,
and discuss that more below.&lt;/p&gt;

&lt;p&gt;Also note that while we took great pains to support features present in
Ember 1.12 (including many long-deprecated features), that compatibility
often comes with significant performance costs. In some cases, seemingly
similar constructs (e.g. &lt;code&gt;{{#each posts as |post|]}&lt;/code&gt; vs. &lt;code&gt;{{#each posts
itemController=&amp;#39;post&amp;#39; as |post|}}&lt;/code&gt;) have significantly different
internal implementation, and the Ember 2.0 version has vastly better
performance.&lt;/p&gt;

&lt;p&gt;Finally, there will be an upcoming guide in the next week or so that
describes the new features of the Glimmer engine (&lt;code&gt;attrs&lt;/code&gt;, new lifecycle
hooks, keys in &lt;code&gt;#each&lt;/code&gt;), but at the moment we are focusing on
compatibility with 1.x and testing the 1.x API with existing
applications.&lt;/p&gt;

&lt;p&gt;Please follow these instructions to test Ember-CLI apps with Canary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ember-cli.com/#using-canary-build-instead-of-release"&gt;http://www.ember-cli.com/#using-canary-build-instead-of-release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_known-issues'&gt;Known Issues&lt;/h2&gt;
&lt;p&gt;There are several known issues that you should consider when evaluating
Glimmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are still a few memory leaks that we have identified and are
quickly addressing.&lt;/li&gt;
&lt;li&gt;The concept of &lt;code&gt;controller&lt;/code&gt; in templates and actions in Ember 1.x was
fairly nuanced. Glimmer started with a simpler model and layered
compatibility on top. There are known gaps in the compatibility layer
that we are still addressing.&lt;/li&gt;
&lt;li&gt;There are still a number of issues in the testing helpers (especially
the faux unit tests that use &amp;quot;isolated containers&amp;quot;) that are causing
apps that work correctly to fail tests. We are working to fix the test
helpers, and should have that work done before we release 1.13 beta.&lt;/li&gt;
&lt;li&gt;There are likely a number of not-yet-known compatibility issues in
Glimmer. You should assume that the vast majority of issues you
encounter when testing Glimmer over the next few weeks will be addressed
before the final release.&lt;/li&gt;
&lt;li&gt;The compatibility layer is quite slow in some areas, making the
overall Glimmer engine slower than we would like. We have plans to
improve overall performance through the canary and beta cycle, and
then of course in the 2.0 release cycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In general, the Glimmer effort was an attempt to improve
re-rendering performance, especially in large lists.&lt;/strong&gt; It also laid
the groundwork for significant performance work in initial render and
throughout the framework, but that work is not yet done. Expect to see
continued performance improvements in Ember throughout the 2.x cycle
as a result of this change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most critical of these caveats should be addressed before we release 1.13
beta, and we expect to continue work on the remaining issues throughout the
1.13 beta cycle.&lt;/p&gt;

&lt;p&gt;Because of the magnitude of this change, and the proximity to the Ember 2.0
&amp;quot;cruft removal&amp;quot; pass, we plan to aggressively fix reported bugs during the 1.13
beta period. There will be another post describing our 1.13 and 2.0 release
plans with more precision in the next few weeks.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_performance-gains'&gt;Performance Gains&lt;/h2&gt;
&lt;p&gt;The biggest performance gains in Glimmer come from moving to a simpler
rendering model, built on top of HTMLBars.&lt;/p&gt;

&lt;p&gt;First, this allowed us to remove &lt;strong&gt;all&lt;/strong&gt; internal views for constructs
like &lt;code&gt;{{foo}}&lt;/code&gt;, &lt;code&gt;{{#if bar}}&lt;/code&gt; and even in &lt;code&gt;{{#each posts as |post|}}&lt;/code&gt;.
This view removal has an impact on initial render, because these
constructs are very common in real-world templates.&lt;/p&gt;

&lt;p&gt;Second, as we have discussed extensively, this allows us to
significantly improve the performance of re-rendering, which makes it
practical to re-render lists with entirely new arrays with very good
performance. Previously, achieving reasonable performance was very
difficult, and even when possible, came with significant bookkeeping
overhead.&lt;/p&gt;

&lt;p&gt;Interestingly, we have found that when testing real apps, the
performance gains are much more widespread than we expected, in large
part because of the simplification of the overall model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Glimmer&amp;#39;s performance in real applications has pleasantly surprised
us, exceeding the improvements we&amp;#39;ve seen in benchmarks designed to
stress-test pathological cases.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When upgrading to Glimmer, please pay special attention to the
real-world performance of your application &lt;strong&gt;in production mode&lt;/strong&gt; and
after clearing any deprecations with performance warnings.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_deprecated-features'&gt;Deprecated Features&lt;/h2&gt;
&lt;p&gt;Throughout the 1.x series, Ember has deprecated features we intended to
remove in 2.0. That process has continued with Ember 1.13, which will
contain Glimmer.&lt;/p&gt;

&lt;p&gt;However, it&amp;#39;s worth noting that Glimmer is the first major change to
many parts of the view layer since SproutCore 2! As a result,
perfect compatibility, especially in private APIs, was more
challenging.&lt;/p&gt;

&lt;p&gt;During the process of building Glimmer, we found various semantics of
&amp;quot;controller&amp;quot;s to be the most challenging. For the most part, this is
because the concept of controller has a number of different meanings
depending on context (routes, &lt;code&gt;{{render}}&lt;/code&gt;, &lt;code&gt;{{#each posts
itemController=&amp;#39;post&amp;#39;}}&lt;/code&gt;, &lt;code&gt;{{#each posts itemController=&amp;#39;post&amp;#39; as
|post|}}&lt;/code&gt;, &lt;code&gt;{{#with someController}}&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;p&gt;Controllers and components both manage a template&amp;#39;s &amp;quot;context&amp;quot; (called
&amp;quot;self&amp;quot; in Glimmer) and serve as a target for actions. Mirroring these
semantics, which are effectively derived from implementation details of
Ember 1.x&amp;#39;s rendering engine, has been a challenge. We&amp;#39;re confident they
are very close, but encourage you to open an issue if they have changed.&lt;/p&gt;

&lt;p&gt;Glimmer, through HTMLBars, has a much clearer concept of &amp;quot;scope&amp;quot;, and
features like &lt;code&gt;{{yield}}&lt;/code&gt; work directly with that scope object. We were
able to get the Ember test suite passing by implementing the old
semantics on top of the new scope concept, but &lt;strong&gt;we are aware that we
have gaps in our implementation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let us know if you find controller semantics that we have
implemented incorrectly. Bug reports would help, JSBins would help more,
and pull requests with failing tests would help even more.&lt;/p&gt;

&lt;p&gt;Finally, for the best experience with Glimmer, you should try to move
your application away from &lt;code&gt;itemController&lt;/code&gt;, &lt;code&gt;{{render}}&lt;/code&gt; and other
constructs that manipulate the controller from the template. We know
that this is not always possible (our applications all still make
use of some cases of these features),  which is why we worked so hard on
compatibility.&lt;/p&gt;

&lt;p&gt;That said, you&amp;#39;ll get better performance and a quicker upgrade path to
2.0 if you work on eliminating uses of these features soon. Implementing
them correctly added enough complexity that we will want to move
somewhat aggressively in 2.x to enable us to further improve
performance.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Internet Explorer 8 Support Will Be Removed in Ember 2.0</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/04/20/ie8-support-update.html"/>
    <id>http://emberjs.com/blog/2015/04/20/ie8-support-update.html</id>
    <published>2015-04-19T20:00:00-04:00</published>
    <updated>2015-04-19T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;After reviewing &lt;a href="https://github.com/emberjs/rfcs/pull/45"&gt;this thread&lt;/a&gt;, it seems clear that the vast majority of
Ember users who have responded, including people working at large
corporations, are comfortable with dropping IE8 support in Ember 2.0.
On the other hand, while there is enormous...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;After reviewing &lt;a href="https://github.com/emberjs/rfcs/pull/45"&gt;this thread&lt;/a&gt;, it seems clear that the vast majority of
Ember users who have responded, including people working at large
corporations, are comfortable with dropping IE8 support in Ember 2.0.
On the other hand, while there is enormous support for dropping IE9
support as well, a number of people still rely on support for IE9, and
the benefits of dropping IE9 in Ember 2.0 are not as strong.&lt;/p&gt;

&lt;p&gt;After reviewing discussion on the RFC proposal, many in-person conversations with Ember
users in large companies, and reviewing the private data sent to us via
email, we have decided that Ember 2.0 will support IE9+.&lt;/p&gt;

&lt;p&gt;So how are we going to manage this transition, and what should you do
if your business still requires IE8 support for the time being?&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_1-13-with-extended-browser-support'&gt;1.13 with Extended Browser Support&lt;/h2&gt;
&lt;p&gt;The core team will continue to periodically release point releases in
the 1.13 series to patch security bugs and browser compatibility
issues, including issues in IE8.&lt;/p&gt;

&lt;p&gt;No new features will be added, and we should be clear that we do not
intend people to stay on this release unless they must support IE8. Our
Semantic Version guarantees mean that the vast majority of the
community should migrate to the 2.x series as soon as possible.&lt;/p&gt;

&lt;p&gt;It is important to note that Ember 1.13 will come with deprecation
warnings for everything that we will break in Ember 2.0. As a result,
if you are running Ember 1.13 without any deprecation warnings, you
should be able to easily upgrade to Ember 2.0. And because of the
Semantic Versioning guarantees in the Ember 2.x series, it should be
relatively simple to upgrade from Ember 1.13 to the most recent version
of Ember 2.x when you are able to drop IE8 support.&lt;/p&gt;

&lt;p&gt;For example, imagine you build the Ember app for Big Widget Enterprise
Co. that requires IE8 support. You upgrade to 1.13 (the last release in
the 1.x series) and, over time, refactor code to eliminate all
deprecation warnings. Periodically, you apply 1.13 patch releases to
maintain browser compatibility and to fix potential security issues.&lt;/p&gt;

&lt;p&gt;Then, in April of 2016, management decides that enough customers have
moved off IE8 that you no longer need to support it. At that time,
Ember 2.6 will be the most recent stable release. Because 1.13 without
deprecation warnings is forwards-compatible with Ember 2.6, you can
upgrade from 1.13 to 2.6 with little hassle.&lt;/p&gt;

&lt;p&gt;With the integration of Ember CLI and Ember Data into the Semantic
Versioning guarantees, many of your dependencies will follow a similar
upgrade path.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ecosystem'&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;Of course, the above guarantees only apply to Ember, Ember Data, Ember
CLI, and the rest of the core-supported packages. Addon authors are
free to define their own support matrices. We encourage those who
depend on older browsers to contribute back by submitting PRs to the
addons they use with compatibility patches. Likewise, we encourage
authors of existing addons to work with users to offer a browser
compatibility matrix as close to the core projects as possible.&lt;/p&gt;

&lt;p&gt;If you require support for IE8 (and as a result, Ember 1.13), make sure
to make your voice heard across the addon ecosystem.&lt;/p&gt;

&lt;p&gt;That said, you should expect that new addons that come out after Ember
2.0 will not target Ember 1.13, and you should factor that into your
decision to remain on the 1.13 Extended Browser Support release of
Ember.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_fastboot'&gt;FastBoot&lt;/h2&gt;
&lt;p&gt;FastBoot, our effort to bring server-side rendering to all Ember apps,
is designed to offer even users with slow, low-feature browsers a fast
experience. While most people think of this as a benefit to mobile
users, IE8 certainly qualifies as a slow, low-feature browser.&lt;/p&gt;

&lt;p&gt;Because Ember applications are written &amp;quot;route first&amp;quot;, any idiomatic
Ember content app that uses links as the primary mode of navigation
will be able to provide a passable experience for users with an
unsupported version of JavaScript, or no JavaScript at all.&lt;/p&gt;

&lt;p&gt;It is worth noting that FastBoot, in the medium term, will have good
support for read-only content sites. However, while it is possible to
support forms pretty easily, forms without JavaScript (using cookie
authentication) introduce the prospect of CSRF attacks. A good solution
for FastBoot forms that is also secure is probably a longer-term
project. We would encourage the community to experiment with a secure
approach to forms that works with FastBoot.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_jquery-compatibility'&gt;jQuery Compatibility&lt;/h2&gt;
&lt;p&gt;In our RFC, we mentioned that dropping IE8 will give us the opportunity
to remove jQuery as a strict dependency. We should have been clearer
that we have no intent to remove the Ember APIs that delegate to jQuery
(such a Ember.$ and this.$() inside components).&lt;/p&gt;

&lt;p&gt;Because these APIs will remain in 2.0, both for ease of upgrade and
because we have not yet made the jQuery dependency optional, Semantic
Versioning prohibits us from removing them until at least Ember 3.0.&lt;/p&gt;

&lt;p&gt;On a personal note, we rely on jQuery heavily in our own apps. We think
it&amp;#39;s a great library that remains hugely valuable to smooth over clunky
DOM APIs and browser quirks (even in modern browsers). For those users
who need the absolute smallest payload size, we don&amp;#39;t want to saddle
you with a dependency that you don&amp;#39;t need. But we expect the majority
of users to continue using jQuery, and we have no plans to remove the
Ember/jQuery integration at this time.&lt;/p&gt;

&lt;p&gt;Thank you again for everyone who took the time to help us make this
decision, and thank you so much for being a part of the Ember
community.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Security and Bugfix Releases - Ember 1.10.1, 1.11.2, 1.11.3</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/04/14/security-and-bugfix-releases-ember-1-10-1-1-11-2-1-11-3.html"/>
    <id>http://emberjs.com/blog/2015/04/14/security-and-bugfix-releases-ember-1-10-1-1-11-2-1-11-3.html</id>
    <published>2015-04-13T20:00:00-04:00</published>
    <updated>2015-04-13T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Because developers trust Ember.js to handle sensitive customer data in
production, we take the security of the project extremely seriously. Ember
remains one of the few JavaScript projects that has a &lt;a href="/security/"&gt;clearly
outlined security policy&lt;/a&gt; and a
&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;low-traffic...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Because developers trust Ember.js to handle sensitive customer data in
production, we take the security of the project extremely seriously. Ember
remains one of the few JavaScript projects that has a &lt;a href="/security/"&gt;clearly
outlined security policy&lt;/a&gt; and a
&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;low-traffic mailing list exclusively for security
announcements&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_security-releases-ember-js-1-10-1-1-11-2'&gt;Security Releases: Ember.js 1.10.1, 1.11.2&lt;/h2&gt;
&lt;p&gt;Today we are announcing the release of Ember.js 1.10.1 and 1.11.2, which
contain an important security fix.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.10.1 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.10.0...v1.10.1"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.11.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.1...v1.11.2"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Additionally the stable, beta, and master branches have all been patched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These releases contain a fix for an XSS vulnerability that
you can learn more about on our security mailing list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/ember-security/nbntfs2EbRU"&gt;CVE-2015-1866&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is recommended that you update immediately. In order to ease
upgrading, the only change in each release is the security fix.&lt;/p&gt;

&lt;p&gt;We would like to thank Phillip Haines of &lt;a href="http://zestia.com/"&gt;Zestia&lt;/a&gt;
for working with us on identifying the issue and on the advisory process.&lt;/p&gt;

&lt;p&gt;If you discover what you believe may be a security issue in Ember.js, we
ask that you follow our &lt;a href="/security/"&gt;responsible disclosure
policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using Ember.js in production, please consider subscribing to
our &lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;security announcements mailing
list&lt;/a&gt;.  It is
extremely low-traffic and only contains announcements such as these.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_additional-reading'&gt;Additional Reading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/2013/04/05/announcing-the-ember-security-policy.html"&gt;Ember.js Security Policy Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/security/"&gt;Ember.js Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;Ember.js Security Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js-1-11-3'&gt;Ember.js 1.11.3&lt;/h2&gt;
&lt;p&gt;Ember.js 1.11.3 has also been released with a fix for nested &lt;code&gt;{{render}}&lt;/code&gt; helpers. This is
in addition to the security patch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.11.3 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.2...v1.11.3"&gt;Compare View&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.11.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/04/04/ember-1-11-1-released.html"/>
    <id>http://emberjs.com/blog/2015/04/04/ember-1-11-1-released.html</id>
    <published>2015-04-03T20:00:00-04:00</published>
    <updated>2015-04-03T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today we are releasing Ember.js 1.11.1, a patch-level release of Ember that
fixes several regressions introduced in the 1.11.0 release.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_collectionview-with-code-attributebindings-code"&gt;CollectionView with &lt;code&gt;attributeBindings&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle much effort was put into making sure that &lt;code&gt;attributeBindings&lt;/code&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today we are releasing Ember.js 1.11.1, a patch-level release of Ember that
fixes several regressions introduced in the 1.11.0 release.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_collectionview-with-code-attributebindings-code'&gt;CollectionView with &lt;code&gt;attributeBindings&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle much effort was put into making sure that &lt;code&gt;attributeBindings&lt;/code&gt; used
the same logic that template bound attributes use.  Namely, that &lt;code&gt;attributeBindings&lt;/code&gt; use
HTMLBars&amp;#39; attribute helpers instead of jQuery&amp;#39;s.&lt;/p&gt;

&lt;p&gt;Unfortunately, this work lead to an error when &lt;code&gt;CollectionView&lt;/code&gt; instances were used with
&lt;code&gt;attributeBindings&lt;/code&gt; specified.  This regression is fixed in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_invalid-urls'&gt;Invalid URLs&lt;/h3&gt;
&lt;p&gt;Refactoring in the router initialization process lead to a bug that caused the browsers URL
to become out of sync with the correct URL when the back button was pressed while using 
&lt;code&gt;HistoryLocation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This regression is fixed in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_handlebars-helper-issues'&gt;Handlebars Helper Issues&lt;/h3&gt;
&lt;p&gt;A couple regressions were fixed for Handlebars helpers with 1.11.1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The inverse template (aka &lt;code&gt;{{else}}&lt;/code&gt; block) of Handlebars helpers was not properly accounted
for during the HTMLBars transition. Using an &lt;code&gt;{{else}}&lt;/code&gt; block with a Handlebars helper has
not been function since 1.9.0.&lt;/li&gt;
&lt;li&gt;The main block could not be rendered even if &lt;code&gt;options.fn()&lt;/code&gt; was called within the helper. This
regression was first introduced in 1.11.0-beta.4.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_incorrect-assertion-for-each-foos-itemcontroler-bar'&gt;Incorrect Assertion for {{each foos itemControler=&amp;#39;bar&amp;#39;}}&lt;/h3&gt;
&lt;p&gt;During the 1.11.0 cycle an issue regarding &lt;code&gt;{{each}}&lt;/code&gt; with prototype extensions disabled was reported.
The solution to that issue was to add a much more helpful assertion when an &lt;code&gt;ArrayController&lt;/code&gt;&amp;#39;s model
did not have &lt;code&gt;Ember.Array&lt;/code&gt; mixed into it. Unfortunately, this assertion also was triggered when the
model was simply &lt;code&gt;undefined&lt;/code&gt;. The assertion has been updated to ignore falsey &lt;code&gt;model&lt;/code&gt;&amp;#39;s in 1.11.1.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_render-helper-with-view'&gt;{{render}} helper with View&lt;/h3&gt;
&lt;p&gt;In 1.11.0 using the &lt;code&gt;{{render}}&lt;/code&gt; helper (i.e. &lt;code&gt;{{render &amp;#39;post&amp;#39;}}&lt;/code&gt;) when a &lt;code&gt;PostView&lt;/code&gt; is present would not
provide the view with a template (it was assumed to be manually specified in the view via &lt;code&gt;templateName&lt;/code&gt;
property). As of 1.11.1 you can specify the &lt;code&gt;templateName&lt;/code&gt; in the &lt;code&gt;{{render}}&lt;/code&gt; helpers view (just like in 1.11.0),
but if you do not the views template will be defaulted to a template with the same name as the view itself.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/compare/v1.11.0...v1.11.1"&gt;Ember.js 1.11.0 to 1.11.1 commit log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v1.11.1"&gt;Ember.js 1.11.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.11.0 and 1.12 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html"/>
    <id>http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html</id>
    <published>2015-03-26T20:00:00-04:00</published>
    <updated>2015-03-26T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least 87 contributors
across over 646 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-11'&gt;New Features in Ember.js 1.11&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_bound-attribute-syntax'&gt;Bound Attribute Syntax&lt;/h4&gt;
&lt;p&gt;Current Ember developers are familiar with the &lt;code&gt;bind-attr&lt;/code&gt; syntax, used
to declare an attribute binding on an HTML element. An original
motivation for HTMLBars was to improve on this syntax.&lt;/p&gt;

&lt;p&gt;Ember 1.11 introduces a more intuitive API for attribute binding. For
example, here the &lt;code&gt;color&lt;/code&gt; variable is bound to the class of a div:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The inline if helper can also be used in these contexts:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For some attributes, like the &lt;code&gt;disabled&lt;/code&gt; boolean, passing a literal value
is desirable. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To allow the data-binding of non-string values to boolean properties and
custom element properties, bound attributes are implemented with a
&lt;strong&gt;property-first&lt;/strong&gt; setter.&lt;/p&gt;

&lt;p&gt;When binding to an attribute, Ember first checks to see if that attribute is a
property of the element&amp;#39;s DOM node (with normalization of capitalization). If it
is, the value is set with a property. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// disabled is a property of input elements, so...&lt;/span&gt;
input.disabled = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attribute is not present as a property, then its value is set as an
attribute:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// class is not a property of div elements, do...&lt;/span&gt;
div.setAttribute(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;red&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For SVG attributes and the style attribute, we&amp;#39;ve made an exception to this pattern
and simply use &lt;code&gt;setAttribute&lt;/code&gt; at all times.
Despite these exceptions, the property-first rule is a good way to describe what is
happening behind the scenes. In practice, the binding syntax feels natural.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
and &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt; for their effort on the design and implementation
of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_escaping-content-in-htmlbars'&gt;Escaping Content in HTMLBars&lt;/h4&gt;
&lt;p&gt;Bound attribute syntax introduces several new uses of mustaches
(the &lt;code&gt;{{&lt;/code&gt; syntax used in Ember templates). These new uses
come with new security considerations.&lt;/p&gt;

&lt;p&gt;Two notable new considerations are mustache use inside style
contexts, and inside JavaScript contexts. For example, without
escaping this
binding would be vulnerable to an XSS attack (via ActiveX
controls) in IE8:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;userProvidedWidth&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Implementing CSS and JavaScript context-sensitive escaping
will require further research and development. In Ember 1.11,
bound &lt;code&gt;style&lt;/code&gt; attributes will warn when the value is not marked safe.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy, log a warning }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The examples that follow are intended to demonstrate how this
works in practice. For example these bindings Just Work:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! Works as expected }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Warnings about unsafe bindings other than &lt;code&gt;style&lt;/code&gt; will be introduced
before Ember 2.0.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;onmouseover&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;alert(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="tag"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;px&lt;span class="tag"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Strings that are known to be adequately escaped can be
passed through the &lt;code&gt;htmlSafe&lt;/code&gt; function to mark them safe.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;layout&lt;/span&gt;: Ember.HTMLBars.compile(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;a style='width: {{someProperty}}px'&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="function"&gt;someProperty&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.String.htmlSafe(&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;));
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A less savory alternative is to use the &lt;code&gt;{{{&lt;/code&gt; &amp;quot;escaped mustache&amp;quot; style. There are
plans to improve escaped content as we approach 2.0.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_inline-if'&gt;Inline if&lt;/h4&gt;
&lt;p&gt;In 1.11 Ember&amp;#39;s &lt;code&gt;if&lt;/code&gt; helper can be used in the inline form:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/eaf4"&gt;@eaf4&lt;/a&gt; and &lt;a href="https://twitter.com/marciojunior_me"&gt;@marciojunior_me&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_each-with-index'&gt;Each with Index&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; helper will support an &lt;code&gt;index&lt;/code&gt; block param in Ember 1.11:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;people&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! The first index value will be 0 }}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/timmyce"&gt;@timmyce&lt;/a&gt; and &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_named-substates'&gt;Named Substates&lt;/h4&gt;
&lt;p&gt;Two routing substates exist for Ember routes. The &lt;code&gt;loading&lt;/code&gt; substate will be entered
if the async hooks of a route are still processing, and the &lt;code&gt;error&lt;/code&gt; substate will be
entered when an async hook promise is rejected.&lt;/p&gt;

&lt;p&gt;Substates are sibling routes. When the &lt;code&gt;new&lt;/code&gt; route of &lt;code&gt;cars.new&lt;/code&gt; is loading, the &lt;code&gt;cars.loading&lt;/code&gt;
substate is entered. The &lt;code&gt;application&lt;/code&gt; route has no parent namespace to nest its siblings.
This makes using the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; substates impossible for an application route.&lt;/p&gt;

&lt;p&gt;Named substates add a new lookup method for substates. The name of the route is pre-pended
onto the substate. So a valid loading substate for &lt;code&gt;application&lt;/code&gt; can be defined as
&lt;code&gt;application_loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://twitter.com/machty"&gt;@machty&lt;/a&gt; for landing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_component-helper'&gt;Component Helper&lt;/h4&gt;
&lt;p&gt;Ember components can be bound via the &lt;code&gt;component&lt;/code&gt; helper. For example this logic
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isRed&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-red&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isBlue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-blue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isGreen&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-green&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can now be replaced by a computed property and the &lt;code&gt;component&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;component&lt;/span&gt; &lt;span class="attribute-name"&gt;colorComponentName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;colorComponentName&lt;/code&gt; should either have a value of &lt;code&gt;x-red&lt;/code&gt;, or &lt;code&gt;x-blue&lt;/code&gt; etc. As
the value of the property changes, the rendered component will also change.&lt;/p&gt;

&lt;p&gt;A big thank you to &lt;a href="https://twitter.com/lukemelia"&gt;@lukemelia&lt;/a&gt; for shipping
this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.10 has favorable rendering performance compared to previous releases. We&amp;#39;re
pleased that Ember 1.11 builds upon that progress. Compared to 1.10, common list
rendering scenarios have improved by about twenty percent and view instance
creation is over twice as fast. These measurements were made using the
&lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Progress continues on the &lt;a href="https://github.com/emberjs/ember.js/pull/10501"&gt;Glimmer rendering engine&lt;/a&gt;
announced at EmberConf 2015. This dramatic performance improvement is expected to
land in Ember.js 1.13.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-11'&gt;Notable Deprecations in 1.11&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.11:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ObjectController&lt;/code&gt; will be removed in Ember 2.0. In Ember 1.11,
both explicitly using an &lt;code&gt;ObjectController&lt;/code&gt; and using the proxying behavior
of a generated &lt;code&gt;ObjectController&lt;/code&gt; will raise deprecation warnings. See the
&lt;a href="/guides/deprecations#toc_objectcontroller"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Initializing instances (via &lt;code&gt;container.lookup&lt;/code&gt;) in initializers is deprecated. For
initialization that requires instances Ember has introduced &amp;quot;instance initializers&amp;quot;. See
the &lt;a href="/guides/deprecations#toc_access-to-instances-in-initializers"&gt;deprecation guide&lt;/a&gt;
for more information, as well as this &lt;a href="https://github.com/emberjs/website/pull/1951"&gt;documentation PR&lt;/a&gt;
and &lt;a href="https://github.com/emberjs/ember.js/pull/10256"&gt;the implementation PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Not a deprecation, but related: The &lt;code&gt;{{bind}}&lt;/code&gt; template helper was a private
helper, and has been deprecated
since Ember 1.10. It has been removed in Ember.js 1.11.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.11.0/CHANGELOG.md"&gt;Ember.js 1.11.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.12.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.12.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
