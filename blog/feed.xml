<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2014-04-05T00:00:00Z</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Core Team Meeting Minutes - 2014/04/04</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/04/05/core-team-meeting-minutes-2014-04-04.html"/>
    <id>http://emberjs.com/blog/2014/04/05/core-team-meeting-minutes-2014-04-04.html</id>
    <published>2014-04-05T00:00:00Z</published>
    <updated>2014-04-05T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;, &lt;a href="https://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;, &lt;a href="https://twitter.com/machty"&gt;@machty&lt;/a&gt;,
&lt;a href="https://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;, &lt;a href="https://twitter.com/wagenet"&gt;@wagenet&lt;/a&gt;, &lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4645"&gt;BUGFIX beta Allow setting of &lt;code&gt;undefined&lt;/code&gt; value to a &lt;code&gt;content&lt;/code&gt; property&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixes setting of &lt;code&gt;undefined&lt;/code&gt; value to a content property. &lt;/p&gt;

&lt;p&gt;Still, checking &lt;code&gt;obj[keyName] === value&lt;/code&gt; in these &lt;a href="https://github.com/selvagsz/ember.js/blob/master/packages_es6/ember-metal/lib/property_set.js#L52-54"&gt;lines&lt;/a&gt; is bypassed in two cases&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the setter value is &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the setter property lies inside the proxied content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using &lt;code&gt;get(obj, keyName)&lt;/code&gt; might resolve. But was quite nervous to do that as it may involve some additional function calls&lt;/p&gt;

&lt;p&gt;+1 by @stefanpenner, but he requests @krisselden to review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Seems good, but @krisselden will review in further detail. Will attempt to have this update in 1.6.0-beta.2.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4636"&gt;BUGFIX beta Ensure context is unchanged when using keywords with itemController.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prior to this change the following code would bind &lt;code&gt;this&lt;/code&gt; in the template block to the itemController&amp;#39;s content (even
though the keyword form of &lt;code&gt;{{each}}&lt;/code&gt; is used).&lt;/p&gt;

&lt;p&gt;This change sets the child view&amp;#39;s &lt;code&gt;_context&lt;/code&gt; property to the current context when using the keyword form of &lt;code&gt;{{each}}&lt;/code&gt;,
and a couple of confirming tests to demonstrate using &lt;code&gt;itemController&lt;/code&gt; specified in either the &lt;code&gt;ArrayController&lt;/code&gt; or the
template directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.jsbin.com/zokali/1/edit"&gt;Failing JSBin&lt;/a&gt; | &lt;a href="http://emberjs.jsbin.com/kecen/1/edit"&gt;Passing JSBin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fixes #4634.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The intent of the &lt;code&gt;each foo in bar&lt;/code&gt; syntax is specifically to preserve the current context. However, using &lt;code&gt;each foo in bar&lt;/code&gt; syntax along
with an &lt;code&gt;itemController&lt;/code&gt; has always changed the inner templates context. This change seems good, but all context related changes
require a bit of additional review. @krisselden to review further and +1/-1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4598"&gt;BUGFIX beta {{view}} helper no longer uses Ember.View global, instead uses container view:default&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the ES6-ify process @rjackson left a comment mentioning that the {{view}} helper needs to not look up
Ember.View globally. This PR fixes this by looking up view:default from the container (which Ember.View is
registered at, by default).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking up &lt;code&gt;view:default&lt;/code&gt; in the container is definitely more appropriate than hard-coding to &lt;code&gt;Ember.View&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Merged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4655"&gt;BUGFIX beta Add better debugging for DefaultResolver.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adds nice log entries if your application was created with &lt;code&gt;LOG_RESOLVER&lt;/code&gt; set.&lt;/p&gt;

&lt;p&gt;Example log entries:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[ ] route:application ..........................................  App.ApplicationRoute
[✓] route:index ................................................  App.IndexRoute
[ ] controller:application .....................................  App.ApplicationController
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Fixes #4654.&lt;/p&gt;

&lt;p&gt;Example &lt;a href="http://emberjs.jsbin.com/maxum/1"&gt;JSBin&lt;/a&gt; (look at console)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This adds good insight into exactly what the resolver is doing and what you need to implement to add
custom behavior. In the future, a better API needs to be created to enable these logging options (hanging
a bunch of properties off of the application instance is sub-optimal).&lt;/p&gt;

&lt;p&gt;Merged (will be in 1.6.0-beta.2).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4352"&gt;FEATURE ember-handlebars-radio-buttons Implement radio buttons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This updates &lt;a href="https://github.com/emberjs/ember.js/pull/1235"&gt;#1235&lt;/a&gt; to extend component, adds handlebar helpers,
updates tests and documentation. I think a lot of people would be pleased to see radio buttons in the core and I 
see a lot of developers at my company have a hard time with radio buttons when they first get started with Ember,
so I think this would be a great addition to the core.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would prefer for this to live as an addon for a while to allow the community to test (and influence) the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/issues/4613"&gt;Transitioning to a globbing route does not work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s a corner case, so I don&amp;#39;t know if this should work, or if you would fix that.
Anyway, in my application, I&amp;#39;m defining a notFound route, hit when the user plays with the url and gives something wrong.
I also want redirect to this route when the user try to access an unexisting record (ie the backend answer a 404). So I basically tried to define an error handler in the ApplicationRoute, and transitionTo(&amp;#39;notFound&amp;#39;). Unfortunately it does not work. Though if I remove the globbing path, then it works for the redirection, but obviously not when entering unknown url.&lt;/p&gt;

&lt;p&gt;I made a jsbin reproducing it: &lt;a href="http://emberjs.jsbin.com/ucanam/4401/edit"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to transition to a globbing route, but like any target route with a dynamic segment, you need to
provide a object / param, which in this case can just be a string of the path you want to use for that globbed segment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.transitionTo(&amp;#39;yargle&amp;#39;, &amp;quot;MY/COOL/URL&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.jsbin.com/ucanam/4522/edit"&gt;JSBin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.5.0 and 1.6 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html"/>
    <id>http://emberjs.com/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-30T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_new-features-in-1-5"&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class="anchorable-toc" id="toc_handlebars-logging-of-primitive-values"&gt;Handlebars Logging...&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-features-in-1-5'&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_handlebars-logging-of-primitive-values'&gt;Handlebars Logging of Primitive Values&lt;/h4&gt;
&lt;p&gt;This feature allows you to log primitive values (strings, numbers, etc) from within your
templates. Previously, the &lt;code&gt;{{log}}&lt;/code&gt; helper only allowed usage of bound property lookup.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{log &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;**LOOKEY HERE**&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_new-testing-helpers'&gt;New Testing Helpers&lt;/h4&gt;&lt;h5 class='anchorable-toc' id='toc_routing-helpers'&gt;Routing Helpers&lt;/h5&gt;
&lt;p&gt;A few new testing helpers have been added to make it easier to make assertions on the state
of routing in your application (for example to confirm clicking a given link results in a
redirect to a specific route).&lt;/p&gt;

&lt;p&gt;New routing test helpers: &lt;code&gt;currentRouteName&lt;/code&gt;, &lt;code&gt;currentPath&lt;/code&gt;, and &lt;code&gt;currentURL&lt;/code&gt;.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_trigger-event-helper'&gt;Trigger Event Helper&lt;/h5&gt;
&lt;p&gt;A new &lt;code&gt;triggerEvent&lt;/code&gt; helper has been created to allow triggering of arbitrary events on an element.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;triggerEvent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#some-element-id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;dblclick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-computed-readonly'&gt;Ember.computed.readOnly&lt;/h4&gt;
&lt;p&gt;Generally, when you use &lt;code&gt;Ember.computed.oneWay&lt;/code&gt; you would also need to call &lt;code&gt;readOnly&lt;/code&gt; to ensure no data
propagates back up.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// prior to Ember.computed.readOnly you would have to do the following:&lt;/span&gt;
Ember.computed.oneWay(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).readOnly()

&lt;span class="comment"&gt;// in 1.5 you can use the following for the same result:&lt;/span&gt;
Ember.computed.readOnly(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-isblank'&gt;Ember.isBlank&lt;/h4&gt;
&lt;p&gt;A new shortcut for checking if a particular object is empty or an empty string:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.isBlank();                &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;undefined&lt;/span&gt;);       &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank([]);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);          &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;  &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank({});              &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="content"&gt; Hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);    &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello world&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);   &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;]);         &lt;span class="comment"&gt;// false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_eager-updating-url'&gt;Eager Updating URL&lt;/h4&gt;
&lt;p&gt;Previously, the URL in the address bar would only update at the very end of
the transition. This change causes the URL update to happen immediately unless
the transition was aborted/redirected within the same run loop, which provides
for a better UX 99% of the time.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_auto-location'&gt;Auto Location&lt;/h4&gt;
&lt;p&gt;Adds &lt;code&gt;auto&lt;/code&gt; as a &lt;code&gt;location&lt;/code&gt; option for the app&amp;#39;s &lt;code&gt;Router&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.reopen({
  &lt;span class="key"&gt;location&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;auto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When used, Ember will select the best location option based off browser
support with the priority order: history, hash, none.&lt;/p&gt;

&lt;p&gt;Clean pushState paths accessed by hashchange-only browsers will be redirected
to the hash-equivalent and vice versa so future transitions look consistent.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-action-lookup'&gt;Bound Action Lookup&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{action}}&lt;/code&gt; helper will now use a non-quoted parameter and perform a bound property
lookup against the action&amp;#39;s target at the time the event is triggered. This allows usage
of a dynamic action name (determined by looking up the property).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_routes-inherit-model'&gt;Routes Inherit Model&lt;/h4&gt;
&lt;p&gt;Ember routes and leaf resources (without nested routes) will inherit the parent route&amp;#39;s model.&lt;/p&gt;

&lt;p&gt;Take the following example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;edit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});

App.PostRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; {&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ZOMG&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AWESOME&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
  }
});

App.PostEditRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.modelFor(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in 1.5, you do not have to define the &lt;code&gt;model&lt;/code&gt; hook for &lt;code&gt;PostEditRoute&lt;/code&gt; as the default implementation
is to use the parent routes model.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_ever-present-_super-breaking-bugfix'&gt;Ever-present _super (Breaking Bugfix)&lt;/h4&gt;
&lt;p&gt;Prior versions of Ember.js used a super mechanism that was un-safe for mixins. If more than
one &lt;code&gt;_super&lt;/code&gt; was called for a given function name and there was no terminating function, an
infinite loop would occur. See &lt;a href="https://github.com/emberjs/ember.js/issues/3523"&gt;#3523&lt;/a&gt; for
further discussion.&lt;/p&gt;

&lt;p&gt;The solution released in 1.5 fixes this behavior (see &lt;a href="https://github.com/emberjs/ember.js/pull/3683"&gt;#3683&lt;/a&gt;),
but also breaks the edge-case of using &lt;code&gt;_super&lt;/code&gt; out of line. For instance:&lt;/p&gt;
&lt;div class="highlight JavaScript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="function"&gt;doIt&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    Ember.run.once(&lt;span class="local-variable"&gt;this&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;._super);
  }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is no longer a supported use of &lt;code&gt;_super&lt;/code&gt;. See &lt;a href="http://emberjs.jsbin.com/xuroy/1/edit?html,js,output"&gt;this jsbin&lt;/a&gt;
for a live example. If this change impacts you, please comment on &lt;a href="https://github.com/emberjs/ember.js/pull/4301"&gt;#4632&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_handlebars-each-helper-checks-markup'&gt;Handlebars {{each}} Helper Checks Markup&lt;/h4&gt;
&lt;p&gt;In some cases, the browser may add or fix tags, which change the parentage of metamorph tags. This problem happens frequently when the
developer doesn&amp;#39;t include the TBODY tag inside a table for example.  This prevents the framework from updating or cleaning the underlying DOM
elements.&lt;/p&gt;

&lt;p&gt;An assertion has been added in non-production builds that indicates that the metamorph start and end tags have different parents.
This is most commonly caused by using an &lt;code&gt;{{each}}&lt;/code&gt; inside of a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag without specifying a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example demonstrating the assertion (&lt;a href="http://emberjs.jsbin.com/fotin/3/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the resolution is to include a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; (&lt;a href="http://emberjs.jsbin.com/fotin/2/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h3&gt;
&lt;p&gt;As usual, there are a ton of bug fixes and small improvements in this
release. You can see a list of all the changes in the CHANGELOG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.5.0/CHANGELOG.md"&gt;Ember.js 1.5.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.6.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.6.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/07</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-07.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-07.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @tomdale, @trek, @wycats&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_features-pending-go-decision-a-href-https-github-com-emberjs-ember-js-issues-4052-tracking-issue-a'&gt;Features pending &amp;#39;Go&amp;#39; decision. &lt;a href="https://github.com/emberjs/ember.js/issues/4052"&gt;Tracking Issue&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;ember-routing-add-model-option&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4293"&gt;#4293&lt;/a&gt;
Resolution: Go&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Query Params New - Sticky Params?&lt;/p&gt;

&lt;p&gt;Should query paramters remain on route change? When do we want it? All the time?
How do we disable it? Proposals thus far:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;/r?sort=asc ← keep
/r/ios?sort=hot ← keep? “model specific state”
/r/gonewild ← keep? “model specific state”
/r/foo?name=’something related to foo’
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or
&lt;code&gt;
/blog/somepost?comments=true
then navigate to
/blog/someOtherPost?comments=true ← keep?
/blog/someOtherPostthen ← don’t keep?
// then navigate to
/blog/somepost?comments=true ← kept from before? kept from last route? gone from last route?
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Possible opt-out via helper?
&lt;code&gt;
{{link-to ‘Home’ ‘home’ (query-params sort=null)}}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preserve stickiness as the default, but add a (query-params-reset) subexpression helper
(in addition to query-params) that can take 0 or more args and will reset any query params
not explicitly specified in the helper invocation. The puts the stickiness in the control
of the caller (the link-to helper).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a sticky option to the route query params config hash, which defaults to true. If set to
false, any links into that route will reset (unless QP values are explicitly provided in the
link-to helper), but any links to that route from within that route hierarchy will be sticky,
which effectively makes it so that if you leave a route and come back into it via a link-to,
the QPs specified as sticky:false will be reset. Keep in mind though that leaving a route and
pressing the back button will be &amp;quot;sticky&amp;quot; since the previous values on the controller will be
restored based on the previous URL.&lt;/p&gt;

&lt;p&gt;Example JSBin: http://emberjs.jsbin.com/ucanam/4102&lt;/p&gt;

&lt;p&gt;Resolution: Sticky by default, with appropriate escape valves to opt out per route change&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4374"&gt;ES6 ember-metal, ember-runtime, ember-debug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Work is currently being done (by @thomasaboyt amongst others) on the es6-module-transpiler
to remove the need for intermediate variables. This will both reduce filesize (less total
output), and enable cycles support (since it is evaluated lazily).&lt;/p&gt;

&lt;p&gt;We believe there is more file size savings to be had in the way the view layer, and would like
to be able to progress in the ES6 effort. Currently rebasing upon any change to ember-metal,
ember-runtime, and ember-debug (rare) is difficult. I believe that we cannot maintain the long
running pull-request branch for much longer and would like time to process/deal-with any issues
that crop up from the swap (missing global exports for example) before branching the next beta
series (2 weeks).&lt;/p&gt;

&lt;p&gt;RESOLUTION: Merge (pending specific issues that have already been noted), but before shipping another globals build we should deal with the file size issue. We have ~7 weeks until the 1.6 release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4404"&gt;The &lt;code&gt;each&lt;/code&gt; helper checks that the metamorph tags have the same parent.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was generally approved in the 2014-02-28 meeting once some verbiage tweaks were made. @trek&amp;#39;s suggested
changes have been made, this is ready to go.&lt;/p&gt;

&lt;p&gt;Resolution: merge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4291"&gt;FEATURE Ember.computed.instance&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A computed property that creates a new instance of source. &lt;code&gt;source&lt;/code&gt; can be any
Class constructor, object, array, or a path to a local property.  Optionally you can
specify the initial value(s), if only &lt;code&gt;initialValue&lt;/code&gt; is given and if it is a string, it
is treated as a local path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution: make it an add on that’s not core. CPM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4124"&gt;Deprecate edge-case get and normalizeTuple behavior before fixes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/emberjs/ember.js/pull/3852"&gt;#3852&lt;/a&gt; changes some edge case behavior for get and normalizeTuple. Ahead of those changes, this commit introduces deprecation notices.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deprecate get for local paths on global contexts, only if they
return data.&lt;/li&gt;
&lt;li&gt;Deprecate normalizeTuple calls that return a non-global contenxt
and a simple global path.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4459"&gt;Deprecate global access from templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PR by @mixonic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replaces #4358. These deprecations are narrow in scope, and only impact {{Global}} and
{{#each Global}}. They do not deprecate any other global access in templates. Deprecating
all global access from templates would a) need to be done helper-by-helper or b) would impact
the get and binding code at a lower level.&lt;/p&gt;

&lt;p&gt;@xtian I&amp;#39;m rewritten your first commit but preserved it here.&lt;/p&gt;

&lt;p&gt;@ebryn yo.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4328"&gt;Container throws if injection registered for already instantiated type&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Prior to this commit, the container would happily allow you to register an injection for a
type that had already been instantiated. This led to confusing-to-debug situations where an
injection is registered but a container-created instance doesn&amp;#39;t have the injection applied.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comment from @stefanpenner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you know I&amp;#39;m all for this change, but it may cause people some inconvenience. I personally
consider it a bugfix, but i would like @tomdale or @wycats&amp;#39;s +1/-1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution: @stefanpenner &amp;amp; @wycats will chat.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4097"&gt;Expose asObject to Ember.Handlebars.precompile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comment from @rwjblue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This was mentioned in the core team meeting on 2014-02-28. It was mentioned that this should be
changed upstream (in Handlebars itself), but as I reviewed (to let you know where that change
would be needed) I realized that this PR is simply exposing the functionality that already
exists within Handlebars, but is not exposed to &lt;code&gt;Ember.Handlebars.precompile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As such, I think that we should likely re-evaluate the prior decision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution. Ship it. This just passes from Handlebars to Ember.Handlebars&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/14</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-14.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-14.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @tomdale, @trek, @wycats&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h3 class='anchorable-toc' id='toc_go-no-go-feature-listing'&gt;Go/No-Go Feature Listing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;query-params-new&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4008"&gt;#4008&lt;/a&gt;
 Still a no-go, while @machty and @wycats hash out the specifics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_pr-s-issues-to-review'&gt;PR&amp;#39;s/Issues To Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4496"&gt;canSetInnerHTML: IE cannot set innerHTML on several tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IE doesn&amp;#39;t support .innerHTML = on COL, COLGROUP, FRAMESET, HTML, STYLE, TABLE, TBODY, TFOOT, THEAD, TITLE, or TR.&lt;/p&gt;

&lt;p&gt;Resolution: definitely a bug, but this will be fixed with HTMLbars so we&amp;#39;d rather wait for that to
land instead of fixing now&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4360"&gt;Overwrite observers and listeners in Ember.CoreObject.create().&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modifies mixin inclusion code in &lt;code&gt;makeCtor&lt;/code&gt; to remove any observers/listeners setup on the property or key prior
to adding the property.&lt;/p&gt;

&lt;p&gt;My concern is the modification in this particular code path.&lt;/p&gt;

&lt;p&gt;Resolution: this used to be how create worked, but we moved away with this for performance reasons. &lt;code&gt;.extend&lt;/code&gt;
is intended for design-time use, not runtime: use &lt;code&gt;.extend().create() or&lt;/code&gt;.createWithMixins()`&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/pull/4520"&gt;Use injected test helpers instead of local functions.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are injecting the application with our helpers (into the App.testHelpers hash), we should be using
that helper and not simply calling the function in local scope.&lt;/p&gt;

&lt;p&gt;As the tests show, this allows a user to override the internal helpers with a tailored version for their scenarios.&lt;/p&gt;

&lt;p&gt;Resolution: make it possible but still private API. Assert on attempting to override built-in helpers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Core Team Meeting Minutes - 2014/03/21</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-21.html"/>
    <id>http://emberjs.com/blog/2014/03/22/core-team-meeting-minutes-2014-03-21.html</id>
    <published>2014-03-22T00:00:00Z</published>
    <updated>2014-03-22T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Although most of our collaboration takes place on Github, IRC
(&lt;code&gt;#emberjs&lt;/code&gt; on freenode.net), and our &lt;a href="http://discuss.emberjs.com/"&gt;Discourse site&lt;/a&gt;
the &lt;a href="/team"&gt;Ember.js Core Team&lt;/a&gt; meets privately every
Friday at 2pm EST/11am PST through Google Hangout for a weekly
discussion of all things Ember.&lt;/p&gt;

&lt;p&gt;If you have a topic you&amp;#39;d like to see covered, contact your favorite
core team member and let them know!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_attendees'&gt;Attendees&lt;/h4&gt;
&lt;p&gt;@ebryn, @krisselden, @machty, @rwjblue, @stefanpenner, @trek, @wycats, @wifelette&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_topics'&gt;Topics&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_prs-issues-to-review'&gt;PRs/Issues To Review&lt;/h4&gt;
&lt;p&gt;We reviewed the following PRs and Issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;query-params-new&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/pull/4008"&gt;#4008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing new here. We&amp;#39;re working very hard to get this correct the first time
and have something to demo at EmberConf.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move instanceMetas into object&amp;#39;s meta &lt;a href="https://github.com/emberjs/ember.js/pull/4559"&gt;#4559&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;InstanceMetas for objects&amp;#39; ReduceComputedPropertys are stored on the RCP instance (ie. on the descriptor) as &lt;code&gt;this._instanceMetas[key]&lt;/code&gt; where key = guidOfTheObject + &amp;#39;:&amp;#39; + propertyName (see http://git.io/t9bKxA). The RCP can&amp;#39;t know when the object is garbage collected, hence the _instanceMetas array grows unbounded.&lt;/p&gt;

&lt;p&gt;Resolution: if David Hamilton +1’s, we merge as a bugfix.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow multiple arguments to be passed to EmberStringUtils.fmt() &lt;a href="https://github.com/emberjs/ember.js/pull/4518"&gt;#4518&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to use Ember.String.fmt with the same multi-arg signature as String#fmt:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.String.fmt(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;%@ %@&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;// vs&lt;/span&gt;
Ember.String.fmt([&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;%@ %@&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;])
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Resolution: Seems reasonable. Merge&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deprecate App.Store in favor of App.ApplicationStore &lt;a href="https://github.com/emberjs/data/pull/1808"&gt;#1808&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes the application level store lookup much closer to the reset of our conventions (ala &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; and &lt;code&gt;App.ApplicationSerializer&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This change also allows specifying a custom store when using non-global resolver (i.e. EAK/ember-cli). Previously, we were only looking for a property &lt;code&gt;Store&lt;/code&gt; hung off of the application instance. Now you can have a module named (in the case of stock EAK setup):
&lt;code&gt;app/stores/application&lt;/code&gt; or &lt;code&gt;app/application/store.js&lt;/code&gt; (pods structure).&lt;/p&gt;

&lt;p&gt;A deprecation warning was added, and the prior technique still works so this is not a breaking change (although I believe that we should remove before the prior lookup prior to 1.0).&lt;/p&gt;

&lt;p&gt;Resolution: Seems reasonable. Merge&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Road to Ember Data 1.0</title>
    <link rel="alternate" href="http://emberjs.com/blog/2014/03/18/the-road-to-ember-data-1-0.html"/>
    <id>http://emberjs.com/blog/2014/03/18/the-road-to-ember-data-1-0.html</id>
    <published>2014-03-18T00:00:00Z</published>
    <updated>2014-03-18T00:00:00Z</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Ember Data 1.0 is coming soon. We have a few last features to land before we
can confidently make guarantees around not breaking the API. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A guarantee that if one side of a two-way relationship changes, the other
side will remain...&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Ember Data 1.0 is coming soon. We have a few last features to land before we
can confidently make guarantees around not breaking the API. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A guarantee that if one side of a two-way relationship changes, the other
side will remain in sync, even if it hasn&amp;#39;t loaded yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All relationships will become async, but DataBoundPromises will make them
work well in observers, computed properties and in templates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just like how it took us a few attempts to get the router right—but now we&amp;#39;ve
got the best one in JavaScript—getting Ember Data right has taken longer than
we thought, but it&amp;#39;s here and it&amp;#39;s almost ready for a 1.0.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Ever since the 1.0 release, developers building apps on top of Ember.js have
appreciated the stability and forward-momentum that our commitment to &lt;a href="http://semver.org/"&gt;Semantic
Versioning&lt;/a&gt; allows.&lt;/p&gt;

&lt;p&gt;We frequently get asked, &amp;quot;Ember.js is great, but what about Ember Data?&amp;quot; Today,
we&amp;#39;d like to give you an update on where Ember Data is and where it&amp;#39;s headed
soon.&lt;/p&gt;

&lt;p&gt;First, the good news: there is only one major breaking change planned before
releasing Ember Data 1.0, and we are doing our best to minimize the impact that
that change will have on existing apps.&lt;/p&gt;

&lt;p&gt;Other than that, we anticipate that the current feature set and API will serve
as a stable base for the foreseeable future. In other words, we don&amp;#39;t
anticipate needing any more user-facing breaking changes in order to
accommodate future changes to the architecture.&lt;/p&gt;

&lt;p&gt;So why haven&amp;#39;t we released a 1.0 yet? There are two more features that we&amp;#39;re
working on: an improved relationship architecture, and more consistent API when
dealing with relationships.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-single-source-of-truth'&gt;A Single Source of Truth&lt;/h2&gt;
&lt;p&gt;Modeling relationships between records is easily the most difficult feature
we&amp;#39;ve added to Ember Data. Finding a common solution is complicated because of
how much JSON servers differ from one another. Things get even more interesting
when you introduce streaming changes over WebSockets.&lt;/p&gt;

&lt;p&gt;The naïve approach is to declare that the problem is too domain-specific and
that each developer should hand-roll relationships via a simplistic abstraction
(like sugar around computed properties).&lt;/p&gt;

&lt;p&gt;However, we have observed that everyone who tries to implement their own
domain-specific relationships quickly ends up with their own ad hoc
mini-framework. As we did with Ember, we wanted to look at the problems shared
across all of these applications, and tease out the core abstractions.&lt;/p&gt;

&lt;p&gt;We wanted to build something that was powerful, to help save time for advanced
developers, while also being accessible to developers just getting started with
client-side web applications.&lt;/p&gt;

&lt;p&gt;To take a simple example, sometimes a has-many relationship is stored in the
parent record&amp;#39;s JSON representation:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lord Grantham&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [&lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="integer"&gt;4&lt;/span&gt;]
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Other times, the same relationship may be saved as a foreign key on the children:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lady Mary&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;parent_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Often, the same application will represent the same relationship in both forms,
depending on whether the records are being loaded or saved.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll spare you the details, but the permutations get even more complex when you
introduce things like streaming changes from the server over a socket.&lt;/p&gt;

&lt;p&gt;The point of highlighting the essential complexity here is to demonstrate that
we couldn&amp;#39;t just hardcode support for each one; each representation will likely
co-exist and interoperate with multiple other representations.&lt;/p&gt;

&lt;p&gt;One-way relationships aren&amp;#39;t too bad--you can get pretty far with hand-rolled
solutions before inevitably hitting a wall. The real problem comes up when you
have two-way relationships: an article has many comments, but each comment also
belongs to the article.&lt;/p&gt;

&lt;p&gt;Because both sides of the relationship aren&amp;#39;t always loaded together, and
because each side may represent the relationship differently (a foreign key on
the comment and an array on the article), maintaining this link has
historically been very difficult for us.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s especially complicated when you want to support updated data coming in
from the server. Imagine that refreshing the article provides a new set of
comments, but you also know that the user is in the middle of creating her own
comment. How do you make sure that the &lt;code&gt;comments&lt;/code&gt; array takes both of those
facts into consideration?&lt;/p&gt;

&lt;p&gt;At a high-level, the solution is this: instead of internally storing the
relationships as state on each record that needs to be synchronized, we
maintain a single entity in memory that represents the logical relationship
&lt;strong&gt;between&lt;/strong&gt; the records. That entity exists regardless of which side of the
relationship the application has loaded.&lt;/p&gt;

&lt;p&gt;For example, if you change the belongs-to relationship on a comment, you are
changing the has-many side even if the application has not yet loaded the
article. When the application finally does load the article, the local
belongs-to change is ready to apply.&lt;/p&gt;

&lt;p&gt;The long and short of it is that the two sides of a two-way relationship will
remain in sync in Ember Data 1.0, regardless of the order the records were
loaded, the way they were loaded, or how the relationships were represented in
the payloads.&lt;/p&gt;

&lt;p&gt;We are doing this work on the
&lt;a href="https://github.com/emberjs/data/tree/single-source-of-truth"&gt;single-source-of-truth&lt;/a&gt;
branch (thank you &lt;a href="https://github.com/igort"&gt;Igor Terzic&lt;/a&gt; for getting this over
the finish line!) and hope to merge it soon.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_async-relationships'&gt;Async Relationships&lt;/h2&gt;
&lt;p&gt;Currently in Ember Data, you must specify ahead of time whether relationships
are synchronous or asynchronous. Determining whether or not a relationship is
asynchronous requires knowing how the server will represent the data when
sending it to your application. That isn&amp;#39;t fatal, but it does tightly couple
the semantics of your application to the server.&lt;/p&gt;

&lt;p&gt;The fatal problem comes when you start refactoring your server API. For
example, in a has-many relationship, perhaps instead of inlining an array of
record IDs you instead send a URL where the client can retrieve the collection.&lt;/p&gt;

&lt;p&gt;All of a sudden, your application starts breaking in very Zalgo-esque ways (of
note: if you have not read Isaac&amp;#39;s &lt;a href="http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony"&gt;excellent essay on async
APIs&lt;/a&gt;,
please do).&lt;/p&gt;

&lt;p&gt;We strongly consider how easy or difficult refactorings are when designing
APIs, and in this case, we made a mistake. Making small changes to your server
API should not require widespread changes to the application that consumes it.&lt;/p&gt;

&lt;p&gt;For what it&amp;#39;s worth, not all refactorings are created equal. In this case, we
observed that real apps almost always shuffle around their payloads as they
grow, hitting this problem. (In other cases, if we see that real-world
applications rarely change in a particular way, we might prioritize convenience
over refactor-proofing.)&lt;/p&gt;

&lt;p&gt;The solution is to treat &lt;strong&gt;all&lt;/strong&gt; relationships as async, and use promises to
represent their values. By relying on Promises/A+&amp;#39;s guarantees around
asynchronicity, we can avoid releasing Zalgo into your application. In the
future, if the way you represent a relationship changes, or the order in which
the relationship becomes available changes, your application will continue to
function with no changes required.&lt;/p&gt;

&lt;p&gt;Using a Promise in JavaScript is pretty simple: call &lt;code&gt;.then&lt;/code&gt; on it and do
something with the returned value in the callback. But what if you want to use
an Ember Data relationship in a template or in a computed property? How would
that work?&lt;/p&gt;

&lt;p&gt;Ember Data 1.0 introduces a subclass of Promise called &lt;code&gt;DataBoundPromise&lt;/code&gt;. This
object allows you to observe properties on the Promise, just as you would on a
normal object. When the promise resolves, those properties will be updated to
match the underlying object. If you &lt;code&gt;get&lt;/code&gt;a property from a &lt;code&gt;DataBoundPromise&lt;/code&gt;
when it is unresolved, it will return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; article = comment.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// If the promise has not yet resolved&lt;/span&gt;
article.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;//=&amp;gt; undefined&lt;/span&gt;

&lt;span class="comment"&gt;// If the promise has resolved&lt;/span&gt;
article.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;//=&amp;gt; &amp;quot;Ember Data Roadmap&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The basic idea is that when you&amp;#39;re working within the context of Ember data bindings (templates, computed properties, observers), you can use a relationship as if it were a synchronous value, and let the data binding system handle the promise. This means that in many cases, this change won&amp;#39;t affect your existing code, and will indeed improve your ability to work with asynchronous relationships in templates and computed properties (a major pain point today).&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;not&lt;/strong&gt; rely on this behavior when you want to use the value in imperative JavaScript (outside of computed properties); in that case, always use the promise&amp;#39;s &lt;code&gt;then()&lt;/code&gt; method to ensure the the value is available, lest you unleash Zalgo into your own apps. Only &lt;code&gt;.get&lt;/code&gt; properties from a &lt;code&gt;DataBoundPromise&lt;/code&gt; if you&amp;#39;re relying on Ember&amp;#39;s data binding functionality to update the template or computed property when the promise finally does resolve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Only use &lt;code&gt;get&lt;/code&gt; on &lt;code&gt;DataBoundPromises&lt;/code&gt; inside of observers or computed properties. Otherwise, always treat them as regular promises and use &lt;code&gt;.then&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h2&gt;
&lt;p&gt;There are a number of outstanding bugs we&amp;#39;d like to get fixed before we feel comfortable declaring 1.0. Some of them involve tightening up behavior that is currently undefined, and others are bugs we want to make sure applications don&amp;#39;t come to rely on.&lt;/p&gt;

&lt;p&gt;Most notably, the current &lt;code&gt;RESTAdapter&lt;/code&gt; calls the wrong &lt;code&gt;normalize&lt;/code&gt; hook for embedded or sideloaded data in &lt;code&gt;pushPayload&lt;/code&gt;. &lt;a href="https://github.com/emberjs/data/issues/1804"&gt;Fixing this&lt;/a&gt; is a high priority and blocks the 1.0 release.&lt;/p&gt;

&lt;p&gt;We are also committed to making sure that the documentation is up to the high quality standards people expect from Ember before we declare 1.0.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-s-next'&gt;What&amp;#39;s Next&lt;/h2&gt;
&lt;p&gt;We are committed to following &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, and want to make sure we have a solid base we can build on for the next few years.&lt;/p&gt;

&lt;p&gt;We think the decision to iterate on Ember.js before locking down the API has given us a foundation that we can continue to iterate on for years, without breaking backwards compatibility. We want the same for Ember Data.&lt;/p&gt;

&lt;p&gt;Once the issues we&amp;#39;ve outlined above are complete, we&amp;#39;ll be releasing a 1.0 of Ember Data that will not see breaking changes for some time. We intend to keep the release of Ember.js and Ember Data in sync, so that the first version in the Ember Data 1.x series will be whatever the current version of Ember is at that time.&lt;/p&gt;

&lt;p&gt;For example, if Ember.js 1.7 is the current stable version at the time of Ember Data&amp;#39;s first stable release, it will be Ember Data 1.7.&lt;/p&gt;

&lt;p&gt;As with Ember.js, we intend Ember Data to follow the same &lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;Chrome-inspired six-week release process&lt;/a&gt;. That release process has paid dividends in terms of predictability and momentum, and the feedback has been overwhelmingly positive. Importantly, having separate stable, beta and canary releases also allows us to clearly &lt;a href="http://emberjs.com/builds/#/beta"&gt;communicate which features are stable&lt;/a&gt; and ready for production, and which are still being worked on.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-framework-for-data'&gt;A Framework for Data&lt;/h2&gt;
&lt;p&gt;As we outlined in &lt;a href="http://www.youtube.com/watch?v=jScLjUlLTLI"&gt;our keynote last week at Fluent&lt;/a&gt;, we believe that frameworks exist to make doing the right thing feel better than doing the wrong thing. By codifying best practices in code, frameworks allow their communities to build further abstractions, creating a virtuous cycle that grows more and more powerful over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We think of Ember Data as a framework for managing your models and relationships.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relationships are difficult to get right, but by giving in to temptation and having everyone roll their own solutions, the community cannot build further abstractions on top of the concept of relationships.&lt;/p&gt;

&lt;p&gt;Earlier on, when we started with Ember Data, we tried to codify good practices, but didn&amp;#39;t provide a flexible enough primitive underneath as an escape valve. Because people are interacting with servers they don&amp;#39;t always control, we realized that having a good escape valve was more important in Ember Data than usual.&lt;/p&gt;

&lt;p&gt;In order to make sure that the community would still be able to build on top of the Ember Data abstraction, we tried our best to isolate the code that is different between applications to the Adapter. This means that if someone writes a plugin for Ember Data, they can assume that models and relationships will look the same in all apps that use it, even though application backends can vary considerably.&lt;/p&gt;

&lt;p&gt;In earlier versions of Ember Data, we were too religious about this separation, forcing every application to bear significant costs in the adapter layer. When we rebooted Ember Data six months ago, we took a hard look at striking a better balance between these competing concerns. Based on the feedback we&amp;#39;ve gotten since then, we believe that Ember Data is now a great fit for applications that have very unique backends, as well as applications that want direction on how to build a backend that &amp;quot;just works&amp;quot; with Ember Data.&lt;/p&gt;

&lt;p&gt;We are committed to getting things right before declaring 1.0. The router in Ember.js went through several similar iterations, which were painful at the time, but we believe the results speak for themselves. Adapting to real-world usage is an important part of our design process, and we will always prioritize thinking through problems carefully over rushing to ship.&lt;/p&gt;

&lt;p&gt;Given that, we hope that you will trust us when we say that Ember Data is on the cusp of the level of quality that we demand from the 1.0 versions of our open source projects. If you start building now, you&amp;#39;ll be very happy with the forward momentum that having a community with shared understanding will bring.&lt;/p&gt;
</content>
  </entry>
</feed>
