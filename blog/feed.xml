<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2015-03-26T20:00:00-04:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember.js 1.11.0 and 1.12 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html"/>
    <id>http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html</id>
    <published>2015-03-26T20:00:00-04:00</published>
    <updated>2015-03-26T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.11.0 and the
first beta in the 1.12 series. This comes as the eleventh cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.11 release represents the effort of at least 87 contributors
across over 646 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-11'&gt;New Features in Ember.js 1.11&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_bound-attribute-syntax'&gt;Bound Attribute Syntax&lt;/h4&gt;
&lt;p&gt;Current Ember developers are familiar with the &lt;code&gt;bind-attr&lt;/code&gt; syntax, used
to declare an attribute binding on an HTML element. An original
motivation for HTMLBars was to improve on this syntax.&lt;/p&gt;

&lt;p&gt;Ember 1.11 introduces a more intuitive API for attribute binding. For
example, here the &lt;code&gt;color&lt;/code&gt; variable is bound to the class of a div:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The inline if helper can also be used in these contexts:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For some attributes, like the &lt;code&gt;disabled&lt;/code&gt; boolean, passing a literal value
is desirable. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To allow the data-binding of non-string values to boolean properties and
custom element properties, bound attributes are implemented with a
&lt;strong&gt;property-first&lt;/strong&gt; setter.&lt;/p&gt;

&lt;p&gt;When binding to an attribute, Ember first checks to see if that attribute is a
property of the element&amp;#39;s DOM node (with normalization of capitalization). If it
is, the value is set with a property. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// disabled is a property of input elements, so...&lt;/span&gt;
input.disabled = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attribute is not present as a property, then its value is set as an
attribute:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// class is not a property of div elements, do...&lt;/span&gt;
div.setAttribute(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;red&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For SVG attributes and the style attribute, we&amp;#39;ve made an exception to this pattern
and simply use &lt;code&gt;setAttribute&lt;/code&gt; at all times.
Despite these exceptions, the property-first rule is a good way to describe what is
happening behind the scenes. In practice, the binding syntax feels natural.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
and &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt; for their effort on the design and implementation
of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_escaping-content-in-htmlbars'&gt;Escaping Content in HTMLBars&lt;/h4&gt;
&lt;p&gt;Bound attribute syntax introduces several new uses of mustaches
(the &lt;code&gt;{{&lt;/code&gt; syntax used in Ember templates). These new uses
come with new security considerations.&lt;/p&gt;

&lt;p&gt;Two notable new considerations are mustache use inside style
contexts, and inside JavaScript contexts. For example, without
escaping this
binding would be vulnerable to an XSS attack (via ActiveX
controls) in IE8:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;userProvidedWidth&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Implementing CSS and JavaScript context-sensitive escaping
will require further research and development. In Ember 1.11,
bound &lt;code&gt;style&lt;/code&gt; attributes will warn when the value is not marked safe.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy, log a warning }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;style&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="key"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="attribute-name"&gt;px&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The examples that follow are intended to demonstrate how this
works in practice. For example these bindings Just Work:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! Works as expected }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Works as expected, and escapes unsafe urls }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Warnings about unsafe bindings other than &lt;code&gt;style&lt;/code&gt; will be introduced
before Ember 2.0.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;onmouseover&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;alert(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="error"&gt;;&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! No escaping strategy in 1.11 }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="tag"&gt;width&lt;/span&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;someProperty&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;px&lt;span class="tag"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Strings that are known to be adequately escaped can be
passed through the &lt;code&gt;htmlSafe&lt;/code&gt; function to mark them safe.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;layout&lt;/span&gt;: Ember.HTMLBars.compile(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;a style='width: {{someProperty}}px'&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="function"&gt;someProperty&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.String.htmlSafe(&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;));
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someKnownSafeProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A less savory alternative is to use the &lt;code&gt;{{{&lt;/code&gt; &amp;quot;escaped mustache&amp;quot; style. There are
plans to improve escaped content as we approach 2.0.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_inline-if'&gt;Inline if&lt;/h4&gt;
&lt;p&gt;In 1.11 Ember&amp;#39;s &lt;code&gt;if&lt;/code&gt; helper can be used in the inline form:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/eaf4"&gt;@eaf4&lt;/a&gt; and &lt;a href="https://twitter.com/marciojunior_me"&gt;@marciojunior_me&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_each-with-index'&gt;Each with Index&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; helper will support an &lt;code&gt;index&lt;/code&gt; block param in Ember 1.11:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;people&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! The first index value will be 0 }}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/timmyce"&gt;@timmyce&lt;/a&gt; and &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_named-substates'&gt;Named Substates&lt;/h4&gt;
&lt;p&gt;Two routing substates exist for Ember routes. The &lt;code&gt;loading&lt;/code&gt; substate will be entered
if the async hooks of a route are still processing, and the &lt;code&gt;error&lt;/code&gt; substate will be
entered when an async hook promise is rejected.&lt;/p&gt;

&lt;p&gt;Substates are sibling routes. When the &lt;code&gt;new&lt;/code&gt; route of &lt;code&gt;cars.new&lt;/code&gt; is loading, the &lt;code&gt;cars.loading&lt;/code&gt;
substate is entered. The &lt;code&gt;application&lt;/code&gt; route has no parent namespace to nest its siblings.
This makes using the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; substates impossible for an application route.&lt;/p&gt;

&lt;p&gt;Named substates add a new lookup method for substates. The name of the route is pre-pended
onto the substate. So a valid loading substate for &lt;code&gt;application&lt;/code&gt; can be defined as
&lt;code&gt;application_loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://twitter.com/machty"&gt;@machty&lt;/a&gt; for landing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_component-helper'&gt;Component Helper&lt;/h4&gt;
&lt;p&gt;Ember components can be bound via the &lt;code&gt;component&lt;/code&gt; helper. For example this logic
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isRed&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-red&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isBlue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-blue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isGreen&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-green&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can now be replaced by a computed property and the &lt;code&gt;component&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;component&lt;/span&gt; &lt;span class="attribute-name"&gt;colorComponentName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;colorComponentName&lt;/code&gt; should either have a value of &lt;code&gt;x-red&lt;/code&gt;, or &lt;code&gt;x-blue&lt;/code&gt; etc. As
the value of the property changes, the rendered component will also change.&lt;/p&gt;

&lt;p&gt;A big thank you to &lt;a href="https://twitter.com/lukemelia"&gt;@lukemelia&lt;/a&gt; for shipping
this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.10 has favorable rendering performance compared to previous releases. We&amp;#39;re
pleased that Ember 1.11 builds upon that progress. Compared to 1.10, common list
rendering scenarios have improved by about twenty percent and view instance
creation is over twice as fast. These measurements were made using the
&lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Progress continues on the &lt;a href="https://github.com/emberjs/ember.js/pull/10501"&gt;Glimmer rendering engine&lt;/a&gt;
announced at EmberConf 2015. This dramatic performance improvement is expected to
land in Ember.js 1.13.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-11'&gt;Notable Deprecations in 1.11&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.11:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ObjectController&lt;/code&gt; will be removed in Ember 2.0. In Ember 1.11,
both explicitly using an &lt;code&gt;ObjectController&lt;/code&gt; and using the proxying behavior
of a generated &lt;code&gt;ObjectController&lt;/code&gt; will raise deprecation warnings. See the
&lt;a href="/guides/deprecations#toc_objectcontroller"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Initializing instances (via &lt;code&gt;container.lookup&lt;/code&gt;) in initializers is deprecated. For
initialization that requires instances Ember has introduced &amp;quot;instance initializers&amp;quot;. See
the &lt;a href="/guides/deprecations#toc_access-to-instances-in-initializers"&gt;deprecation guide&lt;/a&gt;
for more information, as well as this &lt;a href="https://github.com/emberjs/website/pull/1951"&gt;documentation PR&lt;/a&gt;
and &lt;a href="https://github.com/emberjs/ember.js/pull/10256"&gt;the implementation PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Not a deprecation, but related: The &lt;code&gt;{{bind}}&lt;/code&gt; template helper was a private
helper, and has been deprecated
since Ember 1.10. It has been removed in Ember.js 1.11.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.11.0/CHANGELOG.md"&gt;Ember.js 1.11.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.12.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.12.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.16.1 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/24/ember-data-1-0-beta-16-1-released.html"/>
    <id>http://emberjs.com/blog/2015/03/24/ember-data-1-0-beta-16-1-released.html</id>
    <published>2015-03-23T20:00:00-04:00</published>
    <updated>2015-03-23T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data v1.0.0-beta.16.1 is a bugfix release that fixes 2
regressions reported with Ember Data v1.0.0-beta.16. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data v1.0.0-beta.16.1 is a bugfix release that fixes 2
regressions reported with Ember Data v1.0.0-beta.16. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
&lt;a href="http://emberjs.com/builds"&gt;http://emberjs.com/builds&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_store-adapterfor-application-throwing-exceptions'&gt;store.adapterFor(&amp;#39;application&amp;#39;) Throwing Exceptions&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/kamal"&gt;Kamal Fariz Mahyuddin&lt;/a&gt; reported issue
&lt;a href="https://github.com/emberjs/data/issues/2925"&gt;#2925&lt;/a&gt; where code that
attempted to use the store&amp;#39;s &lt;a href="http://emberjs.com/api/data/classes/DS.Store.html#method_adapterFor"&gt;adapterFor&lt;/a&gt; method to access
the &lt;code&gt;application&lt;/code&gt; adapter was throwing an error with Ember Data
&lt;code&gt;v1.0.0-beta.16&lt;/code&gt;. This has been fixed in Ember Data
&lt;code&gt;v1.0.0-beta.16.1&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_incompatibility-with-ember-1-10-0-beta-4'&gt;Incompatibility with Ember 1.10.0-beta.4&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/danielspaniel"&gt;Daniel Sudol&lt;/a&gt;
&lt;a href="https://github.com/emberjs/data/issues/2927"&gt;reported&lt;/a&gt; that
&lt;code&gt;v1.0.0-beta.16&lt;/code&gt; was throwing an error when it was loaded alongside
Ember &lt;code&gt;1.10.0-beta.4&lt;/code&gt; due to Ember Data calling the wrong
registerHelper method on HTMLBars. This was tracked down to an issue
in &lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;ember-inflector&lt;/a&gt; which comes bundled with Ember
Data. The issue has been fixed in &lt;code&gt;v1.5.0&lt;/code&gt; of ember-inflector and
Ember Data &lt;code&gt;v1.0.0-beta.16.1&lt;/code&gt; now includes the updated version.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_testing-issues-with-1-0-0-beta-16'&gt;Testing issues with 1.0.0-beta.16&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/pmdarrow"&gt;Peter Darrow&lt;/a&gt; called
&lt;a href="https://github.com/emberjs/data/issues/2924"&gt;out some testing problems&lt;/a&gt;
with Ember Data &lt;code&gt;v1.0.0-beta.16&lt;/code&gt;. This was concluded to be an issue
with &lt;code&gt;ember-qunit&lt;/code&gt; not properly cleaning up Ember Data&amp;#39;s store after
tests. &lt;a href="https://github.com/rwjblue"&gt;Robert Jackson&lt;/a&gt; quickly fixed the issue and
recommends you update to &lt;code&gt;v0.3.0&lt;/code&gt; of &lt;code&gt;ember-qunit&lt;/code&gt; if you experience
this issue.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelog'&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v1.0.0-beta.16.1/CHANGELOG.md"&gt;Ember Data 1.0.0-beta.16.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.16 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/03/23/ember-data-1-0-beta-16-released.html"/>
    <id>http://emberjs.com/blog/2015/03/23/ember-data-1-0-beta-16-released.html</id>
    <published>2015-03-22T20:00:00-04:00</published>
    <updated>2015-03-22T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.16. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.16. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
emberjs.com/builds&lt;/p&gt;

&lt;p&gt;The 1.0.0-beta.16 release represents the effort of at least 31
contributors across over 112 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-core-contributor'&gt;New Core Contributor&lt;/h2&gt;
&lt;p&gt;Contributor &lt;a href="https://github.com/wecc"&gt;Christoffer Persson&lt;/a&gt; has been given collaborator
status and will help us triage issues, merge pull requests, and
contribute bug fixes and documentation. Christoffer has been extremely
active in triaging issues and contributing features and bug fixes to
the Ember Data project.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_breaking-changes'&gt;Breaking Changes&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_the-store-now-passes-snapshots-instead-of-records-to-adapter-methods'&gt;The store now passes snapshots instead of records to adapter methods&lt;/h3&gt;
&lt;p&gt;In 1.0.0-beta.15 Ember Data introduce the Snapshot API and began
passing snapshot instances into all serializers to prevent
side-effects from occurring when inspecting relationships for
serialization. This introduces some pain points in 3rd party adapters
and serializers since they could not easily create snapshot instances
without using private APIs. In Ember Data 1.0.0-beta.16 the
store will now pass snapshot instances into adapters methods instead
of record instances.&lt;/p&gt;

&lt;p&gt;The following adapter methods now receive snapshots instead of records:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find(store, type, id, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany(store, type, ids, snapshots)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany(store, snapshot, url, relationship)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo(store, snapshot, url, relationship)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord(store, type, snapshot)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The signature of &lt;code&gt;buildURL(type, id, snapshot)&lt;/code&gt; has also been updated to receive
snapshots instead of records.&lt;/p&gt;

&lt;p&gt;This change removes the need for adapters to create snapshots manually using the
private API &lt;code&gt;record._createSnapshot()&lt;/code&gt; to be able to pass snapshots to
serializers.&lt;/p&gt;

&lt;p&gt;Snapshots are backwards-compatible with records (with deprecation warnings) and
it should be pretty straight forward to update current code to the public
Snapshot API:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)           =&amp;gt; postSnapshot.id
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)        =&amp;gt; postSnapshot.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)       =&amp;gt; postSnapshot.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)     =&amp;gt; postSnapshot.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
post.constructor         =&amp;gt; postSnapshot.type;
post.constructor.typeKey =&amp;gt; postSnapshot.typeKey
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you need to access the underlying record of a snapshot you can do so by
accessing &lt;code&gt;snapshot.record&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full API reference of &lt;code&gt;DS.Snapshot&lt;/code&gt; can be found &lt;a href="http://emberjs.com/api/data/classes/DS.Snapshot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_improvements'&gt;Improvements&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_store-as-a-service'&gt;Store as a Service&lt;/h3&gt;
&lt;p&gt;The store has now been registered as a service. So when you are using
Ember Data 1.0.0-beta.16 with Ember 1.10+ you can now inject the store
into any Ember object managed by the container.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.TweetComposerComponent = Ember.Component.extend({
  &lt;span class="key"&gt;store&lt;/span&gt;: Ember.inject.service(),
  &lt;span class="function"&gt;newTweet&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;store&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tweet&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {});
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please give a warm thanks to &lt;a href="https://github.com/martndemus"&gt;martndemus&lt;/a&gt; for his
work implementing this feature!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_mixins-in-polymorphic-relationships'&gt;Mixins in Polymorphic Relationships&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/igorT"&gt;Igor Terzic&lt;/a&gt; Added support for using mixins in polymorphic
relationships. This allows Ember Data to reference Mixins instead of
Model classes as the type argument for relationships.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Comment = DS.Model.extend({
  &lt;span class="key"&gt;owner&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;commentable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;polymorphic&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});

App.CommentableMixin = Ember.Mixin.create({
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_better-support-for-using-multiple-stores'&gt;Better Support for using multiple stores&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jmurphyau"&gt;James Murphy&lt;/a&gt; landed an
&lt;a href="https://github.com/emberjs/data/pull/2617"&gt;awesome PR&lt;/a&gt; that makes it
easier to use multiple stores in your Ember Application.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelog'&gt;Changelog&lt;/h2&gt;
&lt;p&gt;In addition to the major changes mentioned above this release also
includes many bug fixes and documentation updates. Be sure to check
out the change log for the full list of updates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/data/blob/v1.0.0-beta.16/CHANGELOG.md"&gt;Ember Data 1.0.0-beta.16 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data v1.0.0-beta.15 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/14/ember-data-1-0-beta-15-released.html"/>
    <id>http://emberjs.com/blog/2015/02/14/ember-data-1-0-beta-15-released.html</id>
    <published>2015-02-13T19:00:00-05:00</published>
    <updated>2015-02-13T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.15. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release Ember Data 1.0.0-beta.15. It
includes many bug fixes as well as several new features. As always
this release can be obtained from npm (for use with ember-cli),
rubygems, or bower. The builds are also available as static files at
emberjs.com/builds&lt;/p&gt;

&lt;p&gt;The 1.0.0-beta.15 release represents the effort of at least 30
contributors across over 168 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_improvements'&gt;Improvements&lt;/h2&gt;&lt;h3 class='anchorable-toc' id='toc_snapshot-api'&gt;Snapshot API&lt;/h3&gt;
&lt;p&gt;In Ember Data serializers will now be given a snapshot instance
instead of a record instance when serializing records. A snapshot
represents the frozen state of a record at a particular moment in
time. Its initial purpose is to be passed to serializers instead of
the real record. This allows the serializer to examine the current
state of that record in the moment without triggering side-effects,
like loading relationships.&lt;/p&gt;

&lt;p&gt;The snapshot has a different API from a record for accessing
properties so you will know you are working with a snapshot. Using
&lt;code&gt;snapshot.get&lt;/code&gt; is still supported for compatibility however it will
log a deprecated warning to encourage you to use the new apis.&lt;/p&gt;

&lt;p&gt;To access attributes you should now use the &lt;code&gt;attr&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To access a belongsTo relationship you should use &lt;code&gt;.belongsTo()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To access a hasMany relationship you should use &lt;code&gt;.hasMany()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.14.1&lt;/span&gt;
post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// Ember Data 1.0.0-beta.15&lt;/span&gt;
postSnapshot.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please give a warm thanks to &lt;a href="https://github.com/wecc"&gt;Christoffer Persson&lt;/a&gt; for all his
work implementing this feature!&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_errors-on-arbitrary-properties'&gt;Errors on arbitrary properties&lt;/h3&gt;
&lt;p&gt;Previously, Ember Data would only attach errors to a record&amp;#39;s error
object if they matched a property that was already on the record. Now
thanks to &lt;a href="https://github.com/alexspeller"&gt;Alex Speller&lt;/a&gt;&amp;#39;s
&lt;a href="https://github.com/emberjs/data/pull/1984"&gt;work&lt;/a&gt; any error returned
by the backend can be attached to the error object.&lt;/p&gt;

&lt;p&gt;Please note that if your backend is returning an error property that
is not an attribute on the record you will need to manually clear it
before the record can transition out of the error state.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_sort-query-params-in-ajax-calls'&gt;Sort query params in ajax calls.&lt;/h3&gt;
&lt;p&gt;When developing APIs, it is common to use a caching mechanism, like
Varnish, to cache requests to public API endpoints, and those tools
use the URL string to determine if they have a cached response.&lt;/p&gt;

&lt;p&gt;As an example, if one user requests &lt;code&gt;/posts?sort=price&amp;amp;category=pets&lt;/code&gt;
and another requests &lt;code&gt;/posts?category=pets&amp;amp;sort=price&lt;/code&gt;, the cached
request won&amp;#39;t be used in the second call.&lt;/p&gt;

&lt;p&gt;Ember Data&amp;#39;s &lt;code&gt;RESTAdapter&lt;/code&gt; will now sort the query parameters by their
field name when making an ajax request.&lt;/p&gt;

&lt;p&gt;It is possible to disable this behavior, by setting &lt;code&gt;sortQueryParams&lt;/code&gt;
to be false on your adapter.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.ApplicationAdapter = DS.RESTAdapter.extend({
  &lt;span class="key"&gt;namespace&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;api/v1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;sortQueryParams&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;Miguel Camba&lt;/a&gt; for implementing this feature.&lt;/p&gt;

&lt;!-- Links --&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.10.0 and 1.11 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html"/>
    <id>http://emberjs.com/blog/2015/02/07/ember-1-10-0-released.html</id>
    <published>2015-02-06T19:00:00-05:00</published>
    <updated>2015-02-06T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.10.0 and the
first beta in the 1.11 series. This comes as the tenth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.10 release represents the effort of at least 50...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce the release of both Ember.js 1.10.0 and the
first beta in the 1.11 series. This comes as the tenth cycle of our
release process that began just after 1.0 was released.&lt;/p&gt;

&lt;p&gt;The 1.10 release represents the effort of at least 50 contributors
across over 553 commits.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-htmlbars-templating-engine'&gt;The HTMLBars Templating Engine&lt;/h2&gt;
&lt;p&gt;Throughout 2014 the Ember.js community has poured its shared effort into
a new templating solution. This new library, dubbed HTMLBars, makes available
features and performance improvements impossible to support with Handlebars
(the previous library). We are delighted to announce the inclusion of
the HTMLBars templating engine in Ember.js 1.10.&lt;/p&gt;

&lt;p&gt;HTMLBars will enable the implementation of several APIs described in
&lt;a href="https://github.com/emberjs/rfcs/pull/15"&gt;The Road to Ember 2.0&lt;/a&gt;, and contributes
to our continued improvement of rendering performance. Additionally,
it will allow us to continue supporting all Ember 1.x template syntax.&lt;/p&gt;

&lt;p&gt;This long-term effort would not have succeeded without the continued
contributions of the Ember community and core team. In no particular
order and with apologies to anyone we&amp;#39;ve missed we would like to thank
&lt;a href="http://twitter.com/krisselden"&gt;@krisselden&lt;/a&gt;, &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt;,
&lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;, &lt;a href="http://twitter.com/nerd20"&gt;@nerd20&lt;/a&gt;,
&lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt;,
&lt;a href="https://twitter.com/salzhrani"&gt;@salzhrani&lt;/a&gt;, &lt;a href="http://twitter.com/rwjblue"&gt;@rwjblue&lt;/a&gt;,
&lt;a href="http://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;, &lt;a href="http://github.com/oneeman"&gt;oneeman&lt;/a&gt;,
&lt;a href="http://twitter.com/kpdecker"&gt;@kpdecker&lt;/a&gt; and the many alpha and beta
testers who provided feedback and bug reports. You are the stuff &amp;quot;stability without
stagnation&amp;quot; is made of.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-10'&gt;New Features in Ember.js 1.10&lt;/h2&gt;&lt;h4 class='anchorable-toc' id='toc_htmlbars-0-8-5'&gt;HTMLBars 0.8.5&lt;/h4&gt;
&lt;p&gt;Ember.js 1.10 is dependent on HTMLBars 0.8.5. To ease this and later template
library version changes, Ember&amp;#39;s template compiler will be packaged as a
part of the release files. For example, a JSBin in Ember 1.9 would need to be
updated from:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v2.0.0.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.9.1/ember.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.10.0/ember-template-compiler.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://builds.emberjs.com/tags/v1.10.0/ember.debug.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ember-template-compiler.js&lt;/code&gt; is only required for template compilation. The
runtime dependencies for HTMLBars are built into the framework file.&lt;/p&gt;

&lt;p&gt;To smoothly upgrade to 1.10 and HTMLBars, Ember-CLI users should update to a
version at or after 0.1.12, remove
their application&amp;#39;s Handlebars dependency, and modify the Brocfile to not load Handlebars.
&lt;a href="https://github.com/rwjblue/components-in-subdirs/commit/78e7ed2d072f42d9cf0fd3d9fc2376f106ab762e"&gt;This diff&lt;/a&gt;
shows the changes needed to upgrade an Ember-CLI app to 1.10.&lt;/p&gt;

&lt;p&gt;Ember App-Kit users should upgrade to Ember-CLI.&lt;/p&gt;

&lt;p&gt;Ember-Rails users should upgrade to version 0.16.1, then remove their Handlebars
dependency.&lt;/p&gt;

&lt;p&gt;Developers of applications that follow a non-standard build pipeline should
review the instructions &lt;a href="/blog/2015/02/05/compiling-templates-in-1-10-0.html"&gt;published by Robert Jackson this week&lt;/a&gt;
and join the conversation at &lt;a href="http://discuss.emberjs.com/"&gt;discuss.emberjs.com&lt;/a&gt;
or on IRC.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_performance-improvements'&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.8 introduced a performance regression that we expected to re-coup in
the 1.10 release. In December the team at &lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt; created the
&lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; repo.
This project aids Ember developers in profiling and measuring performance in the
framework.&lt;/p&gt;

&lt;p&gt;Using these benchmarks, we&amp;#39;re pleased to report a twelve percent improvement
in common rendering scenarios between 1.7 and 1.10, and as much as a fifty
percent improvement between 1.9 and 1.10.&lt;/p&gt;

&lt;p&gt;Better rendering and general framework performance continue to be a priority for
the core team and community. Specific goals include reactive rendering for
HTMLBars, more optimized metal views, limiting observation, and refinements to the Ember
object model.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_chained-else-blocks'&gt;Chained Else Blocks&lt;/h4&gt;
&lt;p&gt;HTMLBars is built using the Handlebars parser, and will continue to gain
features related to template syntax. Ember 1.10 features support for chained
else helpers, the most common use being &lt;code&gt;else if&lt;/code&gt;. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isAtWork&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  Ship that code!
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt; &lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isReading&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  You can finish War and Peace eventually...
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Chained else helpers work with any &lt;code&gt;else&lt;/code&gt;, including those of &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;each&lt;/code&gt;
helpers.&lt;/p&gt;

&lt;p&gt;You can read more about the implemetation &lt;a href="https://github.com/wycats/handlebars.js/pull/892"&gt;in the Handlebars repo&lt;/a&gt;.
Thanks to &lt;a href="http://twitter.com/kpdecker"&gt;@kpdecker&lt;/a&gt; for this improvement.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_block-params'&gt;Block Params&lt;/h4&gt;
&lt;p&gt;Ember 1.10 introduces block parameters. Block params provide consistent
scope to templates, and allow components to pass internal values to a downstream
scope.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! available on the controller }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;cars&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;car&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;car.manufacturer&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;make&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;make.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;currentUser.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;{{! still the controller scope }}&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Preserving template context results in easier to read templates, and passing
variables into child scopes allows for new patterns of component composition.&lt;/p&gt;

&lt;p&gt;Block params are passed from a template via the &lt;code&gt;yield&lt;/code&gt; helper. For example, this
component yields the &lt;code&gt;fullName&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/components/x-customer.js }}&lt;/span&gt;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({

  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;var&lt;/span&gt; customer = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="keyword"&gt;return&lt;/span&gt; [customer.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), customer.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)].join(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer.firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customer.lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;age&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; (&lt;span class="keyword"&gt;new&lt;/span&gt; Date() - &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;birthday&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) / (&lt;span class="integer"&gt;86400000&lt;/span&gt; * &lt;span class="integer"&gt;365&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;birthday&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/components/x-customer.hbs }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;customer&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;yield&lt;/span&gt; &lt;span class="attribute-name"&gt;fullName&lt;/span&gt; &lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! app/templates/index.hbs }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;layout&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;x-customer&lt;/span&gt; &lt;span class="attribute-name"&gt;customer&lt;/span&gt;=&lt;span class="attribute-value"&gt;model&lt;/span&gt; &lt;span class="attribute-name"&gt;birthday&lt;/span&gt;=&lt;span class="attribute-value"&gt;model.birthday&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt; &lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    Hello, &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;. You are &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; years old.
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;x-customer&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for the implementation of this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_injected-properties'&gt;Injected Properties&lt;/h4&gt;
&lt;p&gt;Ember 1.x has exposed two APIs for managing dependency injection. The first is
the application initializer API, using &lt;code&gt;register&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; methods on an
application instance. The second allows configuration of an injection on
controllers via &lt;code&gt;needs&lt;/code&gt;. You can read more about these patterns in
&lt;a href="/guides/understanding-ember/dependency-injection-and-service-lookup/"&gt;the dependency injection guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new injected properties offer a more declarative API for dependency injection.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Ember.inject.service()&lt;/code&gt; to inject a service with the same name as the property
it is injected as. In this example, the &lt;code&gt;storage&lt;/code&gt; service is injected onto the
&lt;code&gt;storage&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;storage&lt;/span&gt;: Ember.inject.service()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Passing a name to the &lt;code&gt;service()&lt;/code&gt; method allows a different service to be injected.
For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;storage&lt;/span&gt;: Ember.inject.service(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;local-storage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition to injecting services, controllers can be injected with &lt;code&gt;Ember.inject.controller&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, these injections are lazy. When used within a unit test, a stubbed service can
be passed during &lt;code&gt;create&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;a value is saved on storage&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; component = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
    &lt;span class="key"&gt;storage&lt;/span&gt;: {
      &lt;span class="function"&gt;write&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
        ok(&lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;value was written&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      }
    }
  });

  &lt;span class="keyword"&gt;var&lt;/span&gt; element = &lt;span class="local-variable"&gt;this&lt;/span&gt;.append();
  element.click();
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Refer to the &lt;a href="/api/#method_inject_service"&gt;API documentation&lt;/a&gt; to read about this new feature in
detail.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/slindberg"&gt;slindberg&lt;/a&gt; for his implementation of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;As Ember.js moves forward, various APIs are deprecated to allow for their
removal in a later major release (such as 2.0). The
&lt;a href="/deprecations/"&gt;deprecations page&lt;/a&gt; summarizes
deprecations and demonstrates how to update to a new API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The explicit &lt;code&gt;{{bind}}&lt;/code&gt; helper has been deprecated. This helper has
long been marked private, and was a legacy Sproutcore
feature. This helper will be removed in Ember 1.11.&lt;/li&gt;
&lt;li&gt;Quote-less outlet names are deprecated in 1.10. An example of this is
&lt;code&gt;{{outlet modal}}&lt;/code&gt;, which should be re-written as &lt;code&gt;{{outlet &amp;quot;modal&amp;quot;}}&lt;/code&gt;.
This ensures the outlet helper is consistent with others, where unquoted
words are values and not string literals.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;beforeObserver&lt;/code&gt; feature is deprecated in Ember 1.10. Before observers
are rarely used, but introduce significant overhead to the observer system
in general. For observer use that requires the previous value of a property
be known, implementing a cache is simple and more efficient. Read more about
how to do this on &lt;a href="/deprecations/v1.x#toc_deprecate-beforeobservers"&gt;the deprecations page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Observing the &lt;code&gt;childViews&lt;/code&gt; array of a &lt;code&gt;ContainerView&lt;/code&gt; is deprecated.&lt;/li&gt;
&lt;li&gt;Setting the &lt;code&gt;childViews&lt;/code&gt; property on a view definition is deprecated in
1.10. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="key"&gt;childViews&lt;/span&gt;: [ &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;childA&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, ChildB ],
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This use of &lt;code&gt;childViews&lt;/code&gt; is inconsistent with other uses throughout Ember, and
as a result is difficult to implement with good performance. Explicitly creating
views upon initialization is preferred:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ChildB = Ember.View.extend();

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ContainerView.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(&lt;span class="local-variable"&gt;this&lt;/span&gt;.childA));
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.pushObject(&lt;span class="local-variable"&gt;this&lt;/span&gt;.createChildView(ChildB));
  },
  &lt;span class="key"&gt;childA&lt;/span&gt;: Ember.View.extend()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_new-features-in-ember-js-1-11-beta'&gt;New Features in Ember.js 1.11 beta&lt;/h2&gt;
&lt;p&gt;Ember.js 1.11 beta continues a series of releases iterating the framework
toward our 2.0 goals. In six weeks, these and a few other features will
be declared stable.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_inline-if'&gt;Inline if&lt;/h4&gt;
&lt;p&gt;In 1.11 Ember&amp;#39;s &lt;code&gt;if&lt;/code&gt; helper can be used in the inline form:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/marciojunior_me"&gt;@marciojunior_me&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_each-with-index'&gt;Each with Index&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; helper will support an &lt;code&gt;index&lt;/code&gt; block param in Ember 1.11:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;people&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;person&lt;/span&gt; &lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! The first index value will be 0 }}&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;person.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-attribute-syntax'&gt;Bound Attribute Syntax&lt;/h4&gt;
&lt;p&gt;Current Ember developers are familiar with the &lt;code&gt;bind-attr&lt;/code&gt; syntax, used
to declare an attribute binding on an HTML element. An original
motivation for HTMLBars was to improve on this syntax.&lt;/p&gt;

&lt;p&gt;Ember 1.11 introduces a more intuitive API for attribute binding. For
example, here the &lt;code&gt;color&lt;/code&gt; variable is bound to the class of a div:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The inline if helper can also be used in these contexts:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isEnabled&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;active&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;disabled&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For some attributes, like the &lt;code&gt;disabled&lt;/code&gt; boolean, passing a literal value
is desirable. An example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To allow the data-binding of non-string values to boolean properties and
custom element properties, bound attributes are implemented with a
&lt;strong&gt;property-first&lt;/strong&gt; setter.&lt;/p&gt;

&lt;p&gt;When binding to an attribute, Ember first checks to see if that attribute is a
property of the element&amp;#39;s DOM node (with normalization of capitalization). If it
is, the value is set with a property. For example:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;isDisabled&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// disabled is a property of input elements, so...&lt;/span&gt;
input.disabled = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the attribute is not present as a property, then its value is set as an
attribute:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;color&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// class is not a property of div elements, do...&lt;/span&gt;
div.setAttribute(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;class&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;red&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For SVG attributes and the style attribute, we&amp;#39;ve made a exceptions to this pattern.
Despite these exceptions, the property-first rule is a good way to describe what is
happening behind the scenes. In practice, the binding syntax feels natural.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href="http://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;, &lt;a href="http://twitter.com/_mmun"&gt;@_mmun&lt;/a&gt;,
and &lt;a href="http://twitter.com/wycats"&gt;@wycats&lt;/a&gt; for their effort on the design and implementation
of this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_named-substates'&gt;Named Substates&lt;/h4&gt;
&lt;p&gt;Two routing substates exist for Ember routes. The &lt;code&gt;loading&lt;/code&gt; substate will be entered
if the async hooks of a route are still processing, and the &lt;code&gt;error&lt;/code&gt; substate will be
entered when an async hook promise is rejected.&lt;/p&gt;

&lt;p&gt;Substates are sibling routes. When the &lt;code&gt;new&lt;/code&gt; route of &lt;code&gt;cars.new&lt;/code&gt; is loading, the &lt;code&gt;cars.loading&lt;/code&gt;
substate is entered. The &lt;code&gt;application&lt;/code&gt; route has no parent namespace to nest its siblings.
This makes using the &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; substates impossible for an application route.&lt;/p&gt;

&lt;p&gt;Named substates add a new lookup method for substates. The name of the route is pre-pended
onto the substate. So a valid loading substate for &lt;code&gt;application&lt;/code&gt; can be defined as
&lt;code&gt;application_loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://twitter.com/machty"&gt;@machty&lt;/a&gt; for landing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_component-helper'&gt;Component Helper&lt;/h4&gt;
&lt;p&gt;Ember components can be bound via the &lt;code&gt;component&lt;/code&gt; helper. For example this logic
in a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isRed&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-red&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isBlue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-blue&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;isGreen&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-green&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can now be replaced by a computed property and the &lt;code&gt;component&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;component&lt;/span&gt; &lt;span class="attribute-name"&gt;colorComponentName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;colorComponentName&lt;/code&gt; should have a value of &lt;code&gt;x-red&lt;/code&gt;, &lt;code&gt;x-blue&lt;/code&gt; etc. As
the value of the property changes, the rendered component will also change.&lt;/p&gt;

&lt;p&gt;A big thank you to &lt;a href="https://twitter.com/lukemelia"&gt;@lukemelia&lt;/a&gt; for shipping
this new feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations-in-1-11'&gt;Notable Deprecations in 1.11&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember.js 1.11:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ObjectController&lt;/code&gt; will be removed in Ember 2.0. In Ember 1.11,
both explicitly using an &lt;code&gt;ObjectController&lt;/code&gt; and using the proxying behavior
of a generated &lt;code&gt;ObjectController&lt;/code&gt; will raise deprecation warnings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the features included in Ember 1.12 are developed, additional deprecations
may be added to the 1.11 release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changelogs'&gt;Changelogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.10.0/CHANGELOG.md"&gt;Ember.js 1.10.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.11.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.11.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Using Ember? Please take ten minutes to share your
feedback by participating in the &lt;a href="http://goo.gl/forms/6yIsF3TNsQ"&gt;2015 Ember Community Survey&lt;/a&gt;. Open
until February 20th.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Compiling templates with Ember 1.10</title>
    <link rel="alternate" href="http://emberjs.com/blog/2015/02/05/compiling-templates-in-1-10-0.html"/>
    <id>http://emberjs.com/blog/2015/02/05/compiling-templates-in-1-10-0.html</id>
    <published>2015-02-04T19:00:00-05:00</published>
    <updated>2015-02-04T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;As many of you know, Ember 1.10 will be the first version of Ember that uses &lt;a href="https://github.com/tildeio/htmlbars"&gt;HTMLBars&lt;/a&gt; as its templating engine. With this change you may need to change the way you compile your templates.&lt;/p&gt;

&lt;p&gt;The HTMLBars API is evolving and not 1.0.0 yet, so to ensure...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;As many of you know, Ember 1.10 will be the first version of Ember that uses &lt;a href="https://github.com/tildeio/htmlbars"&gt;HTMLBars&lt;/a&gt; as its templating engine. With this change you may need to change the way you compile your templates.&lt;/p&gt;

&lt;p&gt;The HTMLBars API is evolving and not 1.0.0 yet, so to ensure that templates are compiled compatibly with your Ember version we have updated the Ember build system to generate a &lt;code&gt;ember-template-compiler.js&lt;/code&gt; file alongside every build of Ember. This template compiler can be used server-side for precompilation or in the browser to compile templates on the fly. If you do not need to compile templates at runtime (in the browser) the &lt;code&gt;ember.debug.js&lt;/code&gt; or &lt;code&gt;ember.prod.js&lt;/code&gt; file alone is sufficient. There is no need to include a runtime dependency. This is a departure from previous versions, where you would always include either &lt;code&gt;handlebars.js&lt;/code&gt; or &lt;code&gt;handlebars.runtime.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most of the time you will use a third party library like &lt;a href="https://github.com/ember-cli/ember-cli"&gt;ember-cli&lt;/a&gt;, &lt;a href="https://github.com/rondale-sc/ember-cli-htmlbars"&gt;ember-cli-htmlbars&lt;/a&gt;, or &lt;a href="https://github.com/dgeb/grunt-ember-templates"&gt;grunt-ember-templates&lt;/a&gt; to precompile templates, but this post will discuss how libraries like this should work internally.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_server-side-compilation'&gt;Server Side Compilation&lt;/h3&gt;
&lt;p&gt;If possible, it is definitely a best practice to compile your templates server side. This is much faster due to less total size (you don&amp;#39;t need the compiler on the client) and less work that the app needs to do.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-1-0-through-1-9'&gt;Ember 1.0 through 1.9&lt;/h4&gt;
&lt;p&gt;In prior versions, you would typically use the &lt;code&gt;ember-template-compiler&lt;/code&gt; NPM package that corresponded to your Ember version to precompile your templates. That might look something like the following:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; compiler = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-template-compiler&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; input = fs.readFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/template.hbs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;span class="keyword"&gt;var&lt;/span&gt; template = compiler.precompile(input, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; output = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;export default Ember.Handlebars.template(&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + template + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;);&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

fs.writeFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/output.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, output, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You would also need to include &lt;code&gt;handlebars.runtime.js&lt;/code&gt; in your final build&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-1-10'&gt;Ember 1.10+&lt;/h4&gt;
&lt;p&gt;With Ember 1.10, you will use the &lt;code&gt;ember-template-compiler.js&lt;/code&gt; file that is paired with your Ember version. If you use our &lt;a href="https://github.com/components/ember"&gt;Bower repo&lt;/a&gt;, &lt;a href="https://rubygems.org/gems/ember-source"&gt;RubyGem&lt;/a&gt;, or simply download Ember from our &lt;a href="http://emberjs.com/builds/"&gt;builds site&lt;/a&gt; there is a &lt;code&gt;ember-template-compiler.js&lt;/code&gt; in the same path as &lt;code&gt;ember.debug.js&lt;/code&gt; and &lt;code&gt;ember.prod.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use this template compiler directly  and without additional requirements. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; compiler = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;./bower_components/ember/ember-template-compiler&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; input = fs.readFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/template.hbs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;span class="keyword"&gt;var&lt;/span&gt; template = compiler.precompile(input, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; output = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;export default Ember.HTMLBars.template(&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + template + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;);&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

fs.writeFileSync(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;path/to/output.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, output, { &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;utf8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you will notice, the new API for server-side compilation is nearly identical to that of prior versions. The main change is the usage of the local &lt;code&gt;bower_components/ember/ember-template-compiler.js&lt;/code&gt; file as opposed to the NPM module.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_client-side-compilation'&gt;Client Side Compilation&lt;/h3&gt;
&lt;p&gt;Generally speaking, you should avoid compiling templates on the client, but there are times that you cannot avoid this. Live demo apps like &lt;a href="http://emberjs.jsbin.com"&gt;JSBin&lt;/a&gt; are one example.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-1-0-through-1-9'&gt;Ember 1.0 through 1.9&lt;/h3&gt;
&lt;p&gt;In prior versions of Ember you would need to ensure that the full version of &lt;a href="handlebarsjs.com"&gt;Handlebars.js&lt;/a&gt; was present to allow compiling of templates. Perhaps something like the following in your &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/handlebars.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember.prod.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_ember-1-10'&gt;Ember 1.10+&lt;/h3&gt;
&lt;p&gt;With Ember 1.10, you will include the &lt;code&gt;ember-template-compiler.js&lt;/code&gt; for your specific Ember version.  Something like the following:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember-template-compiler.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/ember.prod.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you include the &lt;code&gt;ember.debug.js&lt;/code&gt; file instead of a production file the compiler is still required.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_template-compilation-build-tools'&gt;Template Compilation Build Tools&lt;/h3&gt;
&lt;p&gt;There are any number of build tool libraries that are intended to make the server side compilation of templates easier. Here are just a few (please let us know of others):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rondale-sc/ember-cli-htmlbars"&gt;ember-cli-htmlbars&lt;/a&gt; - Can be used either as a standalone Broccoli plugin, or as an ember-cli addon.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dgeb/grunt-ember-templates"&gt;grunt-ember-templates&lt;/a&gt; - Works as a Grunt plugin. To precompile HTMLBars templates, you must supply specific parameters to your task definition as mentioned in &lt;a href="https://github.com/dgeb/grunt-ember-templates/pull/77"&gt;this PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbashford/mimosa-ember-htmlbars"&gt;mimosa-ember-htmbars&lt;/a&gt; - A plugin for the &lt;a href="http://mimosa.io/"&gt;mimosa&lt;/a&gt; build tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember-rails"&gt;ember-rails&lt;/a&gt; - The Rails Asset Pipeline plugin supports HTMLBars templates.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
