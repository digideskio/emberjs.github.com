<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2016-07-29T00:00:00+00:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Announcing The Glimmer 2 Alpha</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/07/29/announcing-the-glimmer-2-alpha.html"/>
    <id>http://emberjs.com/blog/2016/07/29/announcing-the-glimmer-2-alpha.html</id>
    <published>2016-07-29T00:00:00+00:00</published>
    <updated>2016-07-29T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;In this year's &lt;a href="https://www.youtube.com/watch?v=OInJBwS8VDQ&amp;amp;list=PL4eq2DPpyBblc8aQAd516-jGMdAhEeUiW"&gt;EmberConf keynote&lt;/a&gt;,  Yehuda mentioned that we are working on a highly optimized rendering engine for Ember called Glimmer 2.&lt;/p&gt;

&lt;p&gt;On behalf of all the contributors who have lent a hand along the way, I am very excited to announce that we...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In this year&amp;#39;s &lt;a href="https://www.youtube.com/watch?v=OInJBwS8VDQ&amp;amp;list=PL4eq2DPpyBblc8aQAd516-jGMdAhEeUiW"&gt;EmberConf keynote&lt;/a&gt;,  Yehuda mentioned that we are working on a highly optimized rendering engine for Ember called Glimmer 2.&lt;/p&gt;

&lt;p&gt;On behalf of all the contributors who have lent a hand along the way, I am very excited to announce that we have just released Ember 2.9.0-alpha.1, the first official build with Glimmer 2 included.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-key-milestone'&gt;üîë A Key Milestone üîë&lt;/h2&gt;
&lt;p&gt;During the alpha testing period, we will publish new alpha builds on a weekly cadence, following the &lt;a href="http://emberjs.com/builds/#/beta"&gt;beta releases schedule&lt;/a&gt;. The alpha releases will be cut from the master branch, but with all &lt;a href="https://guides.emberjs.com/v2.7.0/configuring-ember/feature-flags/"&gt;experimental features&lt;/a&gt; other than &lt;code&gt;ember-glimmer&lt;/code&gt; stripped from the builds.&lt;/p&gt;

&lt;p&gt;The purpose of the alpha releases is to enable our community ‚Äì especially the addon and tooling ecosystem ‚Äì to start testing the new engine for compatibility and offer feedback. Needless to say, the alpha releases are not intended for production use.&lt;/p&gt;

&lt;p&gt;To test your apps with the alpha builds, simply run &lt;code&gt;bower install --save ember#alpha&lt;/code&gt; and follow the prompt to persist the resolution.&lt;/p&gt;

&lt;p&gt;From Ember&amp;#39;s perspective, integrating Glimmer 2 does not expose any new user-facing features. Even though it is a complete rewrite under the hood, &lt;strong&gt;we expect the final release to be a drop-in, completely backwards compatible upgrade&lt;/strong&gt; for virtually all Ember users. Notably, we will follow our usual &lt;a href="http://semver.org"&gt;SemVer&lt;/a&gt; guarantee and ensure all public APIs continue to function as advertised. At this point, we do not expect to introduce any new deprecations along with the initial release.&lt;/p&gt;

&lt;p&gt;That being said, despite our &lt;a href="https://github.com/emberjs/ember.js/issues/13127"&gt;best efforts&lt;/a&gt;, we might not have gotten every detail right in our very first attempt, hence the alpha releases. We would really appreciate it if you could start testing your applications and report any regressions. You may refer to the &lt;a href="https://github.com/emberjs/ember.js/issues/13949"&gt;master issue&lt;/a&gt; for a list of known issues.&lt;/p&gt;

&lt;p&gt;It is worth noting that the version number (2.9.0-alpha.1) does not imply the new engine will be automatically included in the 2.9 final release. Just like any other changes, the Glimmer 2 integration is subject to the usual rigor and stability requirements of our &lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;release process&lt;/a&gt;. The core team will make the final decision on when to promote the feature into beta and stable releases based on our learnings from the alpha period.&lt;/p&gt;

&lt;p&gt;Based on current information, the 2.8-LTS release (when available) will likely be the final &lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;LTS release&lt;/a&gt; to include the current-generation rendering engine, which will be supported with critical bugfixes until at least May 2017 and security patches until at least October 2017.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-note-on-performance'&gt;üöÄ A Note On Performance üöÄ&lt;/h2&gt;
&lt;p&gt;While one of the overarching goals of Glimmer 2 is to improve performance, the immediate priority in the alpha phase is maximal compatibility. We are barely scratching the surface with the possible optimizations unlocked by the new engine, and once the dust settles there will be ample headroom for further improvements.&lt;/p&gt;

&lt;p&gt;That being said, you should start seeing some improvements in rendering performance with each alpha release, as well as reduced download/parsing time thanks to the new templates serialization format.&lt;/p&gt;

&lt;p&gt;We are also aware of a few minor bugs that cause performance problems in the first alpha release, which we plan to address quickly. However, it is also possible that we inadvertently regressed performance in certain scenarios. If you noticed certain common patterns have become slower, please report them as bugs.&lt;/p&gt;

&lt;p&gt;As always ‚Äì when running performance benchmarks, &lt;strong&gt;please make sure you are using the minified production build&lt;/strong&gt; (&lt;code&gt;ember.min.js&lt;/code&gt;). The debug builds contain a lot of helpful development aids that are known to impact performance negatively.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-whole-lot-more-to-come'&gt;üéÅ A Whole Lot More To Come üéÅ&lt;/h2&gt;
&lt;p&gt;Besides performance, Glimmer 2 has laid a solid foundation for us to build on.&lt;/p&gt;

&lt;p&gt;The project originally started when Tom, Yehuda and I spiked on implementing &amp;quot;angle bracket components&amp;quot; in the HTMLBars (&amp;quot;Glimmer 1&amp;quot;) engine over a year ago. This exercise highlighted some fundamental misalignments between the current rendering stack and the direction Ember is headed.&lt;/p&gt;

&lt;p&gt;While HTMLBars handled basic templating, it left the implementation of many of Ember&amp;#39;s view layer features (notably components) up to Ember itself. Not only did it make new features more difficult to implement, it made it hard to implement them &lt;em&gt;efficiently&lt;/em&gt; out of the gate.&lt;/p&gt;

&lt;p&gt;As Ember has moved towards components and &amp;quot;data-down, actions-up&amp;quot;, we wanted to do many optimizations that just weren&amp;#39;t a good fit for the HTMLBars architecture. The lessons we learned from the spike ultimately leading us down the journey that is now known as the Glimmer 2 architecture. The underlying technologies are very interesting, but I will save those details for another time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As an Ember user, you can expect the new engine to unlock some long-awaited features&lt;/strong&gt;, such as FastBoot rehydration and a refreshed approach to components once the initial integration is complete.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-big-thank-you'&gt;‚ù§Ô∏è A Big Thank You ‚ù§Ô∏è&lt;/h2&gt;
&lt;p&gt;Since &lt;a href="https://github.com/tildeio/glimmer/compare/rip-htmlbars...master"&gt;forking HTMLBars&lt;/a&gt;, the Glimmer repo has received over 700 commits, not to mention the &lt;a href="https://github.com/emberjs/ember.js/issues?page=1&amp;amp;q=label%3AGlimmer2+is%3Aclosed"&gt;integration effort&lt;/a&gt; that happened on the Ember side, all of which would not be possible without the help from our community.&lt;/p&gt;

&lt;p&gt;Thank you to every one who helped us get here ‚Äì from the &lt;a href="http://emberjs.com/sponsors/"&gt;companies&lt;/a&gt; who donated employees&amp;#39; time to the individual contributors who made personal sacrifices to make this happen.&lt;/p&gt;

&lt;p&gt;With all of that out of the way ‚Äì &lt;em&gt;happy alpha testing&lt;/em&gt;! üçæüéäüéâ&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_further-reading-watching'&gt;üìö Further Reading/Watching üìö&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;üîú Stay tuned for more &lt;em&gt;Inside Glimmer 2&lt;/em&gt; articles from this blog&lt;/li&gt;
&lt;li&gt;üöß &lt;a href="https://github.com/tildeio/glimmer/blob/master/guides/01-introduction.md"&gt;Glimmer Architecture Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OInJBwS8VDQ&amp;amp;list=PL4eq2DPpyBblc8aQAd516-jGMdAhEeUiW&amp;amp;index=1"&gt;Opening Keynote&lt;/a&gt; from EmberConf 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dpx9P1cz37k&amp;amp;list=PL4eq2DPpyBblc8aQAd516-jGMdAhEeUiW&amp;amp;index=23"&gt;The Future of Ember Templating&lt;/a&gt; from EmberConf 2016&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vg5A_UOGShg"&gt;Inside Glimmer 2: What Is A Compiler?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vL8sCi1Bv6E"&gt;Glimmer 2 Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 2.7 and 2.8 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/07/25/ember-data-2-7-released.html"/>
    <id>http://emberjs.com/blog/2016/07/25/ember-data-2-7-released.html</id>
    <published>2016-07-25T00:00:00+00:00</published>
    <updated>2016-07-25T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.7, a minor version release of Ember Data, is
released. This release represents the work of over 27 direct
contributors, and over 103 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.8 beta.1, the branch of Ember Data that will be released
as stable in roughly six...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.7, a minor version release of Ember Data, is
released. This release represents the work of over 27 direct
contributors, and over 103 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.8 beta.1, the branch of Ember Data that will be released
as stable in roughly six weeks, is also being released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_blueprint-changes'&gt;Blueprint Changes&lt;/h3&gt;
&lt;p&gt;In Ember Data 2.5 there was a change made to the blueprints to use
module paths when importing instead of importing the default DS
namespace. At the time this was thought to be a minor change and did
not receive much scrutiny. However, in time the Ember Data team has
discovered that the changes to the import statements in the blueprints
have made it more confusing for both new and experienced Ember
developers.&lt;/p&gt;

&lt;p&gt;In Ember Data 2.5 and Ember Data 2.6 the following generator command for building a model:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ember generate model post content isDraft:boolean comments:has-many user:belongs-to&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It would generate the following blueprint:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; attr from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/attr&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; { belongsTo, hasMany } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/relationships&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;content&lt;/span&gt;: attr(),
  &lt;span class="key"&gt;isDraft&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;user&lt;/span&gt;: belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ember Data 2.7 the same command will now generate the following blueprint:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;content&lt;/span&gt;: DS.attr(),
  &lt;span class="key"&gt;isDraft&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;comments&lt;/span&gt;: DS.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comment&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;user&lt;/span&gt;: DS.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The main difference is the blueprints no longer use the paths to
import specific modules. We have found that encouraging users to omit
the paths results in better defaults for both new and experienced
Ember developers. The simpler &lt;code&gt;import DS from &amp;#39;ember-data&amp;#39;;&lt;/code&gt; statement
has less room for typos and other errors and is easier to developers
to remember so they do not need reference documentation whenever they
want to add a new import.&lt;/p&gt;

&lt;p&gt;This change &lt;em&gt;only&lt;/em&gt; impacts the blueprints that are generated when
using the
&lt;a href="https://ember-cli.com/user-guide/#using-ember-cli"&gt;ember-cli generate&lt;/a&gt;
command. Code that is written to use the path imports will still
continue to work and be supported until at least Ember Data 3.0.&lt;/p&gt;

&lt;p&gt;The Ember Data team will also be releasing patch releases to Ember
Data 2.5 and 2.6 to update their blueprint generators to match Ember
Data 2.7.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-7'&gt;Changes in Ember Data 2.7&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-boolean-transform-allow-null-code-a-href-https-github-com-emberjs-data-pull-4022-4022-a'&gt;&lt;code&gt;ds-boolean-transform-allow-null&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4022"&gt;#4022&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Allow &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt; values for boolean attributes via &lt;code&gt;attr(&amp;#39;boolean&amp;#39;, { allowNull: true })&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/user.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;username&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;wantsWeeklyEmail&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;allowNull&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-links-in-record-array-code-a-href-https-github-com-emberjs-data-pull-4263-4263-a'&gt;&lt;code&gt;ds-links-in-record-array&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4263"&gt;#4263&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This feature exposes a &lt;code&gt;links&lt;/code&gt; object on a &lt;code&gt;RecordArray&lt;/code&gt;. This can be used to load additional links when  present in the response JSON-API document.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;store.query(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;isRecent&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; }).then((posts) =&amp;gt; {
  posts.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;links.next&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/danmcclain"&gt;@danmcclain&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-8-beta-1'&gt;Upcoming Features in Ember Data 2.8.beta-1&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-improved-ajax-code-a-href-https-github-com-emberjs-data-pull-3099-3099-a'&gt;&lt;code&gt;ds-improved-ajax&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/3099"&gt;#3099&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-improved-ajax&lt;/code&gt; feature was originally planned to be released
in Ember Data 2.7. However, feedback from the beta found that many
people are overriding &lt;code&gt;ajax()&lt;/code&gt; to change the protocol of the adapter
and the new methods added in made &lt;code&gt;ds-improved-ajax&lt;/code&gt; made this usecase
harder to achieve. The Ember Data team has decided to delay the
&lt;code&gt;ds-improved-ajax&lt;/code&gt; feature flag until the Ember Data 2.8 release while
improving the API for this usecase.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ds-improved-ajax&lt;/code&gt; feature adds new public methods to
&lt;code&gt;DS.RESTAdapter&lt;/code&gt;, which allow to customize the properties of a
request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;methodForRequest&lt;/code&gt; to get the HTTP verb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urlForRequest&lt;/code&gt; to get the URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headersForRequest&lt;/code&gt; to get the headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataForRequest&lt;/code&gt; to get the data (query params or request body)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; hash passed to those methods has all the properties with
which the corresponding &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;createRecord&lt;/code&gt;, &lt;code&gt;findQuery&lt;/code&gt;, ...  calls
have been invoked: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;snapshot&lt;/code&gt;(s), &lt;code&gt;id&lt;/code&gt;(s) and &lt;code&gt;query&lt;/code&gt;. The
&lt;code&gt;requestType&lt;/code&gt; property indicates which method is requested; the possible
values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing the actual AJAX request is handled by the &lt;code&gt;makeRequest&lt;/code&gt;
method, which is similar to the existing &lt;code&gt;ajax&lt;/code&gt; method: it makes the
request using &lt;code&gt;jQuery.ajax&lt;/code&gt; and attaches success and failure handlers.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Say your API handles creation of resources via PUT, this can now be
customized as follows:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// adapters/application.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTAdapter.extend({
  methodForRequest(params) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (params.requestType === &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;createRecord&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;PUT&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }

    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(...&lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for
implementing this feature.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.8 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.8.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.8.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.7 and 2.8 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/07/25/ember-2-7-and-2-8-beta-released.html"/>
    <id>http://emberjs.com/blog/2016/07/25/ember-2-7-and-2-8-beta-released.html</id>
    <published>2016-07-25T00:00:00+00:00</published>
    <updated>2016-07-25T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.7, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.8 beta is also being released today. This branch will be released as
stable in roughly six weeks and will then go on to be the next &lt;a href="/blog/2016/02/25/announcing-embers-first-lts.html"&gt;LTS...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.7, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.8 beta is also being released today. This branch will be released as
stable in roughly six weeks and will then go on to be the next &lt;a href="/blog/2016/02/25/announcing-embers-first-lts.html"&gt;LTS release&lt;/a&gt;
roughly six weeks after that.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-7'&gt;Changes in Ember.js 2.7&lt;/h3&gt;
&lt;p&gt;Ember 2.7 introduces one new backward compatible API:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-computed-uniqby-code'&gt;&lt;code&gt;Ember.computed.uniqBy&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In general, the core team is hesitant about adding any new computed macros
or array prototype extensions to the framework. Instead, we encourage developers
to adopt an addon such as &lt;a href="https://github.com/cibernox/ember-cpm"&gt;ember-cpm&lt;/a&gt;
if they desire an expanded list of macros.&lt;/p&gt;

&lt;p&gt;However contributor &lt;a href="https://github.com/seanjohnson08"&gt;@seanjohnson08&lt;/a&gt; correctly
pointed out there is a logical gap in the APIs Ember provides today. Although
each of &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;reject&lt;/code&gt; have a comparable &lt;code&gt;xxxBy&lt;/code&gt; method
(for example &lt;code&gt;findBy&lt;/code&gt;) no comparable method exists for &lt;code&gt;uniq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ember 2.7 adds &lt;code&gt;uniqBy&lt;/code&gt; as an computed property macro. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;carsInAccidents&lt;/span&gt;: Ember.computed.mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed.uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;carsInAccidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;uniqBy&lt;/code&gt; is also added as an array method. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents.@each.car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more information on these methods, see the &lt;a href="http://emberjs.com/api/classes/Ember.computed.html#method_uniqBy"&gt;API docs for the computed
macro&lt;/a&gt;, &lt;a href="http://emberjs.com/api/classes/Ember.Array.html#method_uniqBy"&gt;API
docs for the array
method&lt;/a&gt;, and
&lt;a href="https://github.com/emberjs/ember.js/pull/12875"&gt;PR #12875&lt;/a&gt; introducing these
changes.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember 2.7:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ember.Backburner&lt;/code&gt; was private throughout the Ember 2.x series and will be
removed after Ember 2.8, as mentioned in the
&lt;a href="http://emberjs.com/deprecations/v2.x/#toc_ember-backburner"&gt;deprecation guide&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ember.Binding&lt;/code&gt; has not been needed for some time and is deprecated in favor
of computed properties and services (depending on what you were binding to).
It will be removed in Ember 3.0. See the
&lt;a href="http://emberjs.com/deprecations/v2.x/#toc_ember-binding"&gt;deprecation guide&lt;/a&gt;
for more details.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes landing in 2.7, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.7.0/CHANGELOG.md"&gt;Ember.js 2.7.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-8-beta'&gt;Ember.js 2.8 Beta&lt;/h3&gt;
&lt;p&gt;Ember 2.8 beta introduces the following new backward compatible APIs:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_engines'&gt;Engines&lt;/h4&gt;
&lt;p&gt;As described in the &lt;a href="https://github.com/emberjs/rfcs/pull/10"&gt;RFC&lt;/a&gt;, &amp;quot;engines
allow multiple logical applications to be composed together into a single
application from the user&amp;#39;s perspective.&amp;quot;&lt;/p&gt;

&lt;p&gt;The best way to use this feature in your apps is through the &lt;a href="http://github.com/dgeb/ember-engines"&gt;ember-engines addon&lt;/a&gt;.
To get started, check out the excellent &lt;a href="https://github.com/dgeb/ember-engines/blob/master/guides/01-introduction.md"&gt;guides&lt;/a&gt;
written by &lt;a href="https://github.com/trentmwillis"&gt;@trentmwillis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This release will introduce a set of low-level APIs for the core functionailty
along with the ususal semver guarentee. While the ember-engines addon itself
remains expermental, the introduction of these public APIs means that &lt;strong&gt;ember-engines
is now usable with Ember.js 2.8 beta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Work on engines has proceeded over the past year in both Ember core as well as
the addon. Ember&amp;#39;s architecture has been enhanced to provide the base classes
and hooks needed to support engines. The addon then makes use of these interfaces
to provide a smooth experience building and consuming engines.&lt;/p&gt;

&lt;p&gt;Until now, none of the engine-related classes and hooks in Ember have been
exposed publicly. However, starting with Ember 2.8, the following APIs will be
made public:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ember.Engine&lt;/code&gt; class - The base class for &lt;code&gt;Ember.Application&lt;/code&gt;. Its only public
interface is related to initializers and instance initializers, which is
then inherited by applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ember.EngineInstance&lt;/code&gt; class - The base class for &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mount&lt;/code&gt; keyword - Allows for the mounting of routeless engines in templates.
This keyword currently only takes one argument, the name of the engine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mount&lt;/code&gt; router DSL - Allows routable engines to be mounted at a location in
a route map.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By making these APIs public, ember-engines and other addons will be able to
access them without a feature-flag in a (soon-to-be) stable release of Ember. By
accessing only public interfaces in Ember, an addon won&amp;#39;t need to rely on
private overrides and can provide as stable an experience as possible.&lt;/p&gt;

&lt;p&gt;We predict that engines will grow in popularity once work on lazy loading is
complete. By delaying the loading of engines until they&amp;#39;re accessed, we can
decrease the initial payload size and startup time for applications. If you&amp;#39;re
interested in helping to implement or test lazy loading of engines, please check
out the thorough &lt;a href="https://github.com/dgeb/ember-engines/issues/154"&gt;attack plan&lt;/a&gt;
written up by &lt;a href="https://github.com/nathanhammond"&gt;@nathanhammond&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-enumerable-includes-code-and-code-array-includes-code'&gt;&lt;code&gt;Enumerable#includes&lt;/code&gt; and &lt;code&gt;Array#includes&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In an effort to remain inline with ES standards, the methods
&lt;code&gt;Enumerable#contains&lt;/code&gt; and &lt;code&gt;Array#contains&lt;/code&gt; have been deprecated in favor of the
new methods &lt;code&gt;Enumerable#includes&lt;/code&gt; and &lt;code&gt;Array#includes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/alexspeller"&gt;@alexspeller&lt;/a&gt; for the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0136-contains-to-includes.md"&gt;RFC&lt;/a&gt;
that proposed this change.&lt;/p&gt;

&lt;p&gt;Thanks as well to &lt;a href="https://github.com/bmeurant"&gt;@bmeurant&lt;/a&gt; for the
&lt;a href="https://github.com/emberjs/ember.js/pull/13553"&gt;PR&lt;/a&gt; that implemented the change.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-string-ishtmlsafe-code'&gt;&lt;code&gt;Ember.String.isHTMLSafe&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The new method &lt;code&gt;Ember.String.isHTMLSafe&lt;/code&gt; detects if a string was decorated using
&lt;code&gt;Ember.String.htmlSafe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; plainString = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;plain string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
    safeString = Ember.String.htmlSafe(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;div&amp;gt;someValue&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

Ember.String.isHTMLSafe(plainString); &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.String.isHTMLSafe(safeString);  &lt;span class="comment"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/workmanw"&gt;@workmanw&lt;/a&gt; for the
&lt;a href="https://github.com/emberjs/rfcs/pull/139"&gt;RFC&lt;/a&gt; that proposed this new API, as
well as the &lt;a href="https://github.com/emberjs/ember.js/pull/13666"&gt;PR&lt;/a&gt; that
implemented it.&lt;/p&gt;

&lt;p&gt;On a related note, please create safe strings with &lt;code&gt;Ember.String.htmlSafe&lt;/code&gt;
instead of the deprecated &lt;code&gt;Ember.Handlebars.SafeString&lt;/code&gt;. See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_use-ember-string-htmlsafe-over-ember-handlebars-safestring"&gt;deprecation
guide&lt;/a&gt;
for details.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-test-checkwaiters-code'&gt;&lt;code&gt;Ember.Test.checkWaiters&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The new method &lt;code&gt;Ember.Test.checkWaiters&lt;/code&gt; provides a simple mechanism for test
tooling to determine whether all async test waiters have settled. This replaces
the intimate API &lt;code&gt;Ember.Test.waiters&lt;/code&gt;, which has been deprecated and will be
removed in Ember 2.8 final.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; and
&lt;a href="https://github.com/krisselden"&gt;@krisselden&lt;/a&gt; for implementing this method.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;For more details on changes landing in 2.8 beta, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.8.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.8.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 2.6 and 2.7 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/06/09/ember-data-2-6-released.html"/>
    <id>http://emberjs.com/blog/2016/06/09/ember-data-2-6-released.html</id>
    <published>2016-06-09T00:00:00+00:00</published>
    <updated>2016-06-09T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.6, a minor version release of Ember Data, is
released. This release represents the work of over 22 direct
contributors, and over 85 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.7 beta.1, the branch of Ember Data that will be released
as stable in roughly six...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.6, a minor version release of Ember Data, is
released. This release represents the work of over 22 direct
contributors, and over 85 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.7 beta.1, the branch of Ember Data that will be released
as stable in roughly six weeks, is also being released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-6'&gt;Changes in Ember Data 2.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ds-serialize-ids-and-types&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enables a new &lt;code&gt;ids-and-type&lt;/code&gt; strategy (in addition to the already existing &lt;code&gt;ids&lt;/code&gt; and &lt;code&gt;records&lt;/code&gt;) for
serializing has many relationships using the &lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; that  will include both
&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; of each model as an object.&lt;/p&gt;

&lt;p&gt;For instance, if a user has many pets, which is a polymorphic relationship, the generated payload would be:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Bertin Osborne&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;pets&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Cat&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; },
      { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;2&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Parrot&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}
    ]
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is particularly useful for polymorphic relationships not backed
  by &lt;a href="https://en.wikipedia.org/wiki/Single_Table_Inheritance"&gt;STI&lt;/a&gt;
  when just including the id of the records is not enough.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;@cibernox&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-7-beta-1'&gt;Upcoming Features in Ember Data 2.7.beta-1&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-boolean-transform-allow-null-code-a-href-https-github-com-emberjs-data-pull-4022-4022-a'&gt;&lt;code&gt;ds-boolean-transform-allow-null&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4022"&gt;#4022&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Allow &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt; values for boolean attributes via &lt;code&gt;attr(&amp;#39;boolean&amp;#39;, { allowNull: true })&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/user.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; attr from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/attr&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;email&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;username&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;wantsWeeklyEmail&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;boolean&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;allowNull&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-improved-ajax-code-a-href-https-github-com-emberjs-data-pull-3099-3099-a'&gt;&lt;code&gt;ds-improved-ajax&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/3099"&gt;#3099&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Though &lt;code&gt;ajax()&lt;/code&gt; (and &lt;code&gt;ajaxOptions()&lt;/code&gt;) of &lt;code&gt;DS.RESTAdapter&lt;/code&gt; are marked as
private, they have been overwritten in many applications, since there is
currently no other way to customize the request.&lt;/p&gt;

&lt;p&gt;This feature adds new public methods to &lt;code&gt;DS.RESTAdapter&lt;/code&gt;, which allow to
customize the properties of a request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;methodForRequest&lt;/code&gt; to get the HTTP verb&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urlForRequest&lt;/code&gt; to get the URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headersForRequest&lt;/code&gt; to get the headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataForRequest&lt;/code&gt; to get the data (query params or request body)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; hash passed to those methods has all the properties with
which the corresponding &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;createRecord&lt;/code&gt;, &lt;code&gt;findQuery&lt;/code&gt;, ...  calls
have been invoked: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;snapshot&lt;/code&gt;(s), &lt;code&gt;id&lt;/code&gt;(s) and &lt;code&gt;query&lt;/code&gt;. The
&lt;code&gt;requestType&lt;/code&gt; property indicates which method is requested; the possible
values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queryRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHasMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBelongsTo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing the actual AJAX request is handled by the &lt;code&gt;makeRequest&lt;/code&gt;
method, which is similar to the existing &lt;code&gt;ajax&lt;/code&gt; method: it makes the
request using &lt;code&gt;jQuery.ajax&lt;/code&gt; and attaches success and failure handlers.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Say your API handles creation of resources via PUT, this can now be
customized as follows:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// adapters/application.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.RESTAdapter.extend({
  methodForRequest(params) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (params.requestType === &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;createRecord&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;PUT&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }

    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._super(...&lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for
implementing this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ds-links-in-record-array-code-a-href-https-github-com-emberjs-data-pull-4263-4263-a'&gt;&lt;code&gt;ds-links-in-record-array&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/4263"&gt;#4263&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This feature exposes a &lt;code&gt;links&lt;/code&gt; object on a &lt;code&gt;RecordArray&lt;/code&gt;. This can be used to load additional links when  present in the response JSON-API document.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;store.query(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;isRecent&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt; }).then((posts) =&amp;gt; {
  posts.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;links.next&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/danmcclain"&gt;@danmcclain&lt;/a&gt; for
implementing this feature.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.7 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.7.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.7.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.6 and 2.7 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/06/08/ember-2-6-and-2-7-beta-released.html"/>
    <id>http://emberjs.com/blog/2016/06/08/ember-2-6-and-2-7-beta-released.html</id>
    <published>2016-06-08T00:00:00+00:00</published>
    <updated>2016-06-08T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.6, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.7 beta, the branch of Ember that will be released as stable in
roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_changes-in-ember-js-2-6"&gt;Changes in Ember.js 2.6&lt;/h3&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.6, a minor version release of Ember with backwards compatible
changes, is released today.&lt;/p&gt;

&lt;p&gt;Ember.js 2.7 beta, the branch of Ember that will be released as stable in
roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-6'&gt;Changes in Ember.js 2.6&lt;/h3&gt;
&lt;p&gt;No new features are added in Ember core in 2.6. In general the core team and
community have remained active around other highly visible parts of the Ember
stack (Ember Data, FastBoot, Glimmer, etc).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember 2.6 and will be
removed in Ember 3.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;didInitAttrs&lt;/code&gt; hook for component lifecycles is deprecated in favor of
simply using &lt;code&gt;init&lt;/code&gt;. &lt;code&gt;didInitAttrs&lt;/code&gt; had confusing timing
issues, and &lt;code&gt;init&lt;/code&gt; fulfills the same role. See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_ember-component-didinitattrs"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Passing a &lt;code&gt;model&lt;/code&gt; argument to &lt;code&gt;{{render}}&lt;/code&gt; is deprecated in favor of using
a component for the same cases. For example &lt;code&gt;{{render &amp;#39;chat&amp;#39; roomModel}}&lt;/code&gt;
can be refactored into a &lt;code&gt;chat-room&lt;/code&gt; component.
See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_model-param-in-code-render-code-helper"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes landing in 2.6, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.6.0/CHANGELOG.md"&gt;Ember.js 2.6.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-7-beta'&gt;Ember.js 2.7 Beta&lt;/h3&gt;
&lt;p&gt;Ember 2.7 beta introduces one new backward compatible API:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-computed-uniqby-code'&gt;&lt;code&gt;Ember.computed.uniqBy&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In general, the core team is hesitant about adding any new computed macros
or array prototype extensions to the framework. Instead, we encourage developers
to adopt an addon such as &lt;a href="https://github.com/cibernox/ember-cpm"&gt;ember-cpm&lt;/a&gt;
if they desire an expanded list of macros.&lt;/p&gt;

&lt;p&gt;However contributor &lt;a href="https://github.com/seanjohnson08"&gt;@seanjohnson08&lt;/a&gt; correctly pointed out there is a logical
gap in the APIs Ember provides today. Although each of &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;,
and &lt;code&gt;reject&lt;/code&gt; have a comparable &lt;code&gt;xxxBy&lt;/code&gt; method (for example &lt;code&gt;findBy&lt;/code&gt;) no
comparable method exists for &lt;code&gt;uniq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ember 2.7 adds &lt;code&gt;uniqBy&lt;/code&gt; as an computed property macro. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;carsInAccidents&lt;/span&gt;: Ember.computed.mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), 
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed.uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;carsInAccidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;uniqBy&lt;/code&gt; is also added as an array method. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;accidents&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Flipped over&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Aliens&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Toyota&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    },{
      &lt;span class="key"&gt;description&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Road rage&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;car&lt;/span&gt;: { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;make&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Saturn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
    }];
  }),
  &lt;span class="key"&gt;uniqueCarsInAccidents&lt;/span&gt;: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents.@each.car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;accidents&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;car&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).uniqBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more information on these methods, see the &lt;a href="http://emberjs.com/api/classes/Ember.computed.html#method_uniqBy"&gt;API docs for the
computed macro&lt;/a&gt;, &lt;a href="http://emberjs.com/api/classes/Ember.Array.html#method_uniqBy"&gt;API docs for the array method&lt;/a&gt;, and &lt;a href="https://github.com/emberjs/ember.js/pull/12875"&gt;PR #12875&lt;/a&gt;
introducing these changes.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.7 beta, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.7.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.7.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Subteams</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/05/19/introducing-subteams.html"/>
    <id>http://emberjs.com/blog/2016/05/19/introducing-subteams.html</id>
    <published>2016-05-19T00:00:00+00:00</published>
    <updated>2016-05-19T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;I'm very happy to share with you our plan to scale Ember's day-to-day
decision-making and coordination‚Äîsomething we're calling Subteams. We mentioned
some of this in this year's EmberConf keynote, and wanted to expand on the
specific details.&lt;/p&gt;

&lt;p&gt;Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m very happy to share with you our plan to scale Ember&amp;#39;s day-to-day
decision-making and coordination‚Äîsomething we&amp;#39;re calling Subteams. We mentioned
some of this in this year&amp;#39;s EmberConf keynote, and wanted to expand on the
specific details.&lt;/p&gt;

&lt;p&gt;Ember.js was once just a view layer for rendering templates in the
browser, but has grown to become a complete SDK for the web. With one
&lt;code&gt;npm install&lt;/code&gt;, you get everything you need to create a modern web
application.&lt;/p&gt;

&lt;p&gt;Making things simple for developers often means a lot of coordination
and decision-making behind the scenes. As the number of pieces making up
Ember has grown‚Äîencompassing not only Ember.js but Ember CLI, Ember
Data, the Ember Inspector, documentation, and more‚Äîwe want to ensure
that the Core Team does not become a bottleneck for progress.&lt;/p&gt;

&lt;p&gt;At the same time, we believe that having a strong vision that everyone
can rally behind is critical to building software that feels cohesive.
So how do we ensure that everyone is pulling their cart in the same
direction, without losing momentum?&lt;/p&gt;

&lt;p&gt;We&amp;#39;re taking a page from &lt;a href="https://internals.rust-lang.org/t/announcing-the-subteams/2042"&gt;Rust&amp;#39;s
playbook&lt;/a&gt;
and adopting the idea of Subteams. While we&amp;#39;ve often had informal teams
tackle specific tasks, this change formalizes that process and
officially recognizes the hard work of these contributors.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_core-team'&gt;Core Team&lt;/h2&gt;
&lt;p&gt;The Core Team serves as the leadership for the Ember project as a whole.
Its responsibilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setting the overall direction and vision for the project.&lt;/strong&gt; This means
setting the core values that are used when making decisions about
technical tradeoffs. The core team also leads the writing of RFCs around new
initiatives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setting priorities and the release schedule.&lt;/strong&gt; Design bandwidth is limited,
and it&amp;#39;s dangerous to try to grow the framework too quickly; the core
team makes some difficult decisions about which areas to prioritize for
new design, based on the core values and target use cases.
The regular release cycle, being one of the project&amp;#39;s core values,
applies to subteams as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focusing on broad, cross-cutting concerns.&lt;/strong&gt; The Core Team is specifically
designed to take a global view of the project, to make sure the pieces
are fitting together in a coherent way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spinning up or shutting down subteams.&lt;/strong&gt; Over time, we may want to expand the
set of subteams, and it may make sense to have temporary &amp;quot;strike
teams&amp;quot; that focus on a particular, limited task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Going/no-going features&lt;/strong&gt;. While the subteams make decisions on RFCs,
the Core Team is responsible for pulling the trigger that moves a
feature from canary to beta. This provides an extra check that
features have adequately addressed cross-cutting concerns and that the
implementation quality is high enough.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each subteam is led by a Core Team liaison. This member is responsible for
keeping the Core Team apprised of progress on important initiatives,
identifying potential areas of concern early, and escalating cross-cutting
issues when needed.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #dev-ember-cli&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/ember-cli"&gt;Ember CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaisons&lt;/strong&gt;: Stefan Penner &amp;amp; Robert Jackson  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Katie Gengler&lt;/li&gt;
&lt;li&gt;Chad Hietala&lt;/li&gt;
&lt;li&gt;Jake Bixby&lt;/li&gt;
&lt;li&gt;Nathan Hammond&lt;/li&gt;
&lt;li&gt;Kelly Selden&lt;/li&gt;
&lt;li&gt;Tobias Bieniek&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #dev-ember-data&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/ember-data"&gt;Ember
Data&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaison&lt;/strong&gt;: Igor Terzic  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clemens M√ºller&lt;/li&gt;
&lt;li&gt;Christoffer Persson&lt;/li&gt;
&lt;li&gt;Stanley Stuart&lt;/li&gt;
&lt;li&gt;Brendan McLoughlin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_learning'&gt;Learning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slack channel&lt;/strong&gt;: #-learning&lt;br&gt;
&lt;strong&gt;Discourse category&lt;/strong&gt;: &lt;a href="http://discuss.emberjs.com/c/learning"&gt;Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Ember CLI and Ember Data subteams should be self-explanatory,
this one is the newest and may require some explanation.&lt;/p&gt;

&lt;p&gt;We intentionally did not call this subteam &lt;em&gt;Documentation&lt;/em&gt;,
because documentation is just one part of how new users learn to use
Ember. People start learning the second they land on the website
homepage, or when they see a presentation at their local user group.&lt;/p&gt;

&lt;p&gt;We want to make holistic learning a central part of Ember. In addition to good
guides and API documentation, this means thinking about how members of
the community interact, how they get help, and how we introduce them to
new features added via the RFC process.&lt;/p&gt;

&lt;p&gt;The Learning Subteam is responsible for the website, the guides, the API
docs and making sure the Core Team is aware of common pitfalls people
hit, like confusing error messages or APIs. We will take this
information and feed it back into the framework itself.&lt;/p&gt;

&lt;p&gt;The best documentation is the documentation you never have to write. By
reducing complexity, making errors clearer, and smoothing the learning
curve, we can help Ember reach an entirely new audience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core Team Liaison&lt;/strong&gt;: Leah Silber&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;David Baker&lt;/li&gt;
&lt;li&gt;Ricardo Mendes&lt;/li&gt;
&lt;li&gt;Todd Jordan&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You&lt;/h2&gt;
&lt;p&gt;You can find information on the subteams and their members at
&lt;a href="http://emberjs.com/team/"&gt;http://emberjs.com/team/&lt;/a&gt;. We will keep this page up-to-date as people
come and go.&lt;/p&gt;

&lt;p&gt;A big thank you to the members of these teams, who donate their time and
energy to make the web a better place. If you&amp;#39;re interested in helping,
please reach out to one of the above team members for the best way to
get started.&lt;/p&gt;

&lt;p&gt;We are excited at the pace at which Ember has grown, and we think it
uniquely solves the challenge of building modern web applications in a
way that doesn&amp;#39;t push all of the complexity to the app developer. We
could not build as ambitiously without the dedication of these people.
Please join me in welcoming the new subteams, and in thanking for them
all of their hard work!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many thanks to the Rust Core Team and particularly Aaron Turon&amp;#39;s &lt;a href="https://github.com/aturon/rfcs/blob/rust-governance/text/0000-rust-governance.md"&gt;Governance
RFC&lt;/a&gt;,
and &lt;a href="https://internals.rust-lang.org/t/announcing-the-subteams/2042"&gt;subteam
announcement&lt;/a&gt;,
from which parts of this post are adapted.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
