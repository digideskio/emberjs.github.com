<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2016-04-27T20:00:00-04:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Upcoming deprecation of baseURL in Ember CLI 2.7</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/04/28/baseURL.html"/>
    <id>http://emberjs.com/blog/2016/04/28/baseURL.html</id>
    <published>2016-04-27T20:00:00-04:00</published>
    <updated>2016-04-27T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;The &lt;code&gt;baseURL&lt;/code&gt; configuration option and the accompanying &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag in Ember CLI applications are often and tragically misunderstood. There have been &lt;a href="https://github.com/ember-cli/ember-cli/search?q=baseURL&amp;amp;type=issues"&gt;at least 67 issues&lt;/a&gt; opened for Ember CLI referencing &lt;code&gt;baseURL&lt;/code&gt;, making it one of the most common points...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The &lt;code&gt;baseURL&lt;/code&gt; configuration option and the accompanying &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag in Ember CLI applications are often and tragically misunderstood. There have been &lt;a href="https://github.com/ember-cli/ember-cli/search?q=baseURL&amp;amp;type=issues"&gt;at least 67 issues&lt;/a&gt; opened for Ember CLI referencing &lt;code&gt;baseURL&lt;/code&gt;, making it one of the most common points of discussion. &lt;strong&gt;&lt;a href="https://github.com/ember-cli/ember-cli/pull/5792"&gt;As a result, in Ember CLI&amp;#39;s canary channel, we have deprecated &lt;code&gt;baseURL&lt;/code&gt; and removed the default &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; inside of &lt;code&gt;index.html&lt;/code&gt;.&lt;/a&gt;&lt;/strong&gt; The intent is that this change will be released with Ember CLI 2.7 stable in roughly 10 weeks.&lt;/p&gt;

&lt;p&gt;Existing applications are able to continue using &lt;code&gt;baseURL&lt;/code&gt; with a deprecation warning. If you are eager to adopt this change, you should note that the removal of the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag may impact how your application is deployed, and if so, will likely require some small migration effort, detailed below.&lt;/p&gt;

&lt;p&gt;This is the culmination of a lot of research and work by &lt;a href="https://github.com/Turbo87"&gt;Tobias Bieniek&lt;/a&gt; and we&amp;#39;re incredibly grateful for his efforts.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_what-was-it'&gt;What was it?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;baseURL&lt;/code&gt; allowed an Ember application and assets to be deployed to a subdirectory without requiring rewriting of asset URLs, instead allowing them to be included relatively. For example given an HTML file:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;http://emberapp.example.com/path/to/application/&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="attribute-name"&gt;rel&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;stylesheet&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/style.css&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;assets/images/image.png&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The style would be fetched from &lt;code&gt;http://emberapp.example.com/path/to/application/assets/style.css&lt;/code&gt;, and the image from &lt;code&gt;http://emberapp.example.com/path/to/application/assets/images/image.png&lt;/code&gt;. If you are curious, &lt;a href="http://webdesign.tutsplus.com/articles/quick-tip-set-relative-urls-with-the-base-tag--cms-21399"&gt;here is a good read on the base tag&lt;/a&gt;. In short, &lt;code&gt;baseURL&lt;/code&gt; is the configuration property Ember CLI used to identify what value to put in the &lt;code&gt;&amp;lt;base href=&amp;quot;...&amp;quot; /&amp;gt;&lt;/code&gt; tag included in &lt;code&gt;index.html&lt;/code&gt;. This determined where assets for the application should be loaded from, including &lt;code&gt;app.js&lt;/code&gt;, &lt;code&gt;vendor.js&lt;/code&gt;, &lt;code&gt;app.css&lt;/code&gt;, and anything else that isn&amp;#39;t specified with a fully-qualified path.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_why-are-we-deprecating-it'&gt;Why are we deprecating it?&lt;/h3&gt;
&lt;p&gt;Variations on the &lt;code&gt;baseURL&lt;/code&gt; solution has been Ember CLIs default asset prefixing behavior for &lt;a href="https://github.com/ember-cli/ember-cli/commit/404091401400478ef55088888b8ec383e02a17d6#diff-b785f57fd6a80a44da40bd76e531d8ecR11"&gt;two years&lt;/a&gt;. There are a number of reasons why we&amp;#39;re moving away from this pattern, but a few things really made it unnecessarily complicated.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_api-design-bugs'&gt;API Design Bugs&lt;/h4&gt;
&lt;p&gt;Since we added this feature two years ago apps can have both &lt;code&gt;baseURL&lt;/code&gt; and &lt;code&gt;rootURL&lt;/code&gt; configuration values. These two names are far too similar and do things which are far too similar. Where &lt;code&gt;baseURL&lt;/code&gt; identified the asset prefix of an application, &lt;code&gt;rootURL&lt;/code&gt; identifies the path at which an Ember application is served so Ember&amp;#39;s router can know which path segments to ignore.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_implicit-behavior'&gt;Implicit Behavior&lt;/h4&gt;
&lt;p&gt;Not only are there two confusing configuration options, but if only one of &lt;code&gt;baseURL&lt;/code&gt; or &lt;code&gt;rootURL&lt;/code&gt; was set Ember CLI made a best-effort guess at populating the other&amp;#39;s value. This implicit behavior violated the principle of least surprise for many people. An explicit requirement for both values always being set and clearer documentation would have averted &lt;em&gt;some&lt;/em&gt; of the pain but would have added additional things to the learning curve.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_integration-with-other-applications'&gt;Integration With Other Applications&lt;/h4&gt;
&lt;p&gt;Not every Ember application is full green field development. If you happened to have legacy user-generated HTML, or other data containing relative links, this didn&amp;#39;t play nicely with the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. Rewriting this content is an option, but incurs cost and bugs more simply avoided by not including the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_svg'&gt;SVG&lt;/h4&gt;
&lt;p&gt;Worst of all, and something that we can&amp;#39;t code or document around, SVG &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; elements break in an unexpected way when used with a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. It turns out that the relatively common pattern of &lt;code&gt;&amp;lt;use xlink:xhref=&amp;quot;#__SVG_ID__&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;&lt;/code&gt; referencing a fragment identifier doesn&amp;#39;t play nicely with the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. We like to play nicely with the web ecosystem and this fault is the final straw that resulted in the decision of removing the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_how-do-i-migrate'&gt;How Do I Migrate?&lt;/h3&gt;
&lt;p&gt;Existing applications are able to continue using &lt;code&gt;baseURL&lt;/code&gt; with a deprecation warning. For users who do want to migrate, the steps depend primarily on how your application is deployed. It&amp;#39;s our goal is to make it easy for you to achieve the same behaviors you&amp;#39;ve had in the past.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_new-applications'&gt;New Applications&lt;/h4&gt;
&lt;p&gt;If you&amp;#39;re starting a new application using an Ember CLI canary (or eventually 2.7 stable) everything should work correctly out of the box. We&amp;#39;ve been very careful to make sure that the out of the box experience is as smooth as possible. For the built-in development server all assets will be served at the &lt;code&gt;rootURL&lt;/code&gt;. Relative URLs will continue to work just fine inside of your CSS files and paths to assets included in your templates, &lt;code&gt;index.html&lt;/code&gt;, or inserted via &lt;code&gt;{{content-for}}&lt;/code&gt; should specify a root-relative path.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_upgrading'&gt;Upgrading&lt;/h4&gt;
&lt;p&gt;If you are upgrading your application to the new version of Ember CLI (canary with this change, or eventually 2.7 stable), you should pay close attention to the configuration changes inside of &lt;a href="https://github.com/ember-cli/ember-cli/pull/5792/files#diff-42e917b9304df0e99048f335019647bc"&gt;the&lt;/a&gt; &lt;a href="https://github.com/ember-cli/ember-cli/pull/5792/files#diff-f4d09ffc13efe496dd246031d423e166"&gt;modified&lt;/a&gt; &lt;a href="https://github.com/ember-cli/ember-cli/pull/5792/files#diff-9588ab8abb99afa6cac30dd0e2b86041"&gt;blueprint&lt;/a&gt; &lt;a href="https://github.com/ember-cli/ember-cli/pull/5792/files#diff-3b0f91e0e9f317eecebfad38da2f9b4c"&gt;files&lt;/a&gt;. We have also inserted deprecation warnings which will hopefully guide you through each of these changes.&lt;/p&gt;

&lt;p&gt;The primary migration effort is that you should expect to adjust any relative paths which appear in your templates, are inserted via &lt;code&gt;{{content-for}}&lt;/code&gt;, or directly present in &lt;code&gt;index.html&lt;/code&gt;. Because you will be serving &lt;code&gt;index.html&lt;/code&gt; from the server for any arbitrary route in your application you must modify these to be either a fully-qualified path or a root-relative URL.&lt;/p&gt;

&lt;p&gt;As an example, given this configuration where you have configured a different &lt;code&gt;rootURL&lt;/code&gt; and &lt;code&gt;baseURL&lt;/code&gt;:
&lt;code&gt;javascript
{
  rootURL: &amp;#39;/path/to/application/&amp;#39;,
  baseURL: &amp;#39;/assets/go/here/&amp;#39;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You would remove the &lt;code&gt;baseURL&lt;/code&gt; option and modify your templates like so:
```hbs
{{!-- Old: --}}
&lt;img src="images/logo.png" /&gt;&lt;/p&gt;

&lt;p&gt;{{!-- New: --}}
&lt;img src="/assets/go/here/images/logo.png" /&gt;
```&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_how-to-use-a-cdn'&gt;How To Use a CDN&lt;/h4&gt;
&lt;p&gt;One of the most common use cases for &lt;code&gt;baseURL&lt;/code&gt; was pointing to assets on a CDN. After this change to remove &lt;code&gt;baseURL&lt;/code&gt; you should use the &lt;code&gt;prepend&lt;/code&gt; option for &lt;a href="https://github.com/rickharrison/broccoli-asset-rev"&gt;&lt;code&gt;broccoli-asset-rev&lt;/code&gt;&lt;/a&gt; which is included with Ember CLI apps by default. For example, in &lt;code&gt;ember-cli-build.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; EmberApp(defaults, {
  &lt;span class="comment"&gt;// Add options here&lt;/span&gt;
  &lt;span class="key"&gt;fingerprint&lt;/span&gt;: {
    &lt;span class="key"&gt;prepend&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;https://cdn.example.com/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;prepend&lt;/code&gt; option only applies when doing &lt;em&gt;production&lt;/em&gt; builds via something like &lt;code&gt;ember build --prod&lt;/code&gt;. Given the above example, and this input:
&lt;code&gt;javascript
{
  rootURL: &amp;#39;/path/to/application/&amp;#39;
}
&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;&amp;lt;!-- Snipped from the &amp;lt;head&amp;gt; of the new `index.html` blueprint.  --&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="attribute-name"&gt;rel&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;stylesheet&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;{{rootURL}}assets/vendor.css&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="attribute-name"&gt;rel&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;stylesheet&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;{{rootURL}}assets/app-name.css&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output for asset paths in &lt;code&gt;index.html&lt;/code&gt; would look something like:
&lt;code&gt;html
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.example.com/assets/vendor-e37004361bf9cda2ab3379d96c9eba4b.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.example.com/assets/app-name-dc477601773d4043b0c461b2a0ae8aef.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: the &lt;code&gt;rootURL&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; present. This is intentional as &lt;code&gt;rootURL&lt;/code&gt; exists only to provide information to Ember&amp;#39;s Router about where the application is served from.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_css-fonts-and-other-static-assets'&gt;CSS, Fonts, and Other Static Assets&lt;/h4&gt;
&lt;p&gt;Depending upon how these were included into an application, their paths may need to be adjusted. Assets like these are often handled outside the Ember CLI build pipeline, but do check to make sure that everything is works as expected.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_addon-consumption-and-development'&gt;Addon Consumption and Development&lt;/h4&gt;
&lt;p&gt;It&amp;#39;s possible that you have addons which rely on rewriting asset URLs. If there is any impact, it is most likely going to impact users of &lt;code&gt;ember-cli-deploy&lt;/code&gt;. Please let us know what you discover during this canary/beta process, we&amp;#39;d like to see what each addon is attempting to accomplish and make sure we can support that use case.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_everything-is-broken-help'&gt;Everything is Broken! Help!&lt;/h4&gt;
&lt;p&gt;If for some reason removing &lt;code&gt;baseURL&lt;/code&gt; and the default &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag causes problems, you can still add a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag directly to your &lt;code&gt;index.html&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/what/your/baseURL/was/&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This can be useful to address relative URLs which are being inserted via templates, &lt;code&gt;index.html&lt;/code&gt;, or &lt;code&gt;{{content-for}}&lt;/code&gt;. For pathing to your built CSS and JS assets use the method described for CDNs.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_how-can-i-try-this'&gt;How Can I Try This?&lt;/h3&gt;
&lt;p&gt;Using our new release channel setup, you can try this change by upgrading your Ember CLI app to the canary channel:&lt;/p&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli/ember-cli#canary
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you discover any problems with this change please &lt;a href="https://github.com/ember-cli/ember-cli/issues/new"&gt;file an issue&lt;/a&gt;, we&amp;#39;ll be paying especially close attention to this topic.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.4-LTS, 2.5, and 2.6 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/04/11/ember-2-5-released.html"/>
    <id>http://emberjs.com/blog/2016/04/11/ember-2-5-released.html</id>
    <published>2016-04-10T20:00:00-04:00</published>
    <updated>2016-04-10T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember 2.4-LTS, the first Ember Long-Term Support release, lands today as Ember
2.4.5. Future versions of 2.4 will be considered part of the LTS channel.
The LTS channel comes with a commitment
that low-risk critical bugfixes and security patches will...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember 2.4-LTS, the first Ember Long-Term Support release, lands today as Ember
2.4.5. Future versions of 2.4 will be considered part of the LTS channel.
The LTS channel comes with a commitment
that low-risk critical bugfixes and security patches will be backported to
these versions. Additionally, any change to commonly used private APIs must be deprecated
in at least one LTS release before removal, making LTS releases a slower
moving target for addons to support.&lt;/p&gt;

&lt;p&gt;2.4-LTS will receive critical bugfixes for the next 6 release cycles (until
roughly November 2016) and security patches for the next 10 release cycles
(until roughly April 2017). For more information about how the LTS process works,
see the blog post &lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Announcing Ember&amp;#39;s First LTS Release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ember 2.5, a minor version release of Ember with backwards compatible
changes, is also released today.&lt;/p&gt;

&lt;p&gt;Ember 2.6 beta, the branch of Ember that will be released as stable in
roughly six weeks, is released today.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_notable-deprecations-in-ember-2-4-lts'&gt;Notable deprecations in Ember 2.4-LTS&lt;/h3&gt;
&lt;p&gt;Ember 2.4-LTS deprecates two private APIs. Support for these private APIs will
be removed in Ember 2.6.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://github.com/emberjs/ember-legacy-views"&gt;ember-legacy-views&lt;/a&gt; and &lt;a href="https://github.com/emberjs/ember-legacy-controllers"&gt;ember-legacy-controllers&lt;/a&gt;
addons, which rely upon private API, will be supported on Ember 2.4-LTS with a deprecation notice. Although Ember 2.5 will also
support these addons, 2.4-LTS will be a supported platform for much longer than
2.5. Ember 2.6 and 2.8-LTS, when they are released, will not support these addons.&lt;/li&gt;
&lt;li&gt;Use of the &lt;code&gt;{{#render}}&lt;/code&gt; helper in block form is deprecated. Block form usage was an
un-documented and un-intended feature, and will be removed in Ember 2.6. In general,
uses of &lt;code&gt;{{render}}&lt;/code&gt; should be replaced with components.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-2-5'&gt;Changes in Ember 2.5&lt;/h3&gt;
&lt;p&gt;Ember 2.5 introduces several minor public API additions.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-assign-code'&gt;&lt;code&gt;Ember.assign&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Ember.assign&lt;/code&gt; is a polyfill for the ES2015 &lt;code&gt;Object.assign&lt;/code&gt; feature. &lt;code&gt;assign&lt;/code&gt;
copies the values of all enumerable own properties from one or more source
objects to a target object. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let a = {&lt;span class="key"&gt;first&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
let b = {&lt;span class="key"&gt;last&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Lennon&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
let c = {&lt;span class="key"&gt;band&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Beatles&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};

Ember.assign(a, b, c);

&lt;span class="comment"&gt;// a === {first: 'John', last: 'Lennon', band: 'The Beatles'}&lt;/span&gt;
&lt;span class="comment"&gt;// b === {last: 'Lennon'}&lt;/span&gt;
&lt;span class="comment"&gt;// c === {band: 'The Beatles'}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more specifics on &lt;code&gt;assign&lt;/code&gt;, see the &lt;a href="http://emberjs.com/api/#method_assign"&gt;Ember API documentation&lt;/a&gt;
and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_local-lookup-compatibility'&gt;Local Lookup Compatibility&lt;/h4&gt;
&lt;p&gt;As part of the new directory layout effort currently organized around the
&lt;a href="https://github.com/emberjs/rfcs/pull/124"&gt;Module Normalization RFC&lt;/a&gt;,
we intend to introduce a feature called
&amp;quot;local lookup&amp;quot;. This feature will allow for the creation of components or helpers available
only in a single template, instead of being globally scoped as they must be
today. &lt;code&gt;lookup&lt;/code&gt; and &lt;code&gt;resolve&lt;/code&gt; in Ember 2.5 will accept an optional &lt;code&gt;source&lt;/code&gt; property
on their &lt;code&gt;options&lt;/code&gt; argument. This API change will allow local
lookup to be implemented outside of Ember via the
&lt;a href="https://github.com/ember-cli/ember-resolver"&gt;ember-cli/ember-resolver&lt;/a&gt; library.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_native-event-test-helpers'&gt;Native Event Test Helpers&lt;/h4&gt;
&lt;p&gt;Ember&amp;#39;s acceptance test helpers, such as &lt;code&gt;click()&lt;/code&gt;, have previously used
jQuery event triggers. In 2.5 this behavior has been altered to trigger
native events via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;/a&gt;.
This change is expected to be completely backwards compatible and was
uncontroversial during the six week beta cycle. It allows the triggering of
non-jQuery event listeners in acceptance tests.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in Ember 2.5, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.5.0/CHANGELOG.md"&gt;Ember.js 2.5.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-6-beta'&gt;Ember.js 2.6 beta&lt;/h3&gt;
&lt;p&gt;No new features are added in Ember core in 2.6. In
general the core team and
community have remained active around other highly visible parts of
the Ember stack (Ember Data, FastBoot, Glimmer, etc).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_notable-deprecations'&gt;Notable Deprecations&lt;/h4&gt;
&lt;p&gt;The following deprecations are scheduled for release with Ember 2.6 and will be
removed in Ember 3.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ember.String.htmlSafe(aString)&lt;/code&gt; is the preferred API for marking a string
XSS safe for the rendering layer. Use of &lt;code&gt;Ember.Handlebars.SafeString&lt;/code&gt; as
a constructor for safe strings is deprecated, and will be removed.
See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_use-ember-string-htmlsafe-over-ember-handlebars-safestring"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;didInitAttrs&lt;/code&gt; hook for component lifecycles is deprecated in favor of
simply using &lt;code&gt;init&lt;/code&gt;. &lt;code&gt;didInitAttrs&lt;/code&gt; had confusing timing
issues, and &lt;code&gt;init&lt;/code&gt; fulfills the same role. See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_ember-component-didinitattrs"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Passing a &lt;code&gt;model&lt;/code&gt; argument to &lt;code&gt;{{render}}&lt;/code&gt; is deprecated in favor of using
a component for the same cases. For example &lt;code&gt;{{render &amp;#39;chat&amp;#39; roomModel}}&lt;/code&gt;
can be refactored into a &lt;code&gt;chat-room&lt;/code&gt; component.
See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_model-param-in-code-render-code-helper"&gt;deprecation guide&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes landing in 2.6 beta, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.6.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.6.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Zoey</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/03/23/introducing-zoey.html"/>
    <id>http://emberjs.com/blog/2016/03/23/introducing-zoey.html</id>
    <published>2016-03-22T20:00:00-04:00</published>
    <updated>2016-03-22T20:00:00-04:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Over the last few years the Ember project and community have grown, and along with it, the Ember brand. We took care and caution to craft an experience and &lt;em&gt;feel&lt;/em&gt; that while exciting and ambitious, stayed friendly and approachable. As everyone knows...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Over the last few years the Ember project and community have grown, and along with it, the Ember brand. We took care and caution to craft an experience and &lt;em&gt;feel&lt;/em&gt; that while exciting and ambitious, stayed friendly and approachable. As everyone knows, a big part of that is our friendly neighborhood mascot, the Tomster.&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xsG0gDkvDPw?rel=0&amp;start=221" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The time has come to expand the family. Introducing Zoey.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2016-03/ember-zoey-all-sm.png" class="no-background" alt="Zoey"&gt;&lt;/p&gt;

&lt;p&gt;When chatting about the origins of the Tomster for an EmberConf talk last year, &lt;a href="https://twitter.com/jgwhite"&gt;Jamie White&lt;/a&gt; and Tomster illustrator &lt;a href="http://lindsey.io/"&gt;Lindsey Wilson&lt;/a&gt; had chuckled about how a mascot needed to be a little bit like the perfect pop song. Distinct, but just generic enough that all different sorts of people could see themselves in it, just like the one right lyric in the song makes it the anthem of a million different emotions and situations.&lt;/p&gt;

&lt;p&gt;Tomster&amp;#39;s done a great job of that until now, and with the addition of Zoey, even more amazing Ember developers will be able to see themselves in Ember.&lt;/p&gt;

&lt;p&gt;While Tomster will always be the &lt;em&gt;original&lt;/em&gt; friendly face of Ember, you&amp;#39;ll start seeing Zoey pop up around town too. Stay tuned for some special Zoey swag at EmberConf, and help us welcome her to the family.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 2.4 and 2.5 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/03/13/ember-data-2-4-released.html"/>
    <id>http://emberjs.com/blog/2016/03/13/ember-data-2-4-released.html</id>
    <published>2016-03-12T19:00:00-05:00</published>
    <updated>2016-03-12T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember Data 2.4, a minor version release of Ember Data, is released today. This release represents the work of over 20 direct contributors, and over 76 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.5 beta.1, the branch of Ember Data that will be released as stable in roughly...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember Data 2.4, a minor version release of Ember Data, is released today. This release represents the work of over 20 direct contributors, and over 76 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.5 beta.1, the branch of Ember Data that will be released as stable in roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-4'&gt;Changes in Ember Data 2.4&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_friendly-errors'&gt;Friendly Errors&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/nikz"&gt;@nikz&lt;/a&gt; has implemented
&lt;a href="https://github.com/emberjs/rfcs/pull/101"&gt;RFC 101&lt;/a&gt; which provides
more context for &lt;code&gt;RESTAdapter&lt;/code&gt; and &lt;code&gt;JSONAPIAdapter&lt;/code&gt; errors in Ember
Data. Be sure to check out the
&lt;a href="https://github.com/emberjs/data/pull/3930"&gt;pull request&lt;/a&gt; for more
details.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_importing-modules'&gt;Importing Modules&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; &lt;a href="https://github.com/emberjs/data/pull/4125"&gt;added public paths&lt;/a&gt; to make it easy to import the &lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; and &lt;code&gt;DS.Serializer&lt;/code&gt; modules.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// DS.EmbeddedRecordsMixin&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; EmbeddedRecordsMixin from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/serializers/embedded-records-mixin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="comment"&gt;// DS.Serializer&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Serializer from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/serializer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_fastboot-support'&gt;Fastboot Support&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/danmcclain"&gt;@danmcclain&lt;/a&gt; added &lt;a href="https://github.com/emberjs/data/pull/4111"&gt;two&lt;/a&gt;
&lt;a href="https://github.com/emberjs/data/pull/4113"&gt;commits&lt;/a&gt; to enable support
for Ember Data with the
&lt;a href="https://github.com/tildeio/ember-cli-fastboot"&gt;Ember CLI Fastboot addon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on changes in 2.4, review the
&lt;a href="https://github.com/emberjs/data/blob/v2.4.0/CHANGELOG.md"&gt;Ember Data 2.4.0 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-features-in-ember-data-2-5-beta-1'&gt;Upcoming Features in Ember Data 2.5.beta-1&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-finder-include-code'&gt;&lt;code&gt;ds-finder-include&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-finder-include&lt;/code&gt; feature allows an &lt;code&gt;include&lt;/code&gt; query parameter to
be specified with using &lt;code&gt;store.findRecord()&lt;/code&gt; and &lt;code&gt;store.findAll()&lt;/code&gt; as
described in &lt;a href="https://github.com/emberjs/rfcs/pull/99"&gt;RFC 99&lt;/a&gt;. The
&lt;code&gt;include&lt;/code&gt; parameter tells JSON-API servers which relationships to
sideload in a response. Thanks to
&lt;a href="https://github.com/HeroicEric"&gt;@HeroicEric&lt;/a&gt; for implementing this
feature.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /articles/1?include=comments&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; article = &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.findRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1&lt;/span&gt;, { &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// GET /articles?include=comments&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; article = &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.findAll(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_code-ds-references-code'&gt;&lt;code&gt;ds-references&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-references&lt;/code&gt; feature implements the references API as described
in &lt;a href="https://github.com/emberjs/rfcs/pull/57"&gt;RFC 57&lt;/a&gt;. References is a
low level API to perform meta-operations on records, has-many
relationships and belongs-to relationships:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get the current local data synchronously without triggering a fetch or producing a promise&lt;/li&gt;
&lt;li&gt;notify the store that a fetch for a given record has begun, and provide a promise for its result&lt;/li&gt;
&lt;li&gt;similarly, notify a record that a fetch for a given relationship has begun, and provide a promise for its result&lt;/li&gt;
&lt;li&gt;retrieve server-provided metadata about a record or relationship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following &lt;code&gt;post&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// app/models/post.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Model from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; { belongsTo, hasMany } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data/relationships&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Model.extend({
  &lt;span class="key"&gt;comments&lt;/span&gt;: hasMany(),
  &lt;span class="key"&gt;author&lt;/span&gt;: belongsTo()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The references API now allows the possibility to interact with the relationships:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; post = store.peekRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;1&lt;/span&gt;);

&lt;span class="comment"&gt;// check if the author is already loaded, without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;if&lt;/span&gt; (post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).value() !== &lt;span class="predefined-constant"&gt;null&lt;/span&gt;) {
  console.log(post.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author.name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
} &lt;span class="keyword"&gt;else&lt;/span&gt; {
  &lt;span class="comment"&gt;// get the id of the author without triggering a request&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; authorId = post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).id();

  &lt;span class="comment"&gt;// load the author&lt;/span&gt;
  post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).load();
  console.log(&lt;span class="error"&gt;`&lt;/span&gt;Loading author &lt;span class="keyword"&gt;with&lt;/span&gt; id &lt;span class="predefined"&gt;$&lt;/span&gt;{authorId}&lt;span class="error"&gt;`&lt;/span&gt;);
}

&lt;span class="comment"&gt;// reload the author&lt;/span&gt;
post.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;author&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).reload();

&lt;span class="comment"&gt;// get all ids without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; commentIds = post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).ids();

&lt;span class="comment"&gt;// check if there are comments, without triggering a request&lt;/span&gt;
&lt;span class="keyword"&gt;if&lt;/span&gt; (post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).value() !== &lt;span class="predefined-constant"&gt;null&lt;/span&gt;) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; meta = post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).meta();
  console.log(&lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;{commentIds.length} comments out of &lt;span class="predefined"&gt;$&lt;/span&gt;{meta.total}&lt;span class="error"&gt;`&lt;/span&gt;);
} &lt;span class="keyword"&gt;else&lt;/span&gt; {
  post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).load();
}

&lt;span class="comment"&gt;// reload comments&lt;/span&gt;
post.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;comments&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).reload();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for implementing
this feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ds-transform-pass-options-code'&gt;&lt;code&gt;ds-transform-pass-options&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;ds-transform-pass-options&lt;/code&gt; feature allows for smarter transforms
by passing the options object from &lt;code&gt;DS.attr([type], [options])&lt;/code&gt; into
the transform.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_example'&gt;Example&lt;/h5&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/models/post.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;title&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;markdown&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;markdown&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
    &lt;span class="key"&gt;markdown&lt;/span&gt;: {
      &lt;span class="key"&gt;gfm&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;,
      &lt;span class="key"&gt;sanitize&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/transforms/markdown.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Transform.extend({
  &lt;span class="function"&gt;serialize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt; (deserialized, attributeMeta) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; deserialized.raw;
  },

  &lt;span class="function"&gt;deserialize&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt; (serialized, attributeMeta) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; options = attributeMeta.options.markdown || {};

    &lt;span class="keyword"&gt;return&lt;/span&gt; marked(serialized, options);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/pangratz"&gt;@pangratz&lt;/a&gt; for implementing
this feature and &lt;a href="https://github.com/knownasilya"&gt;@knownasilya&lt;/a&gt; for
proposing the &lt;a href="https://github.com/emberjs/rfcs/pull/1"&gt;RFC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details on changes in the 2.5 beta, please review the
&lt;a href="https://github.com/emberjs/data/blob/v2.5.0-beta.1/CHANGELOG.md"&gt;Ember Data 2.5.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2016 Ember Community Survey</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/03/04/2016-ember-community-survey.html"/>
    <id>http://emberjs.com/blog/2016/03/04/2016-ember-community-survey.html</id>
    <published>2016-03-03T19:00:00-05:00</published>
    <updated>2016-03-03T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;2015 was an incredible year to be a web developer, and great year to be
building an Ember app.&lt;/p&gt;

&lt;p&gt;Ember 2.0 landed in August, and with it came the first major shift in
application architecture since Ember left its SproutCore roots. The Ember-CLI
team...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;2015 was an incredible year to be a web developer, and great year to be
building an Ember app.&lt;/p&gt;

&lt;p&gt;Ember 2.0 landed in August, and with it came the first major shift in
application architecture since Ember left its SproutCore roots. The Ember-CLI
team made massive improvements to the speed and quality of our build tooling
several times over, all while continuing to be the foundation for a growing
addon community now topping 2000 projects. Ember-Data stabilized its public
API for the first time in the project&amp;#39;s history, and continues to contend
for the title of most complete client-side JavaScript data layer.&lt;/p&gt;

&lt;p&gt;Other projects, under the official umbrella and outside it, continue to
innovate and mature.&lt;/p&gt;

&lt;p&gt;With 2015 in the rear-view mirror, we should take a moment to check our assumptions
about who is in the Ember community and how they work with the framework.
To that end, we&amp;#39;re pleased to announce
the official 2016 Ember Community Survey!&lt;/p&gt;

&lt;p&gt;&lt;a href="/ember-community-survey-2016" class="survey-button orange button"&gt;
  Survey Landing Page &lt;img src="/images/survey/right-arrow.png" alt="Arrow to the right" /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Completing the survey should take about fifteen minutes. We will be accepting
submissions until March 21st.&lt;/p&gt;

&lt;p&gt;Please help us spread the word by sharing the above link on your social
network feeds, at meetups and around your office and other communities.&lt;/p&gt;

&lt;p&gt;With your answers (all anonymous), we will create some visuals and write up our
insights to share at &lt;a href="http://emberconf.com/"&gt;EmberConf 2016&lt;/a&gt; (March 29th-30th).
If you have any immediate questions, feel free to email
Ryan (&lt;a href="https://twitter.com/RyanLaBouve"&gt;@RyanLaBouve&lt;/a&gt;) and
Matthew (&lt;a href="https://twitter.com/mixonic"&gt;@mixonic&lt;/a&gt;) via
&lt;a href="mailto:survey@201-created.com"&gt;survey@201-created.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We look forward to your participation!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 2.4 and 2.5 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2016/02/29/ember-2-4-released.html"/>
    <id>http://emberjs.com/blog/2016/02/29/ember-2-4-released.html</id>
    <published>2016-02-28T19:00:00-05:00</published>
    <updated>2016-02-28T19:00:00-05:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js 2.4, a minor version release of Ember with backwards compatible
changes, is released today. After an additional six-week maturation cycle
as a stable release version, 2.4 will be declared Ember's first Long-Term
Support (LTS) release. For...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js 2.4, a minor version release of Ember with backwards compatible
changes, is released today. After an additional six-week maturation cycle
as a stable release version, 2.4 will be declared Ember&amp;#39;s first Long-Term
Support (LTS) release. For more about the LTS process and what you should
expect, see last week&amp;#39;s post
&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Announcing Ember&amp;#39;s First LTS Release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ember.js 2.5 beta, the branch of Ember that will be released as stable in
roughly six weeks, is also being released today.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-4'&gt;Changes in Ember.js 2.4&lt;/h3&gt;
&lt;p&gt;No new features are added in Ember core in 2.4. Instead this release
is primarily comprised of bugfixes making it an excellent LTS candidate. In
general the core team and
community have remained active around other highly visible parts of
the Ember stack (Ember CLI, Ember Data, FastBoot, Glimmer, etc).&lt;/p&gt;

&lt;p&gt;In six weeks, the current release build of 2.4 will become Ember&amp;#39;s first
LTS release. Builds on the LTS channel will receive critical bugfixes covering the
subsequent six release cycles (~36 weeks), and security patches for the subsequent
ten release cycles (~60 weeks). If your organization intends to remain on the
LTS channel, we strongly suggest you attempt updating your application to
2.4 and open any issues in the next six weeks.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.4, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.4.1/CHANGELOG.md"&gt;Ember.js 2.4.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-5-beta'&gt;Ember.js 2.5 beta&lt;/h3&gt;
&lt;p&gt;Ember 2.5 introduces several minor public API additions.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-ember-assign-code'&gt;&lt;code&gt;Ember.assign&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Ember.assign&lt;/code&gt; is a polyfill for the ES2015 &lt;code&gt;Object.assign&lt;/code&gt; feature. &lt;code&gt;assign&lt;/code&gt;
copies the values of all enumerable own properties from one or more source
objects to a target object. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let a = {&lt;span class="key"&gt;first&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
let b = {&lt;span class="key"&gt;last&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Lennon&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
let c = {&lt;span class="key"&gt;band&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Beatles&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};

Ember.assign(a, b, c);

&lt;span class="comment"&gt;// a === {first: 'John', last: 'Lennon', band: 'The Beatles'}&lt;/span&gt;
&lt;span class="comment"&gt;// b === {last: 'Lennon'}&lt;/span&gt;
&lt;span class="comment"&gt;// c === {band: 'The Beatles'}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more specifics on &lt;code&gt;assign&lt;/code&gt;, see the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_local-lookup-compatibility'&gt;Local Lookup Compatibility&lt;/h4&gt;
&lt;p&gt;As part of the &amp;quot;pods&amp;quot; directory layout, we intend to introduce a feature called
&amp;quot;local lookup&amp;quot;. This feature will allow for the creation of components available
only in a single template, instead of being globally scoped as they must be
today. &lt;code&gt;lookup&lt;/code&gt; and &lt;code&gt;resolve&lt;/code&gt; in Ember 2.5 will accept an optional &lt;code&gt;source&lt;/code&gt; property
on their &lt;code&gt;options&lt;/code&gt; argument. This API change will local
lookup to be implemented outside of Ember via the
&lt;a href="https://github.com/ember-cli/ember-resolver"&gt;ember-cli/ember-resolver&lt;/a&gt; library.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_native-event-test-helpers'&gt;Native Event Test Helpers&lt;/h4&gt;
&lt;p&gt;Ember&amp;#39;s acceptance test helpers, such as &lt;code&gt;click()&lt;/code&gt; have previously used
jQuery event triggers. In 2.5 this behavior has been altered to trigger
native events via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;/a&gt;.
This change is expected to be completely backwards compatible, and enable
the triggering of non-jQuery event listeners in acceptance tests.&lt;/p&gt;

&lt;p&gt;For more details on changes landing in 2.5, review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.5.0-beta.1/CHANGELOG.md"&gt;Ember.js 2.5.0-beta.1 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_update-ember-2-4-1-released'&gt;Update: Ember 2.4.1 Released&lt;/h3&gt;
&lt;p&gt;Shortly after Ember 2.4.0 was released, we have identified a regression that
caused incorrect deprecation warnings to be emitted. Specifically, we intended
to emit deprecation warnings when either (or both) of the legacy addons are
installed. Instead, the check was inverted, causing the deprecation warnings to
be emitted only if the addons are &lt;em&gt;not&lt;/em&gt; installed.&lt;/p&gt;

&lt;p&gt;Ember 2.4.1 has been released to address this error.&lt;/p&gt;

&lt;p&gt;It should be noted that the production builds for 2.4.0 are &lt;em&gt;not&lt;/em&gt; affected by
this regression, since deprecation warnings are only present in development
builds.&lt;/p&gt;
</content>
  </entry>
</feed>
